<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>git使用</title>
      <link href="/2017/07/18/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/07/18/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>git init</li><li>git clone <a href="http://XXX" target="_blank" rel="noopener">http://XXX</a></li><li>git add aa.md</li><li>git commit -m ‘描述’</li><li>git push origin master (推上去)</li></ol><h2 id="sea维护资料使用命令"><a href="#sea维护资料使用命令" class="headerlink" title="sea维护资料使用命令"></a>sea维护资料使用命令</h2><ol><li>git init </li><li>git clone http:XXX</li><li>git checkout -b  0715_master_que (建议大家都使用自己的分支上管理，日期+master+名字)</li><li>git add -A love (可以一次性管理全部文件夹)</li><li>git commit -m ‘改动的描述’</li><li>git checkout master (切换到主分支)</li><li>git pull origin master (使用之前先拉一下)</li><li>git merge 0715_master_que(跟主分支融合)</li><li>git push origin master(推到主分支上)</li></ol><hr><h2 id="在分支上使用一"><a href="#在分支上使用一" class="headerlink" title="在分支上使用一"></a>在分支上使用一</h2><ol><li>使用 git checkout -b 0713bug_master<ul><li>这个命令相当于两个命令</li><li>git branch 0731bug_master (创建分支)</li><li>git checkout 0730bug_master (新建分支)</li></ul></li><li>在新切分支上修改<ul><li>git status (可查看哪些文件被修改)</li><li>git add bb.md (选择本次提交文件,多个路径用空格隔开)</li><li>git commit -m ‘加描述’</li></ul></li><li>假设多次提交后,要merge到主分支上去<ul><li>git status (先查看一下)</li><li>git stash (将这些改动的文件暂存起来)</li><li>git checkout master (切换到主分支上)</li><li>git pull origin master (先拉)</li><li>git merge 0731bug_master (融合)</li><li>git push origin master (推上去吧)</li></ul></li></ol><h2 id="在分支上使用二"><a href="#在分支上使用二" class="headerlink" title="在分支上使用二"></a>在分支上使用二</h2><p>如果主分支有两个,比如一个稳定版,一个开发版,要merge到开发版应该如何操作呢?</p><ol><li>git log (在当前分支0713bug_master找一个commitId,这个commitId是当前所要merge的第一次提交的前一个commitId)</li><li>git checkout develop (切换到开发版分支)</li><li>git pull origin develop</li><li>git checkout 0713bug_master (切换到自己的bug分支)</li><li>git rebase –onto=develop commitId</li><li>git checkout develop (查看是否有冲突,有则解决)</li><li>git push origin develop</li></ol><h2 id="在分支上使用二-通用"><a href="#在分支上使用二-通用" class="headerlink" title="在分支上使用二(通用)"></a>在分支上使用二(通用)</h2><ol><li>git log(在当前分支0713bug_master上，找到要merge的commitId)</li><li>git checkout develop</li><li>git pull origin develop</li><li>git cherry-pick commitId<br>查看是否有冲突,有则解决冲突</li><li>git push origin develop</li></ol><h2 id="关于github上克隆项目的问题"><a href="#关于github上克隆项目的问题" class="headerlink" title="关于github上克隆项目的问题"></a>关于github上克隆项目的问题</h2><ol><li>新电脑需要先把公钥复制到 New SSH key里.<ul><li>ssh key：ssh-keygen -t rsa -C  “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“ (这里要一路回车)</li><li>在用户目录下的.ssh文件夹中有id_rsa(私钥)和id_rsa.pub(公钥)</li><li>git clone git@XXx</li><li>如果报错的话,有可能是网络环境问题,请在clone后+http协议地址.</li><li>git remote show origin (查看某个远程仓库的详细信息)</li></ul></li></ol><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><ol><li>rm aa.md</li><li>git rm aa.md</li><li>git commit -m ‘描述’</li><li>git push origin master</li></ol><h2 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h2><ol><li>it branch (查看本地所有的分支)</li><li>git add -A abc (abc为文件夹，文件夹下所有文档都将add)</li><li>git branch -D 0713bug_master (强制删除0713bug_master分支)</li><li>git reset –hard commitId(回滚到某次commitId状态，git reset –soft HEAD~ )</li><li><p>git reset [–hard|soft|mixed|merge|keep] [commit|HEAD]</p></li><li><p>git remote add kh <a href="https://git.oschina.Net/zgj2016/KHPro.git" target="_blank" rel="noopener">https://git.oschina.Net/zgj2016/KHPro.git</a> （这行命令执行一次就行，是为了给自己仓库的地址起个别名，下次提交不需要执行此行代码）</p></li><li>git mv game.py wordgame.py(在git里重命名需要用到git mv 命令)</li><li>echo *.temp &gt; .gitignore （创建带点的忽略文件夹，并忽略.temp文件）</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux软件的安装</title>
      <link href="/2017/07/18/linux%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/07/18/linux%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><ol><li>tar -zxvf XXX.tar.gz</li><li>./configure –prefix=/opt/mlterm (指定安装目录)</li><li>make(编绎)</li><li>make install(正式安装)</li><li>make clean (5 6 两步清除编译过程中产生的临时文件和配置过程中产生的文件)</li><li>make distclean<ol start="2"><li>二进程安装</li></ol><ul><li>rpm -i XXX.i386.rpm</li></ul></li></ol><hr><h2 id="软件的卸载"><a href="#软件的卸载" class="headerlink" title="软件的卸载"></a>软件的卸载</h2><ol><li>rpm -q -a (查看当前系统中安装的所有软件包)</li><li>rpm -e [package name]</li><li>rpm -e [package name] -nodeps  (忽略依赖关系的强行卸载)</li><li>rpm -ql [package name] (查看rpm包安装到哪了)</li></ol><p>源码包卸载</p><ol><li>建议安装到一个统一的目录<blockquote><p>./configure –prefix=/opt/mlterm</p></blockquote>#make<br>#make install</li></ol><p>2.有些软件需执行这条命令  make uninstall </p><hr><h2 id="linux查看程序是否启动-nginx为例"><a href="#linux查看程序是否启动-nginx为例" class="headerlink" title="linux查看程序是否启动(nginx为例)"></a>linux查看程序是否启动(nginx为例)</h2><ol><li>查看进程列表并过滤</li></ol><ul><li>ps -ef |grep nginx</li><li>ps -aux</li></ul><ol start="2"><li>直接查看进程id(推荐使用这种方式)</li></ol><ul><li>ps -C nginx -o pid</li><li>直接返回Nginx的pid</li></ul><ol start="3"><li>使用netstat命令</li></ol><ul><li>netstat -anp |grep :80</li></ul><ol start="4"><li>使用lsof命令</li></ol><ul><li>lsof -i:80 可以查看80端口是否有进程在运行</li></ul><hr><p>安装JDK和tomcat案例</p><ol><li>tar -zxvf jkdXXX</li><li>mkdir /usr/local/java</li><li>mv jdkXXX /usr/local/java</li><li><p>vim /etc/profile(修改配置文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unset i</span><br><span class="line">unset -f pathmunge</span><br><span class="line">export JAVA_HOME=/java/jdk1.8.0_172</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure></li><li><p>:wq!保存并退出</p></li><li>source /etc/profile (使配置生效)</li><li>java -version (测试是否成功)</li></ol><hr><p>安装tomcat</p><ol><li>mkdir /usr/local/tomcat</li><li>mv apache-tomcatXXX /usr/local/tomcat/</li><li>cd XXX/bin/ (进入到bin目录启动下面命令)</li><li>./startup.sh</li><li>netstat -anp |grep :8080 (查看是否启动)</li></ol><p>如果访问不了，有可能是服务器防火墙问题，8080端口被拦截了，于是需要打开8080端口，并保存重启防火墙：</p><blockquote><p>[root@localhost bin]# iptables  -I  INPUT  -p  tcp  –dport  8080  -j  ACCEPT<br>[root@localhost bin]# /etc/init.d/iptables  save<br>[root@localhost bin]# /etc/init.d/iptables  restart</p></blockquote><p>修改tomcat下的配置文件 tomcat-users.xml</p><blockquote><p>[root@localhost ~]# vim /usr/local/tomcat/apache-tomcat-7.0.77/conf/tomcat-users.xml</p></blockquote><p>在前添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;tomcat,manager-gui,admin-gui,admin-script,manager-script&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>注：username 和 password 则是登陆tomcat管理界面需要的账号密码。<br>:wq 保存退出，重启tomcat</p><h2 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h2><ol><li>yum groupinstall “X Window System”</li><li>yum grouplist</li><li>yum groupinstall “GNOME Desktop” (在grouplist中找一个桌面安装)</li><li>startx (进入桌面)</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 5.7.22解压版安装教程,亲测</title>
      <link href="/2017/07/18/mysql%205.7.22%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B,%E4%BA%B2%E6%B5%8B/"/>
      <url>/2017/07/18/mysql%205.7.22%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B,%E4%BA%B2%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>5.7版是ZIP包的形式,搞了半天时间,特意记录一下</p><ol><li>去官网下载5.7.22zip包</li><li>配置环境变量<ul><li>新建 变量名：MYSQL_HOME</li><li>变量值：D:\mysql-5.7.22-winx64</li><li>修改环境变量PATH</li><li>在PATH后面加入%MYSQL_HOME%\bin   </li><li>注：如果前面有值，要用;隔开</li></ul></li><li><p>自己创建一个文本文档my.ini，放在mysql根目录下，内容如下（其中的dir路径按自己的来）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\mysql-5.7.22-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\mysql-5.7.22-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></li><li><p>管理员权限打开cmd，cd到mysql安装目录\bin路径下</p></li><li>mysqld -install (执行安装命令,安装成功后，这时候是无法启动mysql服务的，因为没有data文件夹)</li><li>执行mysqld –initialize-insecure自动生成无密码的root用户</li><li>上面那一步有可能会报错,是因为你之前安装过没有删干净过,请记得删除掉服务,data下的全部文件,还有注册表.</li><li>net start mysql 启动mysql服务(启动服务：net start mysql，停止服务：net stop mysql)</li><li>这时再执行mysql -u root -p ，登陆mysql服务器即可。</li></ol><h2 id="修改登陆密码"><a href="#修改登陆密码" class="headerlink" title="修改登陆密码"></a>修改登陆密码</h2><ol><li>以管理员身份运行cmd进入bin目录下，然后停止服务器，输入</li><li>net stop mysql</li><li>mysqld –skip-grant-tables（回车，启动mysql，意思是告诉mysql不需要登录验证）。</li><li>然后关掉cmd，再重新打开。</li><li>输入mysql -uroot -p 连续按两次回车按钮会直接进入mysql的控制台界面</li><li>update mysql.user set authentication_string=password(‘123’)where user=’root’;flush privileges;  (再按回车)</li><li>打开任务管理器,关掉mysqld.exe进程.</li><li>net start mysql (再重启mysql服务)</li><li>此时mysql -uroot -p (发现设的设的密码已变成123)</li><li>这里就完成了,有问题可发邮件讨论(<a href="mailto:qjiamei@163.com" target="_blank" rel="noopener">qjiamei@163.com</a>)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring第一天</title>
      <link href="/2016/04/09/spring%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2016/04/09/spring%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h4 id="今日学习重点："><a href="#今日学习重点：" class="headerlink" title="今日学习重点："></a>今日学习重点：</h4><pre><code> Spring的基本介绍、体系结构、优点（理解） IOC（控制反转） DI（依赖注入） SpringBean获取与实例化 ApplicationContext和BeanFactory的区别 bean 实例化的三种方式Bean的作用域 (默认singleton)SpringBean的生命周期（了解） Spring注解开发</code></pre><h4 id="Spring基本介绍："><a href="#Spring基本介绍：" class="headerlink" title="Spring基本介绍："></a>Spring基本介绍：</h4><pre><code>Sping是什么？Spring它是一个一站式的分层轻量级开源框架。Spring的作用有哪些？</code></pre><p>1.致力于提供一种方法管理业务对象<br>2.能够使我们的javaee更加易用，以及促进良好的编程习惯<br>3.提供一种一站式的编程选择，致力于javaEE应用的各层解决方案，而不局限于某一层，能够无缝的与一些主流应用整合（不是直接替代）</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804101527_760.png" alt=""></p><h4 id="Spring-体系结构与优点"><a href="#Spring-体系结构与优点" class="headerlink" title="Spring 体系结构与优点"></a>Spring 体系结构与优点</h4><p>1.Spring 的体系架构<br>        包含了（五大部分）核心容器（core container） 面向切面编程相关（AOP）<br>持久层支持，Web层支持，Test<br>2.Spring优点：<br>      1) 可以令人方便愉快的使用Spring。<br>      2) 应用程序代码并不依赖于Spring API。<br>      3) Spring不和现有的解决方案竞争，而是致力于将它们融合在一起。<br>       当使用spring时，我们可以使用容器提供的众多服务<br> Spring环境搭建<br>        1.导包<br>        在spring开发中，我们要根据不同的情况来导入不同的jar包，当我们只使用IOC和DI的时候         我们需要导的有以下包：<br>        1.beans相关<br>        2.core相关<br>        3.context相关<br>        4.spel相关<br>        5.commons-logging<br>        6.log4j<br>2.编写配置文件：<br>在工程的src目录下面编写applicationContext.xml配置文件<br>注意：applicationContext.xml配置文件的约束信息在spring-framework-4.2.4.RELEASE-dist\spring-framework-4.2.4.RELEASE\docs\spring-framework-reference\html\ xsd-configuration.html里面去找</p><h4 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC:控制反转"></a>IOC:控制反转</h4><p>在程序中所说的IOC其实简单说，就是原来由我们自己实例化的对象交给spring容器来实始化。这时对象的实始化的权利就会反转。</p><pre><code>IOC原理：配置文件 + 反射 + 工厂Spring ioc基本使用步骤：</code></pre><p>1.在applicationContext.xml配置bean<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101727_477.png" alt=""><br>2.在程序中初始化Spring容器<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101728_114.png" alt=""><br>3.可以通过getBean(配置文件中id名称)来获取指定的对象<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101728_632.png" alt=""></p><h4 id="DI基本使用"><a href="#DI基本使用" class="headerlink" title="DI基本使用"></a>DI基本使用</h4><p>1.DI基本概念:dependency injection 依赖注入<br>        在spring框架负责创建Bean对象时，动态将依赖对象注入到Bean组件。<br>被调用者实例的创建由第三方(Spring 容器)完成，然后注入给调用者，移除调用者对被调用者的依赖。它的目的是解除对象与对象的依赖.<br>2.基本使用</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804101730_397.png" alt=""></p><p>3、IoC与DI的区别<br>IOC 控制反转，将对象的创建权,交由Spring管理。<br>DI  依赖注入 ，在Spring创建对象的过程中,把对象依赖的属性注入到类中</p><h4 id="Spring-Bean获取的实例化"><a href="#Spring-Bean获取的实例化" class="headerlink" title="Spring Bean获取的实例化"></a>Spring Bean获取的实例化</h4><ol><li>ApplicationContext和BeanFactory的区别</li></ol><ul><li>ApplicationContext继承了BeanFactory</li><li>BeanFactory它采取延迟加载的方案，只有真正在getBean时才会实例化Bean</li><li>AppliCationContext它会在配置文件加载时，就会初始化Bean,并且ApplicationContext它提供 </li><li>不同的应用层的Context实现。例如在web开发中可以使用WebApplicationContext.<h6 id="常用的两个ApplicationContext的实现类"><a href="#常用的两个ApplicationContext的实现类" class="headerlink" title="常用的两个ApplicationContext的实现类"></a>常用的两个ApplicationContext的实现类</h6>  FileSystemXmlAppliCationContext 根据文件路径获取<br>  ClassPathXmlApplicationContext  根据类路径获取</li></ul><ol start="2"><li>bean 实例化的三种方式：<br>1、 调用构造方法创建bean的实例(默认无参数)。<br><code>&lt;bean id=&quot;bean1&quot; class=&quot;com.spring.demo2.Bean1&quot;&gt;&lt;/bean&gt;</code><br>2、调用静态工厂方法创建 bean 的实例。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bean2&quot; class=&quot;com.spring.demo2.Bean2Factory&quot;</span><br><span class="line">            factory-method=&quot;getBean2&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><p>3、调用实例工厂方法创建 bean 的实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bean3Factory&quot; class=&quot;com.spring.demo2.Bean3Factory&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;bean3&quot; factory-bean=&quot;bean3Factory&quot; factory-method=&quot;getBean3&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>Bean的作用域【应用】(默认singleton)<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101743_396.png" alt=""></li></ol><p>#Bean的生命周期的11个步骤:</p><ol><li>instantiate bean对象实例化</li><li>populate properties 封装属性</li><li>如果Bean实现BeanNameAware 执行 setBeanName</li><li>如果Bean实现BeanFactoryAware 或者 ApplicationContextAware 设置工厂 setBeanFactory 或者上下文对象 setApplicationContext</li><li>如果存在类实现 BeanPostProcessor（后处理Bean） ，执行<br>postProcessBeforeInitialization</li><li>如果Bean实现InitializingBean 执行 afterPropertiesSet </li><li>调用<bean init-method="init"> 指定初始化方法 init</bean></li><li>如果存在类实现 BeanPostProcessor（处理Bean） ，执行<br>postProcessAfterInitialization</li><li>执行业务处理</li><li>如果Bean实现 DisposableBean 执行 destroy</li><li>调用<bean destroy-method="customerDestroy"> 指定销毁方法 customerDestroy### SpringBean的生命周期</bean></li></ol><p>总结:<br>    对于bean的生命周期，我们需要关注的主要有两个方法:<br>       1.增强bean的功能可以使用后处理Bean, BeanPostProcessor<br>       2.如果需要初始化或销毁操作我们可以使用init-method  destroy-method</p><p>注意:destroy-method只对scope=singleton有效果。</p><h4 id="Spring的注解开发"><a href="#Spring的注解开发" class="headerlink" title="Spring的注解开发"></a>Spring的注解开发</h4><p>1.Bean注册<br>Spring2.5 引入使用注解去定义Bean<br>@Component  描述Spring框架中Bean </p><p>Spring的框架中提供了与@Component注解等效的三个注解:<br>@Repository 用于对DAO实现类进行标注<br>@Service 用于对Service实现类进行标注<br>@Controller 用于对Controller实现类进行标注<br>在spring中使用注解，我们必须在applicationContext.xml文件中添加一个标签<br><a href="context:annotation-config/" target="_blank" rel="noopener">context:annotation-config/</a>作用是让spring中常用的一些注解生效。<br>要使用contex名称空间，必须在applicationContext.xml文件中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans </span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context </span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">&lt;!-- &lt;context:annotation-config /&gt; --&gt;</span><br></pre></td></tr></table></figure></p><pre><code>&lt;!-- 下面的配置作用是指定spring扫描的包,它包含了context:annotation-config的功能，所以在开发中一般就不需要在配置上面的 --&gt;&lt;context:component-scan base-package=&quot;cn.itheima&quot; /&gt;    </code></pre><p><br>Spring注解开发必须要导入一个包<br> spring-aop-4.2.4.RELEASE.jar</p><h4 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h4><p>简单的属性注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101749_827.png" alt=""><br>2.复杂的属性注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101750_611.png" alt=""><br>或者<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101750_570.png" alt=""><br>注意：@Value @Autowired它们可以修饰属性，也可以修饰setter方法，如果写在属性上，就不需要提供setter方法。<br>3.spring注解开发-属性依赖注入指定注入的名称<br>@Autowired它默认是根据类型进行注入。<br>如果与@Qualifier一起使用，就可以根据名称来进行注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101751_528.png" alt=""><br>4.Spring提供@Resource注解<br>因此可以使用下面的方式来根据名称进行属性注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101751_940.png" alt=""><br>5.spring注解开发-其它注解<br>配置Bean的作用范围:<br>@Scope使用注解配置的Bean和<bean>配置的一样，默认作用范围都是singleton<br>注意：对于销毁的方法它只对bean的scope=singleton有效。<br>配置Bean初始化方法和销毁方法:</bean></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring AOP</title>
      <link href="/2015/11/01/springAOP/"/>
      <url>/2015/11/01/springAOP/</url>
      
        <content type="html"><![CDATA[<h3 id="一-AOP概述"><a href="#一-AOP概述" class="headerlink" title="一. AOP概述"></a>一. AOP概述</h3><ul><li>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</li><li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li><li>AOP是一个概念，并没有设定具体语言的实现，它能克服那些只有单继承特性语言的缺点，spring2.0之后整合AspectJ第三方AOP技术。<a id="more"></a></li><li>主要功能<ul><li>日志记录，性能统计，安全控制，事务处理，异常处理等等</li></ul></li><li>主要意图<ul><li>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。<h3 id="二-AOP概述"><a href="#二-AOP概述" class="headerlink" title="二. AOP概述"></a>二. AOP概述</h3></li></ul></li><li>目标对象target<ul><li>指的是需要被增强的对象，由于spring aop是通过代理模式实现，从而这个对象永远是被代理对象</li></ul></li><li>连接点(join point)<ul><li>所谓连接点是指那些被拦截到的点，在spring中这些点指的是方法，因为spring只支持方法类型的连接点</li></ul></li><li>切入点(pointcut)<ul><li>表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方<br>简单说切入点是指我们要对哪些连接点进行拦截的定义</li></ul></li><li>通知(advice)<ul><li>Advice 定义了在 pointcut 里面定义的程序点具体要做的操作</li><li>所谓通知是指拦截到连接点之后所要做的事情就是通知，通知分为前置通知，后置通知，异常通知，最终通知，环绕通知</li></ul></li><li>引介introduction<ul><li>引介是一种特殊的通知，在不修改类代码的前提下，introduction可以在运行期为类动态地添加一些方法或属性</li></ul></li><li>切面aspect<ul><li>是切入点和通知的结合</li></ul></li><li>织入weaving<ul><li>织入是一个过程，是将切面应用到目标对象从而创建出AOP代理对象的过程，织入可以在编译期，类装载期，运行期进行。</li><li>Spring采用动态织入，而aspectj采用静态织入</li></ul></li><li>代理Proxy<ul><li>一个类被AOP织入增强后，就产生一个结果代理类</li></ul></li><li><strong>Spring的AOP为动态AOP，实现的技术为： JDK提供的动态代理技术 和 CGLIB(动态字节码增强技术)</strong> </li></ul><h3 id="三-JDK动态代理"><a href="#三-JDK动态代理" class="headerlink" title="三. JDK动态代理"></a>三. JDK动态代理</h3><ol><li>Jdk动态代理只针对于接口操作</li><li>使用java.lang.reflect下的Proxy,有个静态方法newProxyInstance.</li></ol><p><img src="http://p6hod2vhp.bkt.clouddn.com/201811012328_752.png" alt=""></p><ul><li>第一个参数:目标类的类加载器对象</li><li>第二个参数:目标类的实现接口的Class[]</li><li>第三个参数:InvocationHandler它是一个接口，它的作用是是代理实例的调用处理程序 实现的接口，接口中定义了一个方法,是叫invoke方法<br><img src="http://p6hod2vhp.bkt.clouddn.com/201811012331_33.png" alt=""></li></ul><h3 id="四-JDK动态代理代码实现"><a href="#四-JDK动态代理代码实现" class="headerlink" title="四. JDK动态代理代码实现"></a>四. JDK动态代理代码实现</h3><ul><li><p>目标类接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iuser</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>目标类接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IuserImpl</span> <span class="keyword">implements</span> <span class="title">Iuser</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"登陆方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"注册方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="comment">//带参构造方法 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdkProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理对象 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">creatProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.得到类加载器</span></span><br><span class="line">ClassLoader loader = target.getClass().getClassLoader();</span><br><span class="line"><span class="comment">//2.得到目标对象实现接口的Class[]  </span></span><br><span class="line">Class[] interfaces =target.getClass().getInterfaces();</span><br><span class="line"><span class="comment">//3. 返回代理对象</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(loader, interfaces,<span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">        <span class="comment">//4.匿名内部类在代理实例上处理方法,并返回结果</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"日志操作等功能增强"</span>);</span><br><span class="line"><span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IuserImpl iuserImpl = <span class="keyword">new</span> IuserImpl();</span><br><span class="line"><span class="comment">//有参构造方法</span></span><br><span class="line">JdkProxyFactory jdkProxyFactory = <span class="keyword">new</span> JdkProxyFactory(iuserImpl);</span><br><span class="line"></span><br><span class="line">Iuser creatProxy = (Iuser) jdkProxyFactory.creatProxy();</span><br><span class="line">creatProxy.login();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="五-cglib动态代理"><a href="#五-cglib动态代理" class="headerlink" title="五. cglib动态代理"></a>五. cglib动态代理</h3><ol><li>jdk代理是代理对象和被代理对象是继承的关系, 有接口默认使用jdk动态代理</li><li>cglib代理对象和被代理对象实现是同一接口, 是兄弟关系,对于被有接口的类就使用cglib.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CglibFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 创建enhancer</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">// 2. 传递目标对象的Class</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">// 设置回调操作(相当于invocationhandler)</span></span><br><span class="line"><span class="number">3</span>. enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodPorxy)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"么么操作"</span>);</span><br><span class="line"><span class="comment">//处理结果后返回</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4. enhancer对象创建代理对象并返回</span></span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springAOP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>观察者模式</title>
      <link href="/2015/11/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/11/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>观察者模式，又可以称之为发布-订阅模式，观察者，顾名思义，就是一个监听者，类似监听器的存在，一旦被观察/监听的目标发生的情况，就会被监听者发现，这么想来目标发生情况到观察者知道情况，其实是由目标奖情况发送到观察者的。<br>观察者模式多用于实现订阅功能的场景，例如微博的订阅，当我们订阅了某个人的微博账号，当这个人发布了新的消息，就会通知我们。</li><li>现在我们举一个类似的情况，并使用代码来实现，为大家提供一个比较明显的认识。</li><li>警察在找到嫌犯的时候，为了找到幕后主使，一般都会蹲点监察，这里我有三名便衣警察来蹲点监察2名嫌犯，三名便衣分别是：张昊天、石破天、赵日天，两名嫌犯是：大熊与黑狗，详见代码</li><li><p>观察者接口：Observer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line">package test.com;</span><br><span class="line">//观察者接口</span><br><span class="line">public interface Observer &#123;</span><br><span class="line">    void update(String message,String name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者实例1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"> <span class="comment">//便衣警察张昊天,观察者实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianyi1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义姓名</span></span><br><span class="line">    <span class="keyword">private</span> String bname = <span class="string">"张昊天"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message,String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">":"</span>+name+<span class="string">"那里有新情况："</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者实例2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianyi2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义姓名</span></span><br><span class="line">    <span class="keyword">private</span> String bname = <span class="string">"石破天"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message,String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">":"</span>+name+<span class="string">"那里有新情况："</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者实例3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianyi3</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义姓名</span></span><br><span class="line">    <span class="keyword">private</span> String bname = <span class="string">"赵日天"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message,String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">":"</span>+name+<span class="string">"那里有新情况："</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题接口,也就是被监控的对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Huairen</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加便衣观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="comment">//移除便衣观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notice</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="comment">//主题接口</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嫌犯大熊</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XianFan1</span> <span class="keyword">implements</span> <span class="title">Huairen</span> </span>&#123;</span><br><span class="line">    <span class="comment">//别称</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"大熊"</span>;</span><br><span class="line">    <span class="comment">//定义观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">//增加观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!observerList.contains(observer))&#123;</span><br><span class="line">            observerList.add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(observerList.contains(observer))&#123;</span><br><span class="line">            observerList.remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notice</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:observerList)&#123;</span><br><span class="line">            observer.update(message,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嫌犯黑狗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XianFan2</span> <span class="keyword">implements</span> <span class="title">Huairen</span> </span>&#123;</span><br><span class="line">    <span class="comment">//别称</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"黑狗"</span>;</span><br><span class="line">    <span class="comment">//定义观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">//增加观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!observerList.contains(observer))&#123;</span><br><span class="line">            observerList.add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(observerList.contains(observer))&#123;</span><br><span class="line">            observerList.remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notice</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:observerList)&#123;</span><br><span class="line">            observer.update(message,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clienter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个嫌犯</span></span><br><span class="line">        Huairen xf1 = <span class="keyword">new</span> XianFan1();</span><br><span class="line">        Huairen xf2 = <span class="keyword">new</span> XianFan2();</span><br><span class="line">        <span class="comment">//定义三个观察便衣警察</span></span><br><span class="line">        Observer o1 = <span class="keyword">new</span> Bianyi1();</span><br><span class="line">        Observer o2 = <span class="keyword">new</span> Bianyi2();</span><br><span class="line">        Observer o3 = <span class="keyword">new</span> Bianyi3();</span><br><span class="line">        <span class="comment">//为嫌犯增加观察便衣</span></span><br><span class="line">        xf1.addObserver(o1);</span><br><span class="line">        xf1.addObserver(o2);</span><br><span class="line">        xf2.addObserver(o1);</span><br><span class="line">        xf2.addObserver(o3);</span><br><span class="line">        <span class="comment">//定义嫌犯1的情况</span></span><br><span class="line">        String message1 = <span class="string">"又卖了一批货aaa"</span>;</span><br><span class="line">        String message2 = <span class="string">"老大要下来视察了"</span>;</span><br><span class="line">        xf1.notice(message1);</span><br><span class="line">        xf2.notice(message2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关键点：</p></li></ul><ol><li>针对观察者与被观察者分别定义接口，有利于分别进行扩展。</li><li>重点就在被观察者的实现中：<ul><li>定义观察者集合，并定义针对集合的添加、删除操作，用于增加、删除订阅者（观察者）</li><li>定义通知方法，用于将新情况通知给观察者用户（订阅者用户）</li></ul></li><li>观察者中需要有个接收被观察者通知的方法。</li></ol><ul><li>总结:</li></ul><ol><li>先定义观察者接口</li><li>继承观察者接口,实例观察者和更新方法</li><li>定义主题接口,接口中的抽像方法对观察者的增加和删除和通知等方法.传的参数就是观察者</li><li>实例化主题, 重写增加,删除,通知等方法, 使用一个list&lt;观察者对象&gt;.</li><li>测试的时候,主题增加观察者,都会进list,然后通知方法中就会遍历list,打印消息.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Solr</title>
      <link href="/2015/10/30/solr/"/>
      <url>/2015/10/30/solr/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是Solr"><a href="#一-什么是Solr" class="headerlink" title="一. 什么是Solr"></a>一. 什么是Solr</h3><ol><li>Solr是一个开源搜索平台，用于构建搜索应用程序。 它建立在Lucene(全文搜索引擎)之上。 Solr是企业级的，快速的和高度可扩展的。 使用Solr构建的应用程序非常复杂，可提供高性能。</li><li>Solr可以和Hadoop一起使用。由于Hadoop处理大量数据，Solr帮助我们从这么大的源中找到所需的信息。不仅限于搜索，Solr也可以用于存储目的。像其他NoSQL数据库一样，它是一种非关系数据存储和处理技术。总之，Solr是一个可扩展的，可部署，搜索/存储引擎，优化搜索大量以文本为中心的数据。<a id="more"></a><h3 id="二-Solr安装"><a href="#二-Solr安装" class="headerlink" title="二. Solr安装"></a>二. Solr安装</h3></li><li>安装 Tomcat，解压缩即可。</li><li>解压 solr。</li><li>把 solr 下的dist目录solr-4.10.3.war部署到 Tomcat\webapps下(去掉版本号)。</li><li>启动 Tomcat解压缩 war 包</li><li>把solr下example/lib/ext 目录下的所有的 jar 包，添加到 solr 的工程中(\WEB-INF\lib目录下)。</li><li>创建一个 solrhome 。solr 下的/example/solr 目录就是一个 solrhome。复制此目录到D盘改名为solrhome  </li><li>关联 solr 及 solrhome。需要修改 solr 工程的 web.xml 文件。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;env-entry&gt;</span><br><span class="line">   &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class="line">   &lt;env-entry-value&gt;d:\solrhome&lt;/env-entry-value&gt;</span><br><span class="line">   &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class="line">&lt;/env-entry&gt;</span><br></pre></td></tr></table></figure></li></ol><p>启动 Tomcat<br><a href="http://IP:8080/solr/" target="_blank" rel="noopener">http://IP:8080/solr/</a><br><img src="http://p6hod2vhp.bkt.clouddn.com/201810302130_469.png" alt=""></p><h3 id="三-中文分析器IK-Analyzer"><a href="#三-中文分析器IK-Analyzer" class="headerlink" title="三. 中文分析器IK Analyzer"></a>三. 中文分析器IK Analyzer</h3><ul><li>IK Analyzer 是一个开源的，基亍 java 语言开发的轻量级的中文分词工具包。从 2006年 12 月推出 1.0 版开始， IKAnalyzer 已经推出了 4 个大版本。最初，它是以开源项目Luence 为应用主体的，结合词典分词和文法分析算法的中文分词组件。从 3.0 版本开始，IK 发展为面向 Java 的公用分词组件，独立亍 Lucene 项目，同时提供了对 Lucene 的默认优化实现。在 2012 版本中，IK 实现了简单的分词歧义排除算法，标志着 IK 分词器从单纯的词典分词向模拟语义分词衍化。</li></ul><h3 id="四-IK-Analyzer配置"><a href="#四-IK-Analyzer配置" class="headerlink" title="四. IK Analyzer配置"></a>四. IK Analyzer配置</h3><ol><li>把IKAnalyzer2012FF_u1.jar 添加到 solr 工程的 lib 目录下</li><li>创建WEB-INF/classes文件夹  把扩展词典、停用词词典、配置文件放到 solr 工程的 WEB-INF/classes 目录下。</li><li>修改 Solrhome 的 schema.xml 文件，配置一个 FieldType，使用 IKAnalyzer,下面相当于配置了一个bean<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=<span class="string">"text_ik"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"solr.TextField"</span>&gt;</span><br><span class="line">     &lt;analyzer <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-配置域"><a href="#五-配置域" class="headerlink" title="五. 配置域"></a>五. 配置域</h3><ul><li>域相当于数据库的表字段，用户存放数据，因此用户根据业务需要去定义相关的Field（域），一般来说，每一种对应着一种数据，用户对同一种数据进行相同的操作。<br>域的常用属性：<br>| 属性     |   含义 |<br>| :——– |——–:|<br>|name| 指定域的名称|<br>|type|指定域的类型|<br>|indexed|是否索引|<br>|stored|是否存储|<br>|required|是否必须|<br>|multiValued|是否多值|</li></ul><ul><li>修改solrhome的schema.xml 文件  设置业务系统 Field<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=<span class="string">"item_goodsid"</span> type=<span class="string">"long"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_title"</span> type=<span class="string">"text_ik"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_price"</span> type=<span class="string">"double"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_image"</span> type=<span class="string">"string"</span> indexed=<span class="string">"false"</span> stored=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_category"</span> type=<span class="string">"string"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_seller"</span> type=<span class="string">"text_ik"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_brand"</span> type=<span class="string">"string"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="六-复制域"><a href="#六-复制域" class="headerlink" title="六. 复制域"></a>六. 复制域</h3><ul><li>复制域的作用在于将某一个Field中的数据复制到另一个域中</li><li>他是不需要存储的,逻辑组合起来基它域信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=<span class="string">"item_keywords"</span> type=<span class="string">"text_ik"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"false"</span> multiValued=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_title"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_category"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_seller"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_brand"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="七-动态域"><a href="#七-动态域" class="headerlink" title="七. 动态域"></a>七. 动态域</h3><ul><li>当我们需要动态扩充字段时，我们需要使用动态域。比如规格的值是不确定的，所以我们需要使用动态域来实现。需要实现的效果如下：使用一个map来实现.<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810302142_233.png" alt=""></li><li><code>&lt;dynamicField name=&quot;item_spec_*&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</code></li></ul><h3 id="八-Spring-Data-Solr简介"><a href="#八-Spring-Data-Solr简介" class="headerlink" title="八. Spring Data Solr简介"></a>八. Spring Data Solr简介</h3><p> Solr就是为了方便Solr的开发所研制的一个框架，其底层是对SolrJ（官方API）的封装。      </p><ol><li>创建maven工程SpringDataSolrDemo，pom.xml中引入依赖<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-solr&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-在src-main-resources下创建-applicationContext-solr-xml"><a href="#2-在src-main-resources下创建-applicationContext-solr-xml" class="headerlink" title="2. 在src/main/resources下创建  applicationContext-solr.xml"></a>2. 在src/main/resources下创建  applicationContext-solr.xml</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- solr服务器地址 --&gt;</span><br><span class="line">&lt;solr:solr-server id=<span class="string">"solrServer"</span> url=<span class="string">"http://127.0.0.1:8080/solr"</span> /&gt;</span><br><span class="line">&lt;!-- solr模板，使用solr模板可对索引库进行CRUD的操作 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"solrTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.data.solr.core.SolrTemplate"</span>&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">"solrServer"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="八-Field-注解"><a href="#八-Field-注解" class="headerlink" title="八. @Field 注解"></a>八. @Field 注解</h3><p>TbItem实体类,属性使用@Field注解标识。如果属性与配置文件定义的域名称不一致，需要在注解中指定域名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_price"</span>)</span><br><span class="line"><span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_image"</span>)</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_goodsid"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long goodsId;</span><br></pre></td></tr></table></figure></p><h3 id="九-增加（修改）"><a href="#九-增加（修改）" class="headerlink" title="九. 增加（修改）"></a>九. 增加（修改）</h3><ul><li>修改是先删除再增加<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=<span class="string">"classpath:applicationContext-solr.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTemplate</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SolrTemplate solrTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItem item=<span class="keyword">new</span> TbItem();</span><br><span class="line">item.setId(<span class="number">1L</span>);</span><br><span class="line">item.setBrand(<span class="string">"华为"</span>);</span><br><span class="line">item.setCategory(<span class="string">"手机"</span>);</span><br><span class="line">item.setGoodsId(<span class="number">1L</span>);</span><br><span class="line">item.setSeller(<span class="string">"华为2号专卖店"</span>);</span><br><span class="line">item.setTitle(<span class="string">"华为Mate9"</span>);</span><br><span class="line">item.setPrice(<span class="keyword">new</span> BigDecimal(<span class="number">2000</span>));</span><br><span class="line">solrTemplate.saveBean(item);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十-按主键查询"><a href="#十-按主键查询" class="headerlink" title="十. 按主键查询"></a>十. 按主键查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItem item = solrTemplate.getById(<span class="number">1</span>, TbItem.class);</span><br><span class="line">System.out.println(item.getTitle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一-按主键删除"><a href="#十一-按主键删除" class="headerlink" title="十一. 按主键删除"></a>十一. 按主键删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">solrTemplate.deleteById(<span class="string">"1"</span>);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十二-分页查询"><a href="#十二-分页查询" class="headerlink" title="十二. 分页查询"></a>十二. 分页查询</h3><ul><li>批量添加使用如下方法<br><code>solrTemplate.saveBeans(list);</code></li><li>编写分页查询测试代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">Query query=<span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">query.setOffset(<span class="number">20</span>);<span class="comment">//开始索引（默认0）</span></span><br><span class="line">query.setRows(<span class="number">20</span>);<span class="comment">//每页记录数(默认10)</span></span><br><span class="line">ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span><br><span class="line">System.out.println(<span class="string">"总记录数："</span>+page.getTotalElements());</span><br><span class="line">List&lt;TbItem&gt; list = page.getContent();</span><br><span class="line">showList(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示记录数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showList</span><span class="params">(List&lt;TbItem&gt; list)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(TbItem item:list)&#123;</span><br><span class="line">System.out.println(item.getTitle() +item.getPrice());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十三-条件查询"><a href="#十三-条件查询" class="headerlink" title="十三. 条件查询"></a>十三. 条件查询</h3><ul><li>Criteria 用于对条件的封装：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageQueryMutil</span><span class="params">()</span></span>&#123;</span><br><span class="line">Query query=<span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">Criteria criteria=<span class="keyword">new</span> Criteria(<span class="string">"item_title"</span>).contains(<span class="string">"2"</span>);</span><br><span class="line">criteria=criteria.and(<span class="string">"item_title"</span>).contains(<span class="string">"5"</span>);</span><br><span class="line">query.addCriteria(criteria);</span><br><span class="line"><span class="comment">//query.setOffset(20);//开始索引（默认0）</span></span><br><span class="line"><span class="comment">//query.setRows(20);//每页记录数(默认10)</span></span><br><span class="line">ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span><br><span class="line">System.out.println(<span class="string">"总记录数："</span>+page.getTotalElements());</span><br><span class="line">List&lt;TbItem&gt; list = page.getContent();</span><br><span class="line">showList(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十四-删除全部数据"><a href="#十四-删除全部数据" class="headerlink" title="十四. 删除全部数据"></a>十四. 删除全部数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">Query query=<span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">solrTemplate.delete(query);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十五-项目中运用"><a href="#十五-项目中运用" class="headerlink" title="十五.项目中运用"></a>十五.项目中运用</h3><h6 id="1-两种导入方法-第一种使用dataimpor-第二种使用工具类进行导入"><a href="#1-两种导入方法-第一种使用dataimpor-第二种使用工具类进行导入" class="headerlink" title="1. 两种导入方法,第一种使用dataimpor,第二种使用工具类进行导入"></a>1. 两种导入方法,第一种使用dataimpor,第二种使用工具类进行导入</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrUtil</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TbItemMapper itemMapper;</span><br><span class="line"><span class="comment">//导入商品数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importItemData</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItemExample example=<span class="keyword">new</span> TbItemExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">//已审核</span></span><br><span class="line">List&lt;TbItem&gt; itemList = itemMapper.selectByExample(example);</span><br><span class="line">System.out.println(<span class="string">"===商品列表==="</span>);</span><br><span class="line"><span class="keyword">for</span>(TbItem item:itemList)&#123;</span><br><span class="line">System.out.println(item.getTitle());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"===结束==="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath*:spring/applicationContext*.xml"</span>);</span><br><span class="line">SolrUtil solrUtil=  (SolrUtil) context.getBean(<span class="string">"solrUtil"</span>);</span><br><span class="line">solrUtil.importItemData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-数据导入Solr索引库"><a href="#2-数据导入Solr索引库" class="headerlink" title="2. 数据导入Solr索引库"></a>2. 数据导入Solr索引库</h6><ol><li>实体类<br>（1）将demo工程中添加了@Field注解的实体类拷贝到pinyougou-pojo中<br>（2）在pojo中引入spring-data-solr依赖<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-data-solr&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-添加Solr配置文件"><a href="#3-添加Solr配置文件" class="headerlink" title="3. 添加Solr配置文件"></a>3. 添加Solr配置文件</h5><ul><li>添加applicationContext-solr.xml到spring目录<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- solr服务器地址 --&gt;</span><br><span class="line">&lt;solr:solr-server id=<span class="string">"solrServer"</span> url=<span class="string">"http://127.0.0.1:8080/solr"</span> /&gt;</span><br><span class="line">&lt;!-- solr模板，使用solr模板可对索引库进行CRUD的操作 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"solrTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.data.solr.core.SolrTemplate"</span>&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">"solrServer"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-调用模板类导入solr"><a href="#4-调用模板类导入solr" class="headerlink" title="4. 调用模板类导入solr"></a>4. 调用模板类导入solr</h5><h5 id="5-规格导入动态域"><a href="#5-规格导入动态域" class="headerlink" title="5. 规格导入动态域"></a>5. 规格导入动态域</h5><ol><li>@Dynamic注解,修改TbItem.java ，添加动态域属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dynamic</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_spec_*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; specMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getSpecMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> specMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecMap</span><span class="params">(Map&lt;String, String&gt; specMap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.specMap = specMap;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">##### 6. 修改导入工具</span><br><span class="line">- SolrUtil.java,引入fastJSON依赖</span><br><span class="line">```java</span><br><span class="line"><span class="comment">//导入商品数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importItemData</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItemExample example=<span class="keyword">new</span> TbItemExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">//已审核</span></span><br><span class="line">List&lt;TbItem&gt; itemList = itemMapper.selectByExample(example);</span><br><span class="line">System.out.println(<span class="string">"===商品列表==="</span>);</span><br><span class="line"><span class="keyword">for</span>(TbItem item:itemList)&#123;</span><br><span class="line">Map specMap= JSON.parseObject(item.getSpec());<span class="comment">//将spec字段中的json字符串转换为map</span></span><br><span class="line">item.setSpecMap(specMap);<span class="comment">//给带注解的字段赋值</span></span><br><span class="line">System.out.println(item.getTitle());</span><br><span class="line">&#125;</span><br><span class="line">solrTemplate.saveBeans(itemList);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">System.out.println(<span class="string">"===结束==="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solr </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之三(dao配置2)</title>
      <link href="/2015/10/28/web%20xml%E4%B9%8B%E5%9B%9B(dao%20%E4%BA%8C)/"/>
      <url>/2015/10/28/web%20xml%E4%B9%8B%E5%9B%9B(dao%20%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h3 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h3><ol><li>resultMap可以实现将查询结果映射为复杂类型的pojo，比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。</li></ol><ul><li>使用association完成一对一映射需要配置一个resultMap，过程有点复杂，如果要实现延迟加载就只能用resultMap实现 ，如果为了方便对关联信息进行解析，也可以用association将关联信息映射到pojo中方便解析。</li></ul><ol start="2"><li>resultType可以指定pojo将查询结果映射为pojo，但需要pojo的属性名和sql查询的列名一致方可映射成功。<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810280948_292.png" alt=""></li></ol><ul><li><code>&lt;id /&gt;</code>：此属性表示查询结果集的唯一标识，非常重要。如果是多个字段为复合唯一约束则定义多个<code>&lt;id /&gt;</code>。</li><li>Property：表示User类的属性。</li><li>Column：表示sql查询出来的字段名。</li><li>Column和property放在一块儿表示将sql查询出来的字段映射到指定的pojo类属性上。</li><li><code>&lt;result /&gt;</code>：普通结果，即pojo的属性。<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><h4 id="1-if"><a href="#1-if" class="headerlink" title="1. if"></a>1. if</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递pojo综合查询用户信息 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findUserList"</span> parameterType=<span class="string">"user"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">select * from user </span><br><span class="line">where <span class="number">1</span>=<span class="number">1</span> </span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"id!=null"</span>&gt;</span><br><span class="line">and id=#&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span>&gt;</span><br><span class="line">and username like <span class="string">'%$&#123;username&#125;%'</span></span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-where"><a href="#2-where" class="headerlink" title="2. where"></a>2. where</h4><p><code>&lt;where /&gt;</code>可以自动处理第一个and。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserList"</span> parameterType=<span class="string">"user"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">select * from user </span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"id!=null and id!=''"</span>&gt;</span><br><span class="line">and id=#&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span>&gt;</span><br><span class="line">and username like <span class="string">'%$&#123;username&#125;%'</span></span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-foreach"><a href="#3-foreach" class="headerlink" title="3. foreach"></a>3. foreach</h3><ul><li>传入多个id查询用户信息，用下边两个sql实现：</li></ul><p><code>SELECT * FROM USERS WHERE username LIKE &#39;%张%&#39; AND (id =10 OR id =89 OR id=16)</code><br><code>SELECT * FROM USERS WHERE username LIKE &#39;%张%&#39;  id IN (10,89,16)</code></p><ul><li>pojo类</li><li><p>在pojo中定义list属性ids存储多个用户id，并添加getter/setter方法<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810280958_785.png" alt=""></p></li><li><p>mapper.xml写法</p></li><li>collection  循环部分</li><li>item 循环单元</li><li>open 循环开始添加的</li><li>close 循环结束添加的</li><li>separator 现个循环单元间添加的,比如逗号</li><li><img src="http://p6hod2vhp.bkt.clouddn.com/201810281004_496.png" alt=""></li></ul><h3 id="4-SQL片断"><a href="#4-SQL片断" class="headerlink" title="4. SQL片断"></a>4. SQL片断</h3><ul><li>Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的</li><li><p>将where条件抽取出来：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id=<span class="string">"query_user_where"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"id!=null and id!=''"</span>&gt;</span><br><span class="line">and id=#&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span>&gt;</span><br><span class="line">and username like <span class="string">'%$&#123;username&#125;%'</span></span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用include引用，注意：如果引用其它mapper.xml的sql片段，则在引用时需要加上namespace</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserList"</span> parameterType=<span class="string">"user"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">select * from user </span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;include refid=<span class="string">"query_user_where"</span>/&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-一对一关联映射"><a href="#5-一对一关联映射" class="headerlink" title="5.一对一关联映射"></a>5.一对一关联映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">  user.address</span><br><span class="line">FROM</span><br><span class="line">  orders,</span><br><span class="line">  user </span><br><span class="line">WHERE orders.user_id = user.id</span><br></pre></td></tr></table></figure><ul><li><p>ResultType(方法一)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 查询所有订单信息 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findOrdersList"</span> resultType=<span class="string">"cn.itheima.mybatis.po.OrdersCustom"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">orders.*,</span><br><span class="line">user.username,</span><br><span class="line">user.address</span><br><span class="line">FROM</span><br><span class="line">orders,user</span><br><span class="line">WHERE orders.user_id = user.id </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p>ResultMap(方法二)</p></li><li>这里resultMap指定orderUserResultMap。</li><li>association：表示进行关联查询单条记录</li><li>property：表示关联查询的结果存储在cn.itheima.mybatis.po.Orders的user属性中</li><li>javaType：表示关联查询的结果类型</li><li><code>&lt;id property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</code>：查询结果的user_id列对应关联对象的id属性，这里是<code>&lt;id /&gt;</code>表示user_id是关联查询对象的唯一标识。</li><li><code>&lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</code>：查询结果的username列对应关联对象的username属性。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 查询订单关联用户信息使用resultmap --&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">"Orders"</span> id=<span class="string">"orderUserResultMap"</span>&gt;</span><br><span class="line">&lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"user_id"</span> property=<span class="string">"userId"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"number"</span> property=<span class="string">"number"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"createtime"</span> property=<span class="string">"createtime"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"note"</span> property=<span class="string">"note"</span>/&gt;</span><br><span class="line">&lt;!-- 一对一关联映射 --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">property:Orders对象的user属性</span><br><span class="line">javaType：user属性对应 的类型</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;association property=<span class="string">"user"</span> javaType=<span class="string">"cn.itheima.po.User"</span>&gt;</span><br><span class="line">&lt;!-- column:user表的主键对应的列  property：user对象中id属性--&gt;</span><br><span class="line">&lt;id column=<span class="string">"user_id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"username"</span> property=<span class="string">"username"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"address"</span> property=<span class="string">"address"</span>/&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">"findOrdersWithUserResultMap"</span> resultMap=<span class="string">"orderUserResultMap"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">o.id,</span><br><span class="line">o.user_id,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note,</span><br><span class="line">u.username,</span><br><span class="line">u.address</span><br><span class="line">FROM</span><br><span class="line">orders o</span><br><span class="line">JOIN `user` u ON u.id = o.user_id</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-一对多关联映射"><a href="#6-一对多关联映射" class="headerlink" title="6.一对多关联映射"></a>6.一对多关联映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">u.*, o.id oid,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note</span><br><span class="line">FROM</span><br><span class="line">`user` u</span><br><span class="line">LEFT JOIN orders o ON u.id = o.user_id</span><br></pre></td></tr></table></figure><p>mapper.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"user"</span> id=<span class="string">"userOrderResultMap"</span>&gt;</span><br><span class="line">&lt;!-- 用户信息映射 --&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>/&gt;</span><br><span class="line">&lt;!-- 一对多关联映射 --&gt;</span><br><span class="line">&lt;collection property=<span class="string">"orders"</span> ofType=<span class="string">"orders"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"oid"</span>/&gt;</span><br><span class="line">      &lt;!--用户id已经在user对象中存在，此处可以不设置--&gt;</span><br><span class="line">&lt;!-- &lt;result property=<span class="string">"userId"</span> column=<span class="string">"id"</span>/&gt; --&gt;</span><br><span class="line">&lt;result property=<span class="string">"number"</span> column=<span class="string">"number"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"createtime"</span> column=<span class="string">"createtime"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"note"</span> column=<span class="string">"note"</span>/&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">"getUserOrderList"</span> resultMap=<span class="string">"userOrderResultMap"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">u.*, o.id oid,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note</span><br><span class="line">FROM</span><br><span class="line">`user` u</span><br><span class="line">LEFT JOIN orders o ON u.id = o.user_id</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><ul><li>collection部分定义了用户关联的订单信息。表示关联查询结果集</li><li>property=”orders”：关联查询的结果集存储在User对象的上哪个属性。</li><li>ofType=”orders”：指定关联查询的结果集中的对象类型即List中的对象类型。此处可以使用别名，也可以使用全限定名。</li><li><code>&lt;id /&gt;</code>及<code>&lt;result/&gt;</code>的意义同一对一查询。<h3 id="7-mybatis一级缓存和二级缓存"><a href="#7-mybatis一级缓存和二级缓存" class="headerlink" title="7. mybatis一级缓存和二级缓存"></a>7. mybatis一级缓存和二级缓存</h3></li><li>mybatis一级缓存是一个SqlSession级别，sqlsession只能访问自己的一级缓存的数据，二级缓存是跨sqlSession，是mapper级别的缓存，对于mapper级别的缓存不同的sqlsession是可以共享的。<h3 id="8-应用场景resultType、resultMap"><a href="#8-应用场景resultType、resultMap" class="headerlink" title="8.应用场景resultType、resultMap"></a>8.应用场景resultType、resultMap</h3></li></ul><ol><li>使用association和collection完成一对一和一对多高级映射。</li></ol><ul><li>association：<br>作用：将关联查询信息映射到一个pojo类中。<br>场合：为了方便获取关联信息可以使用association将关联订单映射为pojo，比如：查询订单及关联用户信息。</li><li>collection：<br>作用：将关联查询信息映射到一个list集合中。<br>场合：为了方便获取关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块和功能，可使用collection将模块和功能列表映射到list中。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dao.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之三(dao配置)</title>
      <link href="/2015/10/27/web%20xml%E4%B9%8B%E5%9B%9B(dao)/"/>
      <url>/2015/10/27/web%20xml%E4%B9%8B%E5%9B%9B(dao)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-mybatis介绍"><a href="#1-mybatis介绍" class="headerlink" title="1. mybatis介绍"></a>1. mybatis介绍</h3><ul><li>MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</li><li>Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</li></ul><h3 id="2-解决jdbc开发存在的诸多问题"><a href="#2-解决jdbc开发存在的诸多问题" class="headerlink" title="2. 解决jdbc开发存在的诸多问题"></a>2. 解决jdbc开发存在的诸多问题</h3><ol><li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li></ol><ul><li>解决：在SqlMapConfig.xml中配置数据链接池，使用连接池管理数据库链接。</li></ul><ol start="2"><li>Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</li></ol><ul><li>解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。</li></ul><ol start="3"><li>向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。</li></ol><ul><li>解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型.</li></ul><ol start="4"><li>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。</li></ol><ul><li>解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型。</li></ul><ol start="5"><li>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。</li></ol><ul><li>解决：Mybatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。</li></ul><h3 id="3-JDBC开发步骤"><a href="#3-JDBC开发步骤" class="headerlink" title="3. JDBC开发步骤"></a>3. JDBC开发步骤</h3><p>1、加载数据库驱动<br>2、创建并获取数据库链接<br>3、创建jdbc statement对象<br>4、设置sql语句<br>5、设置sql语句中的参数(使用preparedStatement)<br>6、通过statement执行sql并获取结果<br>7、对sql执行结果进行解析处理<br>8、释放资源(resultSet、preparedstatement、connection)</p><ul><li>代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//加载数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">connection =  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//定义sql语句 ?表示占位符</span></span><br><span class="line">String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line"><span class="comment">//获取预处理statement</span></span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line"><span class="comment">//向数据库发出sql执行查询，查询出结果集</span></span><br><span class="line">resultSet =  preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//遍历查询结果集</span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"  "</span>+resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resultSet.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preparedStatement.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-mybatis架构"><a href="#4-mybatis架构" class="headerlink" title="4. mybatis架构"></a>4. mybatis架构</h3><ol><li><p>mybatis配置<br>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。<br>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</p></li><li><p>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</p></li><li>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</li><li>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</li><li>Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</li><li>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</li><li>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810272200_223.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201810272203_277.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201810272206_215.png" alt=""><h3 id="5-与spring整合后的配置文件"><a href="#5-与spring整合后的配置文件" class="headerlink" title="5. 与spring整合后的配置文件"></a>5. 与spring整合后的配置文件</h3></li></ol><ul><li>SqlMapConfig.xml中配置的内容和顺序如下：</li></ul><ol><li>properties（属性）</li><li>settings（全局配置参数）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境集合属性对象）</li><li>environment（环境子属性对象）</li><li>transactionManager（事务管理）</li><li>dataSource（数据源）</li><li>mappers（映射器）</li></ol><ul><li>mybatis支持别名：<br>| 别名     |    映射的类型 |<br>| :——– | ——–:|<br>| _byte  | byte  |<br>|_long     |long |<br>|_short     |short |<br>|_int     |int |<br>|_integer |    int |<br>|_double |    double |<br>|_float |    float ||<br>|_boolean |    boolean |<br>|string |    String |<br>|byte     |Byte |<br>|long |    Long |<br>|short |    Short |<br>|int |    Integer |<br>|integer |    Integer |<br>|double |    Double |<br>|float |    Float |<br>|boolean |    Boolean |<br>|date |    Date |<br>|decimal |    BigDecimal |<br>|bigdecimal |    BigDecimal |<br>|map|    Map|</li></ul><p>自定义别名：在SqlMapConfig.xml中配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">&lt;!-- 单个别名定义 --&gt;</span><br><span class="line">&lt;typeAlias alias=<span class="string">"user"</span> type=<span class="string">"cn.itcast.mybatis.po.User"</span>/&gt;</span><br><span class="line">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"cn.itcast.mybatis.po"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"其它包"</span>/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure></p><ul><li>Mapper配置的几种方法：<ul><li>使用相对于类路径的资源<br>如：<code>&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;</code></li><li>使用mapper接口类路径<br>如：<code>&lt;mapper class=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;/&gt;</code></li><li>注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。</li></ul></li><li>注册指定包下的所有mapper接口<ul><li>如：<code>&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code></li><li>注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。有下面两个要求</li><li>1、mapper映射文件和接口在同一个目录下</li><li>2、mapper映射文件的名称和接口名称一致。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 加载配置文件 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span><br><span class="line">destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"10"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"5"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- mapper配置 --&gt;</span><br><span class="line">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis/SqlMapConfig.xml"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置Mapper扫描器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.que.springmvc.mapper"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-未与spring整合开发步骤"><a href="#5-未与spring整合开发步骤" class="headerlink" title="5. 未与spring整合开发步骤"></a>5. 未与spring整合开发步骤</h3><ol><li>SqlMapConfig.xml文件</li></ol><ul><li>SqlMapConfig.xml是mybatis核心配置文件，配置内容为数据源、事务管理。</li></ul><ol start="2"><li>po类</li></ol><ul><li>Po类作为mybatis进行sql映射使用，po类通常与数据库表对应</li></ul><ol start="3"><li>sql映射文件</li></ol><ul><li>在classpath下的sqlmap目录下创建sql映射文件Users.xml<code>&lt;mapper namespace=&quot;test&quot;&gt;&lt;/mapper&gt;</code></li><li>namespace ：命名空间，用于隔离sql语句，后面会讲另一层非常重要的作用(sql片段)。</li></ul><ol start="4"><li>加载映射文件</li></ol><ul><li>mybatis框架需要加载映射文件，将Users.xml添加在SqlMapConfig.xml，如下：<br><code>&lt;mappers&gt; &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt; &lt;/mappers&gt;</code></li></ul><ol start="5"><li>在映射文件中写SQL语句</li></ol><ul><li>比如在user.xml中</li><li><p>parameterType：定义输入到sql中的映射类型，#{id}表示使用preparedstatement设置占位符号并将输入变量id传到sql。<br>resultType：定义结果映射类型。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 根据id获取用户信息 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findUserById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"cn.itheima.mybatis.po.User"</span>&gt;</span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>${}</code>表示拼接sql串，通过<code>${}</code>可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换， ${}可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，<strong><code>${}</code>括号中只能是value</strong>。对于多参数, 需要使用pojo来封装参数。</p></li><li>比如<code>select * from user where username like &#39;%${value}%&#39;</code></li><li><code>#{}</code>表示一个占位符号，通过<code>#{}</code>可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，<code>#{}</code>可以有效防止sql注入。 <code>#{}</code>可以接收简单类型值或pojo属性值。 如果parameterType传输单个简单类型值，<code>#{}</code>括号中可以是value或其它名称</li><li>parameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。</li><li>resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。</li><li>测试代码</li></ul><ol><li>创建一个SQLSessionFactoryBuilder对象。</li><li>加载配置文件。</li><li>创建SQLSessionFactory对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 第一步：创建一个SQLSessionFactoryBuilder对象。</span></span><br><span class="line">SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">// 第二步：加载配置文件。</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="comment">// 第三步：创建SQLSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-主键返回"><a href="#6-主键返回" class="headerlink" title="6. 主键返回"></a>6. 主键返回</h3><ul><li>mapper代理的开发规则：<ol><li>namespace必须时候接口的全限定名</li><li>Statementid必须和接口的方法名称一致</li><li>接口方法的参数类型要和parameterType要一致</li><li>接口方法的返回值类型要和resultType一致</li></ol></li><li>添加selectKey实现将主键返回</li><li>keyProperty:返回的主键存储在pojo中的哪个属性</li><li>order：selectKey的执行顺序，是相对与insert语句来说，由于mysql的自增原理执行完insert语句之后才将主键生成，所以这里selectKey的执行顺序为after</li><li>resultType:返回的主键是什么类型</li><li>LAST_INSERT_ID():是mysql的函数，是线程安全的, 在当前事务中查找, 返回auto_increment自增列新记录id值。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertUser"</span> parameterType=<span class="string">"cn.itheima.mybatis.po.User"</span>&gt;</span><br><span class="line">&lt;!-- selectKey将主键返回，需要再返回 --&gt;</span><br><span class="line">&lt;selectKey keyProperty=<span class="string">"id"</span> order=<span class="string">"AFTER"</span> resultType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line"><span class="function">select <span class="title">LAST_INSERT_ID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">   insert into <span class="title">user</span><span class="params">(username,birthday,sex,address)</span></span></span><br><span class="line"><span class="function">    <span class="title">values</span><span class="params">(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span></span>;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-生产环境代码"><a href="#7-生产环境代码" class="headerlink" title="7. 生产环境代码"></a>7. 生产环境代码</h3><ul><li><p>applicationContext-dao</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> xmlns:jdbc=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开启AOP监听 只对当前配置文件有效 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy expose-proxy=<span class="string">"true"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 参考：https:<span class="comment">//github.com/alibaba/druid/wiki/DruidDataSource配置属性列表， https://github.com/alibaba/druid/wiki/连接泄露检测， </span></span><br><span class="line">https:<span class="comment">//github.com/alibaba/druid/wiki/常见问题 --&gt;</span></span><br><span class="line">&lt;bean name=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span><br><span class="line">init-method=<span class="string">"init"</span> destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- initialSize默认<span class="number">0</span>：初始化时建立物理连接的个数 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"initialSize"</span> value=<span class="string">"$&#123;druid.initialSize&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- maxActive默认<span class="number">8</span>：最大连接池数量 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"$&#123;druid.maxActive&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- minIdle默认<span class="number">8</span>：最小连接池数量 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"minIdle"</span> value=<span class="string">"$&#123;druid.minIdle&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- maxWait：获取连接时最大等待时间，单位毫秒。 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为<span class="keyword">true</span>使用非公平锁。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxWait"</span> value=<span class="string">"$&#123;druid.maxWait&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"validationQuery"</span> value=<span class="string">"$&#123;jdbc.validationQuery&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- testOnBorrow默认<span class="keyword">true</span>：申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"testOnBorrow"</span> value=<span class="string">"$&#123;druid.testOnBorrow&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- testOnReturn默认<span class="keyword">false</span>：归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"testOnReturn"</span> value=<span class="string">"$&#123;druid.testOnReturn&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- testWhileIdle默认<span class="keyword">false</span>：建议配置为<span class="keyword">true</span>，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"testWhileIdle"</span> value=<span class="string">"$&#123;druid.testWhileIdle&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- timeBetweenEvictionRunsMillis：配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"timeBetweenEvictionRunsMillis"</span> value=<span class="string">"$&#123;druid.timeBetweenEvictionRunsMillis&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- minEvictableIdleTimeMillis：配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"minEvictableIdleTimeMillis"</span> value=<span class="string">"$&#123;druid.minEvictableIdleTimeMillis&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- 当发生连接泄漏时，使用RemoveAbandanded相关配置，用来关闭长时间不使用的连接。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"removeAbandoned"</span> value=<span class="string">"$&#123;druid.removeAbandoned&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- removeAbandonedTimeout：单位秒 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"removeAbandonedTimeout"</span> value=<span class="string">"$&#123;druid.removeAbandonedTimeout&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"logAbandoned"</span> value=<span class="string">"$&#123;druid.logAbandoned&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- 配置监控统计拦截的filters，属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall --&gt;</span><br><span class="line">&lt;property name=<span class="string">"filters"</span> value=<span class="string">"$&#123;druid.filters&#125;"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;property name="configLocation" value="classpath:config/dev/mybatis-config.xml"&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class="line">&lt;property name="mapperLocations" value="classpath*:/mybatis/**/*Mapper.xml"&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">3.3</span>.0版本可用 - reasonable分页参数合理化，默认<span class="keyword">false</span>禁用 启用合理化时，如果pageNum&lt;<span class="number">1</span>会查询第一页，如果pageNum&gt;pages会查询最后一页 </span><br><span class="line">禁用合理化时，如果pageNum&lt;<span class="number">1</span>或pageNum&gt;pages会返回空数据 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"plugins"</span>&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"properties"</span>&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">dialect=oracle</span><br><span class="line">reasonable=<span class="keyword">false</span></span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.elsteel.dao"</span> /&gt;</span><br><span class="line">&lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- (事务管理)transaction manager --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用annotation定义事务 开启AOP监听 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span> proxy-target-<span class="class"><span class="keyword">class</span></span>=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>数据库连接配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=oracle.jdbc.driver.OracleDriver</span><br><span class="line">jdbc.url= jdbc\:oracle\:thin\:<span class="meta">@localhost</span>\:<span class="number">1521</span>\:xe</span><br><span class="line">jdbc.username=ylwlcs</span><br><span class="line">jdbc.password=ylwlcs</span><br><span class="line"></span><br><span class="line">jdbc.validationQuery=SELECT <span class="number">1</span></span><br><span class="line"></span><br><span class="line">druid.initialSize=<span class="number">1</span></span><br><span class="line">druid.maxActive=<span class="number">20</span></span><br><span class="line">druid.minIdle=<span class="number">1</span></span><br><span class="line">druid.maxWait=<span class="number">60000</span></span><br><span class="line">druid.testOnBorrow=<span class="keyword">false</span></span><br><span class="line">druid.testOnReturn=<span class="keyword">false</span></span><br><span class="line">druid.testWhileIdle=<span class="keyword">true</span></span><br><span class="line">druid.timeBetweenEvictionRunsMillis=<span class="number">60000</span></span><br><span class="line">druid.minEvictableIdleTimeMillis=<span class="number">25200000</span></span><br><span class="line">druid.removeAbandoned=<span class="keyword">true</span></span><br><span class="line">druid.removeAbandonedTimeout=<span class="number">1800</span></span><br><span class="line">druid.logAbandoned=<span class="keyword">true</span></span><br><span class="line">#wall</span><br><span class="line">druid.filters=stat</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dao.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之三(service配置)</title>
      <link href="/2015/10/26/web%20xml%E4%B9%8B%E4%B8%89(service)/"/>
      <url>/2015/10/26/web%20xml%E4%B9%8B%E4%B8%89(service)/</url>
      
        <content type="html"><![CDATA[<h3 id="applicationContext-service-xml"><a href="#applicationContext-service-xml" class="headerlink" title="applicationContext-service.xml"></a>applicationContext-service.xml</h3><ol><li>配置包扫描<br><code>&lt;context:component-scan base-package=&quot;com.que.springmvc.service&quot;/&gt;</code> </li><li>完整配置代码<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置包扫描器 --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.que.springmvc.service"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="applicationContext-trans-xml"><a href="#applicationContext-trans-xml" class="headerlink" title="applicationContext-trans.xml"></a>applicationContext-trans.xml</h3><h4 id="1-配置事物管理器"><a href="#1-配置事物管理器" class="headerlink" title="1. 配置事物管理器"></a>1. 配置事物管理器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;!-- 数据源 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="2-配置通知"><a href="#2-配置通知" class="headerlink" title="2. 配置通知"></a>2. 配置通知</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通知 --&gt;</span><br><span class="line">&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;!-- 传播行为 --&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"save*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"insert*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"delete*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"update*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"find*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"get*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><h4 id="3-配置切面"><a href="#3-配置切面" class="headerlink" title="3. 配置切面"></a>3. 配置切面</h4><ul><li><p>关于execution语法常用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. execution(public * *()) 所有的public的方法</span><br><span class="line">2. execution(* cn.que.aop.*(..)) 所有的aop包下的所有类的方法(不包含子包)</span><br><span class="line">3. execution(* cn.que.aop..*(..)) 所有的aop包及其子包下的所有类的方法 </span><br><span class="line">4. execution(* cn.que.aop.IOrderService.*(..)) IOrderService接口中定义的所有方法</span><br><span class="line">5. execution(* cn.que.aop.IOrderService+.*(..)) 匹配实现特定接口所有类的方法</span><br><span class="line">6. execution(* save*(..)) 区配所有的以save开头的方法</span><br><span class="line">7. *空格+方法路径\*+(..)这是加方法参数</span><br></pre></td></tr></table></figure></li><li><p>配置切面代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span></span><br><span class="line">pointcut=<span class="string">"execution(* com.que.springmvc.service.*.*(..))"</span> /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service.xml trans.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之二(mvc配置)</title>
      <link href="/2015/10/26/web%20xml%E4%B9%8B%E4%BA%8C/"/>
      <url>/2015/10/26/web%20xml%E4%B9%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="一-配置文件详解"><a href="#一-配置文件详解" class="headerlink" title="一. 配置文件详解"></a>一. 配置文件详解</h3><ol><li>@RequestBody</li></ol><ul><li>该注解用于读取http请求的内容(字符串)，通过springmvc提供的HttpMessageConverter接口将读到的内容转换为json、xml等格式的数据并绑定到controller方法的参数上。</li><li>@RequestBody注解实现接收http请求的json数据，将json数据转换为java对象</li></ul><ol start="2"><li>@ResponseBody</li></ol><ul><li>响应json数据，把java对象转换成json并响应</li></ul><h4 id="1-配置包扫描"><a href="#1-配置包扫描" class="headerlink" title="1. 配置包扫描"></a>1. 配置包扫描</h4><p><code>&lt;context:component-scan base-package=&quot;com.que.springmvc.controller&quot;/&gt;</code></p><h4 id="2-配置注解驱动"><a href="#2-配置注解驱动" class="headerlink" title="2. 配置注解驱动"></a>2. 配置注解驱动</h4><p>如果配置此标签可以不用配置处理器映射器和适配器<br><code>&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</code></p><h4 id="3-转换器配置"><a href="#3-转换器配置" class="headerlink" title="3. 转换器配置"></a>3. 转换器配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 转换器的配置 --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"conversionService"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.converter.DateConverter"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="4-配置视图解析器"><a href="#4-配置视图解析器" class="headerlink" title="4. 配置视图解析器"></a>4. 配置视图解析器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="5-全局异常处理器"><a href="#5-全局异常处理器" class="headerlink" title="5. 全局异常处理器"></a>5. 全局异常处理器</h4><p><code>&lt;bean class=&quot;com.que.springmvc.exception.GlobalExceptionResolver&quot;/&gt;</code></p><h4 id="6-配置多媒体文件解析器-文件上传"><a href="#6-配置多媒体文件解析器-文件上传" class="headerlink" title="6. 配置多媒体文件解析器(文件上传)"></a>6. 配置多媒体文件解析器(文件上传)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"multipartResolver"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br><span class="line">&lt;!-- 设置上传文件的最大尺寸为<span class="number">5</span>MB --&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxUploadSize"</span>&gt;</span><br><span class="line">&lt;value&gt;5242880&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="7-配置静态资源映射器"><a href="#7-配置静态资源映射器" class="headerlink" title="7.配置静态资源映射器"></a>7.配置静态资源映射器</h4><ul><li>如果在DispatcherServlet中设置url-pattern为 /则必须对静态资源进行访问处理。<br>spring mvc 的&lt;mvc:resources mapping=”” location=””&gt;实现对静态资源进行映射访问。<br>如下是对js文件访问配置：<br><code>&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt;</code></li><li>另外一种方法:<br>容器默认DefaultServletHandler处理所有静态内容和无RequestMapping处理的URL配置了下面这个, 上面的放行静态资源就不需要了<br><code>&lt;mvc:default-servlet-handler /&gt;</code></li></ul><h4 id="8-配置拦截器"><a href="#8-配置拦截器" class="headerlink" title="8.配置拦截器"></a>8.配置拦截器</h4><ul><li><p>. 针对某种bean配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"interceptors"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor2"</span>/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor2"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>. 针对全局配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  &lt;mvc:interceptors&gt;</span><br><span class="line">按照配置的顺序执行</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.interceptor.Interceptor1"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.interceptor.Interceptor2"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.interceptor.LoginInterceptor"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-配置拦截器-java类"><a href="#9-配置拦截器-java类" class="headerlink" title="9. 配置拦截器(java类)"></a>9. 配置拦截器(java类)</h4><h5 id="1-实现HandlerInterceptor接口"><a href="#1-实现HandlerInterceptor接口" class="headerlink" title="1. 实现HandlerInterceptor接口"></a>1. 实现HandlerInterceptor接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.que.springmvc.interceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String uri = request.getRequestURL().toString();</span><br><span class="line"><span class="keyword">if</span> (uri.contains(<span class="string">"login"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a)拦截用户请求，判断用户是否登录</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">Object username = session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// b)如果用户已经登录。放行</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// c)如果用户未登录，跳转到登录页面。</span></span><br><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/user/showlogin"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//handle执行之后，返回ModelAndView之前。</span></span><br><span class="line">System.out.println(<span class="string">"Interceptor1 postHandle......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 返回ModelAndView之后。</span></span><br><span class="line"><span class="comment">//可以在此处理异常</span></span><br><span class="line">System.out.println(<span class="string">"Interceptor1 afterCompletion......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>方法preHandle: 顾名思义，该方法将在请求处理之前进行调用。SpringMVC 中的Interceptor 是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。每个Interceptor 的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor 中的preHandle 方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。<strong>该方法的返回值是布尔值Boolean类型的，当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法。</strong></li><li>方法postHandle:<br>由preHandle 方法的解释我们知道这个方法包括后面要说到的afterCompletion 方法都只能是在当前所属的Interceptor 的preHandle 方法的返回值为true 时才能被调用。postHandle 方法，顾名思义就是在当前请求进行处理之后，<strong>也就是Controller 方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。postHandle 方法被调用的方向跟preHandle 是相反的，也就是说先声明的Interceptor 的postHandle 方法反而会后执行</strong>，这和Struts2 里面的Interceptor 的执行过程有点类型。Struts2 里面的Interceptor 的执行过程也是链式的，只是在Struts2 里面需要手动调用ActionInvocation 的invoke 方法来触发对下一个Interceptor 或者是Action 的调用，然后每一个Interceptor 中在invoke 方法调用之前的内容都是按照声明顺序执行的，而invoke 方法之后的内容就是反向的。</li><li>方法afterCompletion<br>该方法也是需要当前对应的Interceptor 的preHandle 方法的返回值为true 时才会执行。顾名思义，该方法将在整个请求结束之后，<strong>也就是在DispatcherServlet 渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的</strong>。</li></ol><hr><h5 id="2-实现WebRequestInterceptor接口"><a href="#2-实现WebRequestInterceptor接口" class="headerlink" title="2. 实现WebRequestInterceptor接口"></a>2. 实现WebRequestInterceptor接口</h5><p>WebRequestInterceptor 中也定义了三个方法，我们也是通过这三个方法来实现拦截的。这三个方法都传递了同一个参数WebRequest ，那么这个WebRequest 是什么呢？这个WebRequest 是Spring 定义的一个接口，它里面的方法定义都基本跟HttpServletRequest 一样，在WebRequestInterceptor 中对WebRequest 进行的所有操作都将同步到HttpServletRequest 中，然后在当前请求中一直传递。</p><ul><li><p>方法preHandle:方法将在请求处理之前进行调用，也就是说会在Controller 方法调用之前被调用。<strong>这个方法跟HandlerInterceptor 中的preHandle 是不同的，主要区别在于该方法的返回值是void ，也就是没有返回值，所以我们一般主要用它来进行资源的准备工作</strong>，比如我们在使用Hibernate 的时候可以在这个方法中准备一个Hibernate 的Session 对象，然后利用WebRequest 的setAttribute(name, value, scope) 把它放到WebRequest 的属性中。这里可以说说这个setAttribute 方法的第三个参数scope ，该参数是一个Integer 类型的。在WebRequest 的父层接口RequestAttributes 中对它定义了三个常量：<br>SCOPE_REQUEST ：它的值是0 ，代表只有在request 中可以访问。<br>SCOPE_SESSION ：它的值是1 ，如果环境允许的话它代表的是一个局部的隔离的session，否则就代表普通的session，并且在该session范围内可以访问。<br>SCOPE_GLOBAL_SESSION ：它的值是2 ，如果环境允许的话，它代表的是一个全局共享的session，否则就代表普通的session，并且在该session 范围内可以访问</p></li><li><p><strong>方法postHandle:该方法将在请求处理之后，也就是在Controller 方法调用之后被调用，但是会在视图返回被渲染之前被调用，所以可以在这个方法里面通过改变数据模型ModelMap 来改变数据的展示</strong>。该方法有两个参数，WebRequest 对象是用于传递整个请求数据的，比如在preHandle 中准备的数据都可以通过WebRequest 来传递和访问；ModelMap 就是Controller 处理之后返回的Model 对象，我们可以通过改变它的属性来改变返回的Model 模型。</p></li><li><p>方法afterCompletion:该方法会在整个请求处理完成<strong>，也就是在视图返回并被渲染之后执行。所以在该方法中可以进行资源的释放操作</strong>。而WebRequest 参数就可以把我们在preHandle 中准备的资源传递到这里进行释放。Exception 参数表示的是当前请求的异常对象，如果在Controller 中抛出的异常已经被Spring 的异常处理器给处理了的话，那么这个异常对象就是是null 。</p></li><li><p>WebRequestInterceptor接口代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequestInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllInterceptor</span> <span class="keyword">implements</span> <span class="title">WebRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在请求处理之前执行，该方法主要是用于准备资源数据的，然后可以把它们当做请求属性放到WebRequest中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preHandle</span><span class="params">(WebRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"AllInterceptor..............................."</span>);</span><br><span class="line">        request.setAttribute(<span class="string">"request"</span>, <span class="string">"request"</span>, WebRequest.SCOPE_REQUEST);<span class="comment">//这个是放到request范围内的，所以只能在当前请求中的request中获取到</span></span><br><span class="line">        request.setAttribute(<span class="string">"session"</span>, <span class="string">"session"</span>, WebRequest.SCOPE_SESSION);<span class="comment">//这个是放到session范围内的，如果环境允许的话它只能在局部的隔离的会话中访问，否则就是在普通的当前会话中可以访问</span></span><br><span class="line">        request.setAttribute(<span class="string">"globalSession"</span>, <span class="string">"globalSession"</span>, WebRequest.SCOPE_GLOBAL_SESSION);<span class="comment">//如果环境允许的话，它能在全局共享的会话中访问，否则就是在普通的当前会话中访问</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法将在Controller执行之后，返回视图之前执行，ModelMap表示请求Controller处理之后返回的Model对象，所以可以在</span></span><br><span class="line"><span class="comment">     * 这个方法中修改ModelMap的属性，从而达到改变返回的模型的效果。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(WebRequest request, ModelMap map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">for</span> (String key:map.keySet())</span><br><span class="line">            System.out.println(key + <span class="string">"-------------------------"</span>);;</span><br><span class="line">        map.put(<span class="string">"name3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">        map.put(<span class="string">"name1"</span>, <span class="string">"name1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法将在整个请求完成之后，也就是说在视图渲染之后进行调用，主要用于进行一些资源的释放</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(WebRequest request, Exception exception)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(exception + <span class="string">"-=-=--=--=-=-=-=-=-=-=-=-==-=--=-=-=-="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>拦截器总结:<br>由上面的示例可以看出可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。<br>在mvc:interceptors标签下声明interceptor主要有两种方式：<br>（1）直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。<br>（2）使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。<br>经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。</p><h4 id="9-配置转换器-java类"><a href="#9-配置转换器-java类" class="headerlink" title="9. 配置转换器(java类)"></a>9. 配置转换器(java类)</h4><p>DateConverter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * springmvc转换器</span></span><br><span class="line"><span class="comment"> * Converter&lt;S, T&gt; S：source源数据类型 T：target 目标数据类型</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: DateConverter&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: www.itcast.cn&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date date = simpleDateFormat.parse(source);</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10-异常处理器-java类"><a href="#10-异常处理器-java类" class="headerlink" title="10. 异常处理器(java类)"></a>10. 异常处理器(java类)</h4><h5 id="1-异常处理思路"><a href="#1-异常处理思路" class="headerlink" title="1. 异常处理思路"></a><strong>1. 异常处理思路</strong></h5><ul><li>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</li><li>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</li><li>Springmvc DispatcherServlet –&gt;HandlerExceptionResolver</li></ul><ol start="2"><li>自定义异常类</li></ol><ul><li>为了区别不同的异常通常根据异常类型自定义异常类，这里我们创建一个自定义系统异常，如果controller、service、dao抛出此类异常说明是系统预期处理的异常信息。这些异常类型通常继承于Exception。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义异常实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> String expMessage;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.expMessage = msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getExpMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> expMessage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpMessage</span><span class="params">(String expMessage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.expMessage = expMessage;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-自定义异常处理器"><a href="#2-自定义异常处理器" class="headerlink" title="2. 自定义异常处理器"></a><strong>2. 自定义异常处理器</strong></h5><ul><li>前端控制器DispatcherServlet在进行HandlerMapping、调用HandlerAdapter执行Handler过程中，如果遇到异常，进行异常处理。</li></ul><p>异常代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.que.springmvc.exception;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">Exception exception)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//判断异常的类</span></span><br><span class="line">String msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(exception <span class="keyword">instanceof</span> CustomerException)&#123;</span><br><span class="line">CustomerException customerException = (CustomerException)exception;</span><br><span class="line">msg = customerException.getExpMessage();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果是自定义异常,取错误 消息</span></span><br><span class="line"><span class="comment">//如果是运行时异常,取错误堆栈</span></span><br><span class="line">exception.printStackTrace();</span><br><span class="line">StringWriter s = <span class="keyword">new</span> StringWriter();</span><br><span class="line">PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(s);</span><br><span class="line">exception.printStackTrace(printWriter);</span><br><span class="line">msg = s.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个错误 页面,显示错误消息</span></span><br><span class="line">ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">modelAndView.addObject(<span class="string">"msg"</span>,msg);</span><br><span class="line">modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvc.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之一(web.xml配置)</title>
      <link href="/2015/10/26/web%20xml/"/>
      <url>/2015/10/26/web%20xml/</url>
      
        <content type="html"><![CDATA[<h3 id="一-ssm整合"><a href="#一-ssm整合" class="headerlink" title="一. ssm整合"></a>一. ssm整合</h3><ol><li>整合思路<br>Dao层：</li></ol><ul><li>SqlMapConfig.xml，空文件即可。需要文件头。</li><li>applicationContext-dao.xml。<br>a. 数据库连接池<br>b. SqlSessionFactory对象，需要spring和mybatis整合包下的。<br>c. 配置mapper文件扫描器。</li></ul><ol start="2"><li>Service层：</li></ol><ul><li>applicationContext-service.xml包扫描器，扫描@service注解的类。</li><li>applicationContext-trans.xml配置事务。</li></ul><ol start="3"><li><p>表现层：<br>Springmvc.xml</p><ul><li>包扫描器，扫描@Controller注解的类。</li><li>配置注解驱动。</li><li>视图解析器 </li></ul><p>Web.xml</p><ul><li>配置前端控制器。</li></ul></li></ol><h3 id="二-sqlMapConfig-xml"><a href="#二-sqlMapConfig-xml" class="headerlink" title="二. sqlMapConfig.xml"></a>二. sqlMapConfig.xml</h3><p>在classpath下创建mybatis/sqlMapConfig.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h3 id="三-applicationContext-dao-xml"><a href="#三-applicationContext-dao-xml" class="headerlink" title="三. applicationContext-dao.xml"></a>三. applicationContext-dao.xml</h3><p>配置数据源、配置SqlSessionFactory、mapper扫描器。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line">&lt;!-- 加载配置文件 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span><br><span class="line">destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"10"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"5"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- mapper配置 --&gt;</span><br><span class="line">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis/SqlMapConfig.xml"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置Mapper扫描器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.itheima.springmvc.mapper"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>db.properties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//localhost:3306/springmvc?characterEncoding=utf-8</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure></p><h3 id="四-applicationContext-service-xml"><a href="#四-applicationContext-service-xml" class="headerlink" title="四. applicationContext-service.xml"></a>四. applicationContext-service.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.itheima.springmvc.service"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="五-applicationContext-transaction-xml"><a href="#五-applicationContext-transaction-xml" class="headerlink" title="五.applicationContext-transaction.xml"></a>五.applicationContext-transaction.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;!-- 数据源 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 通知 --&gt;</span><br><span class="line">&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;!-- 传播行为 --&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"save*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"insert*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"delete*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"update*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"find*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"get*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;!-- 切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span></span><br><span class="line">pointcut=<span class="string">"execution(* com.itheima.springmvc.service.*.*(..))"</span> /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="六-springmvc-xml"><a href="#六-springmvc-xml" class="headerlink" title="六. springmvc.xml"></a>六. springmvc.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">xmlns:dubbo=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span> xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span><br><span class="line"><span class="string">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 扫描带Controller注解的类 --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.itheima.springmvc.controller"</span> /&gt;</span><br><span class="line">&lt;!-- 加载注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"viewClass"</span></span><br><span class="line">value=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span><br><span class="line">&lt;!-- jsp前缀 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span><br><span class="line">&lt;!-- jsp后缀 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="七-web-xml"><a href="#七-web-xml" class="headerlink" title="七. web.xml"></a>七. web.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span><br><span class="line">id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</span><br><span class="line">&lt;display-name&gt;springmvc-web&lt;/display-name&gt;</span><br><span class="line">&lt;welcome-file-list&gt;</span><br><span class="line">&lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</span><br><span class="line">&lt;/welcome-file-list&gt;</span><br><span class="line">&lt;!-- 加载spring容器 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- 加载<span class="title">springmvc</span>容器 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">&lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h3 id="八-总结"><a href="#八-总结" class="headerlink" title="八. 总结"></a>八. 总结</h3><h3 id="1-web-xml中配置"><a href="#1-web-xml中配置" class="headerlink" title="1. web.xml中配置"></a>1. web.xml中配置</h3><ul><li><code>&lt;display-name&gt;</code></li><li><p><code>&lt;welcome-file-list&gt;</code></p><h4 id="A-context-param标签"><a href="#A-context-param标签" class="headerlink" title="A. context-param标签"></a>A. context-param标签</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath*:spring/applicationContext-*.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br></pre></td></tr></table></figure></li><li><p>这里是加载spring/applicationContext-*.xml的xml文件,也就是加载了这些XML文件.<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810261554_59.png" alt=""></p><h4 id="B-listener标签"><a href="#B-listener标签" class="headerlink" title="B. listener标签"></a>B. listener标签</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext.xml的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。</p></blockquote><p>ApplicationContext.xml这个配置文件部一般默认放置在。applicationContext的默认的路径是”/WEB-INF/applicationContext.xml。也可以在web.xml中配置该文件的其他位置。</p><h4 id="C-servlet标签"><a href="#C-servlet标签" class="headerlink" title="C. servlet标签"></a>C. servlet标签</h4><ul><li>指定spring路径下面的springmvc.xml文件<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">    &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="D-servlet-mapping"><a href="#D-servlet-mapping" class="headerlink" title="D. servlet-mapping"></a>D. servlet-mapping</h4><p>用在Servlet和URL样式之间定义一个映射。name为上面声明过的<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><h4 id="D-filter标签"><a href="#D-filter标签" class="headerlink" title="D. filter标签"></a>D. filter标签</h4><ul><li>通过类org.springframework.web.filter.CharacterEncodingFilter，定义request和response的编码</li><li>CharacterEncodingFilter类具有encoding和forceEncoding两个属性，其中encoding是表示设置request的编码，forceEncoding表示是否同时设置response的编码。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">   &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">   &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">     &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">     &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">utf</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="E-web-xml全部配置"><a href="#E-web-xml全部配置" class="headerlink" title="E. web.xml全部配置"></a>E. web.xml全部配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</span><br><span class="line">  &lt;display-name&gt;springmvc-first&lt;/display-name&gt;</span><br><span class="line">  &lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</span><br><span class="line">  &lt;/welcome-file-list&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath*:spring/applicationContext-*.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">      &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">utf</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring mvc 总结</title>
      <link href="/2015/10/26/spring%20mvc/"/>
      <url>/2015/10/26/spring%20mvc/</url>
      
        <content type="html"><![CDATA[<h3 id="1-spring知识体系"><a href="#1-spring知识体系" class="headerlink" title="1. spring知识体系"></a>1. spring知识体系</h3><ol><li>Springmvc介绍</li><li>入门程序</li><li>Springmvc架构讲解<br>a)框架结构<br>b)组件说明</li><li>Springmvc整合mybatis</li><li>参数绑定<br>a)Springmvc默认支持的类型<br>b)简单数据类型<br>c)Pojo类型<br>d)Pojo包装类型<br>e)自定义参数绑定</li><li><p>Springmvc和struts2的区别</p></li><li><p>高级参数绑定<br>a)数组类型的参数绑定<br>b)List类型的绑定</p></li><li>@RequestMapping注解的使用</li><li>Controller方法返回值</li><li>Springmvc中异常处理</li><li>图片上传处理</li><li>Json数据交互</li><li>拦截器</li></ol><h3 id="2-Spring-web-mvc介绍"><a href="#2-Spring-web-mvc介绍" class="headerlink" title="2. Spring web mvc介绍"></a>2. Spring web mvc介绍</h3><p>2.1 Springmvc是什么？<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810261027_537.png" alt=""></p><p>2.2 SpringMVC处理流程<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810261033_418.png" alt=""></p><h3 id="3-Springmvc架构"><a href="#3-Springmvc架构" class="headerlink" title="3. Springmvc架构"></a>3. Springmvc架构</h3><p><img src="http://p6hod2vhp.bkt.clouddn.com/201810261036_41.png" alt=""></p><h3 id="4-架构流程"><a href="#4-架构流程" class="headerlink" title="4. 架构流程"></a>4. 架构流程</h3><ol><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li><li>执行处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li><li>ViewReslover解析后返回具体View</li><li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户</li></ol><h3 id="5-组件说明-以下组件通常使用框架提供实现"><a href="#5-组件说明-以下组件通常使用框架提供实现" class="headerlink" title="5. 组件说明(以下组件通常使用框架提供实现)"></a>5. 组件说明(以下组件通常使用框架提供实现)</h3><ol><li>ispatcherServlet：前端控制器(作用接收请求，响应结果，相当于转发器，中央处理器。)用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</li><li>HandlerMapping：处理器映射器(不需要程序员开发)<br>HandlerMapping负责根据用户请求的url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</li><li>Handler：处理器(需要程序员开发)</li><li>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。<br>==由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。<br>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler==</li><li>HandlAdapter：处理器适配器<br>通过HandlerAdapter的特定规则对处理器Handler进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</li><li>View Resolver：视图解析器<br>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）<br>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 </li><li>View：视图(需要程序员开发jsp)<br>springmvc框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。<br><strong>说明：在springmvc的各个组件中，处理器映射器、处理器适配器、视图解析器称为springmvc的三大组件。<br>需要用户开发的组件有handler、view</strong></li></ol><h3 id="6-springmvc的配置文件"><a href="#6-springmvc的配置文件" class="headerlink" title="6. springmvc的配置文件"></a>6. springmvc的配置文件</h3><h4 id="1-组件扫描器"><a href="#1-组件扫描器" class="headerlink" title="1. 组件扫描器"></a>1. 组件扫描器</h4><p>使用组件扫描器省去在spring容器配置每个controller类的繁琐。使用<a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>自动扫描标记@controller的控制器类，配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 扫描controller注解,多个包中间使用半角逗号分隔 --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"cn.que.springmvc.controller.first"</span>/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2-RequestMappingHandlerMapping"><a href="#2-RequestMappingHandlerMapping" class="headerlink" title="2. RequestMappingHandlerMapping"></a>2. RequestMappingHandlerMapping</h4><p>   注解式处理器映射器，对类中标记@ResquestMapping的方法进行映射，根据ResquestMapping定义的url匹配ResquestMapping标记的方法，匹配成功返回HandlerMethod对象给前端控制器，HandlerMethod对象中封装url对应的方法Method。<br>   xml配置如下<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--注解处理器映射器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>   注解描述：<br>@RequestMapping：定义请求url到处理器功能方法的映射</p><h4 id="3-RequestMappingHandlerAdapter"><a href="#3-RequestMappingHandlerAdapter" class="headerlink" title="3. RequestMappingHandlerAdapter"></a>3. RequestMappingHandlerAdapter</h4><p>注解式处理器适配器，对标记@ResquestMapping的方法进行适配。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注解处理器适配器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="4-lt-mvc-annotation-driven-gt"><a href="#4-lt-mvc-annotation-driven-gt" class="headerlink" title="4. &lt;mvc:annotation-driven&gt;"></a>4. <code>&lt;mvc:annotation-driven&gt;</code></h4><p>springmvc使用<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>自动加载RequestMappingHandlerMapping和RequestMappingHandlerAdapter，可用在springmvc.xml配置文件中使用<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>替代注解处理器和适配器的配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置注解驱动, 如果配置了此标签, 可以不用配置映射器和适配器 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="5-视图解析器"><a href="#5-视图解析器" class="headerlink" title="5. 视图解析器"></a>5. 视图解析器</h4><p>在springmvc.xml文件配置如下：</p><pre><code class="java">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;        &lt;property name=<span class="string">"viewClass"</span>            value=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;        &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span> /&gt;        &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span> /&gt;    &lt;/bean&gt;</code></pre><ul><li><p>InternalResourceViewResolver：支持JSP视图解析<br>viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，所以classpath中必须包含jstl的相关jar 包。此属性可以不设置，默认为JstlView。</p></li><li><p>prefix 和suffix：查找视图页面的前缀和后缀，最终视图的址为：前缀+逻辑视图名+后缀，逻辑视图名需要在controller中返回ModelAndView指定，比如逻辑视图名为hello，则最终返回的jsp视图地址 “WEB-INF/jsp/hello.jsp”</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows中不同版本JDK环境的切换</title>
      <link href="/2015/06/09/windows%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACJDK%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%87%E6%8D%A2/"/>
      <url>/2015/06/09/windows%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACJDK%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="windows中不同版本JDK环境的切换"><a href="#windows中不同版本JDK环境的切换" class="headerlink" title="windows中不同版本JDK环境的切换"></a>windows中不同版本JDK环境的切换</h4><p>我们发现之前修改JAVA_HOME的操作并没有什么卵用！</p><p>因为在Windows环境中的变量的优先级高于JAVA_HOME变量的优先级，直接修改变量值是没有用的。<br><a id="more"></a></p><p>解决方法： </p><ol><li>当使用安装版本的JDK程序时（JDK1.7以上），在安装结束后安装程序会自动将java.exe、javaw.exe、javaws.exe三个可执行文件复制到C:\Windows\System32目录，删除C:\Windows\System32目录下java.exe、javaw.exe、javaws.exe三个文件。</li><li><p>把Path最前面的C:\ProgramData\Oracle\Java\javapath;删除</p></li><li><p>进入此电脑，在查看中将“隐藏的项目”打勾，然后进入<br>C:\ProgramData\Oracle\Java，将Java文件直接删除，然后删除Path中C:\ProgramData\Oracle\Java\javapath配置。</p></li><li><p>新建变量JAVA_HOME，填写jdk的安装路径，我的是：C:\Program Files\Java\jdk1.7.0_75</p></li><li>新建变量CLASSPATH，写“.;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\dt.jar;”</li><li>PATH属性填写“C:\Program Files\Java\jdk1.7.0_75\bin”，要注意，加上这句话之前PATH原有的内容不要随便删除，都是非常重要的配置，在原有内容的后面加上英文分号“;”，再添上这句话。</li></ol><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804111802_751.png" alt=""></p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804111802_908.png" alt=""></p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804111803_863.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>struct第二天</title>
      <link href="/2015/04/09/struts%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2015/04/09/struts%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h3><p>1.Struts2获取ServletAPI<br>2.OGNL表达式(理解)<br>3.ValueStack值栈(熟练使用)<br>4.Struts2拦截器（Interceptor）<br><a id="more"></a><br><br><br><br><br><br><br><br><br><br><br><br></p><h3 id="01-Struts2中获取ServletAPI-两种方式"><a href="#01-Struts2中获取ServletAPI-两种方式" class="headerlink" title="01- Struts2中获取ServletAPI(两种方式)"></a>01- Struts2中获取ServletAPI(两种方式)</h3><p>a.通过ServletActionContext获取<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021320_873.png" alt=""></p><p>b.采用注入方式（Action实现指定接口）<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021328_246.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021329_36.png" alt=""></p><h3 id="02-OGNL表达式（理解即可）"><a href="#02-OGNL表达式（理解即可）" class="headerlink" title="02- OGNL表达式（理解即可）"></a>02- OGNL表达式（理解即可）</h3><p>基本概述<br>OGNL是Object-Graph Navigation Language(对象图导航语言)的缩写，它是一种功能强大的表达式语言，通过OGNL的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。</p><pre><code>注意：1.Struts2本身集成了OGNL2.OGNL本身也是一个项目，它是可以单独使用。3．OGNL使用的时候必须有三要素：  a）表达式      b）OgnlContext   OGNL上下文   c）Root </code></pre><p>OGNL的功能<br>1.支持对象操作<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021335_459.png" alt=""><br>2.支持静态成员访问<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021336_882.png" alt=""><br>3.访问OgnlContext上下文<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021337_698.png" alt=""><br>如果从根中获取数据，不需要添加#号<br>如果不是从根中获取，需要#<br>4.操作集合<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021338_826.png" alt=""></p><h4 id="Strtus2框架中如何使用ognl表达式"><a href="#Strtus2框架中如何使用ognl表达式" class="headerlink" title="Strtus2框架中如何使用ognl表达式"></a>Strtus2框架中如何使用ognl表达式</h4><p>在struts2框架中使用ognl表达式的作用是从valueStack中获取数据<br>结合struts2框架的标签&lt;s:property value=”表达式”&gt;来使用<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021339_580.png" alt=""></p><p>###03-  ValueStack值栈</p><h4 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1. 基本概述"></a>1. 基本概述</h4><p>valueStack它就是一个容器，使用valueStack的主要目的是为了将action中产生的数据携带到页面上，简单说就是在Action中通过ValueStack保存值，在jsp页面里面从ValueStack中获取值</p><p>必须理解的东西：<br>当客户端向我们发送一个请求（对应一个Request对象），服务器就会创始一个Action对象来处理请求（struts2中的action是多例的），所以它不存在线程安全问题（不同请求Action对象不同）。而每一个Action对象都会有一个自己的ValueStack. valueStack贯穿整个action的生命周期；<br>简单的说就是一个request对应一个Action,一个Action对应一个ValueStack</p><pre><code>request-------Action------ValueStack（一一对应）</code></pre><p>注意：Struts2框架会将Action对应的ValueStack保存在Request中<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021341_600.png" alt=""></p><h4 id="2-valueStack内部结构"><a href="#2-valueStack内部结构" class="headerlink" title="2. valueStack内部结构"></a>2. valueStack内部结构</h4><pre><code>1.Action如何获取ValueStack    2.如何向ValueStack中存储数据3.Jsp页面里面如何从ValueStack中取数据</code></pre><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021342_386.png" alt=""></p><h4 id="3-获取ValueStack"><a href="#3-获取ValueStack" class="headerlink" title="3. 获取ValueStack"></a>3. 获取ValueStack</h4><p>第一种方式:可以直接通过request对象来获取.<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021346_222.png" alt=""></p><p>第二种方式:使用ActionContext来获取<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021346_751.png" alt=""></p><h4 id="4-ActionContext简介"><a href="#4-ActionContext简介" class="headerlink" title="4. ActionContext简介"></a>4. ActionContext简介</h4><p>ActionContext它是action上下文，strtus2框架它使用actionContext来保存Action在执行过程中所需要的一些对象，例如 session, application…<br>Request—线程—ActionContext—-Action—–ValueStack它们都对应着一次请求(一个线程).</p><p>   ==简单的说就是用户每次请求服务器会创建一个线程去处理请求，每次请求会创建一个request,一个    request对应一个Action,一个Action对应一个ValueStack,而一个Action也对应者一个          ActionContext==</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021352_742.png" alt=""></p><h4 id="5-valueStack存储数据"><a href="#5-valueStack存储数据" class="headerlink" title="5. valueStack存储数据"></a>5. valueStack存储数据</h4><p>使用valueStack来存储数据时，主要是向root中存储。（一定要记住！！！！）<br><em>1.手动向valueStack存储数据<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021354_699.png" alt=""></em>2.Struts2框架自动向valueStack中存储数据<br>1.每次请求，访问action，这个对象会存储到valueStack中。<br>在DefaultActionInvocation的init方法内<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021355_242.png" alt=""></p><p>2.模型对象存储到valueStack中<br>在ModelDrivernInterceptor中<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021356_508.png" alt=""><br>以上代码会将模型对象存储到valueStack中。</p><p>==1.数据都是存储在valueStack的root区<br>2.Action中所有的成员变量都会在root区能够获得==</p><h4 id="6-ValueStack中数据的获取"><a href="#6-ValueStack中数据的获取" class="headerlink" title="6. ValueStack中数据的获取"></a>6. ValueStack中数据的获取</h4><p>1.如果是通过valueStack.push()设置的,值在jsp页面：直接操作栈的下标<br> [位置下标].top</p><p> <img src="http://p6hod2vhp.bkt.clouddn.com/201804021358_633.png" alt=""></p><p>2.Action中提供get方法的值     Jsp页面：&lt;s:property  value=”key” /&gt;<br> 3.valueStack.set(key,value)<br>     Jsp页面：<code>&lt;s:property  value=”key” /&gt;</code><br>4.采用ModelDriven的形式：<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021401_171.png" alt=""></p><h4 id="7-Struts2框架使用EL表达式获取数据"><a href="#7-Struts2框架使用EL表达式获取数据" class="headerlink" title="7. Struts2框架使用EL表达式获取数据"></a>7. Struts2框架使用EL表达式获取数据</h4><p>Struts2框架对request进行了增强，重写了getAttribute方法，如果在request域中查找不到数据，就会在valueStack中获取。</p><h4 id="8-Ognl表达式中特殊字符"><a href="#8-Ognl表达式中特殊字符" class="headerlink" title="8. Ognl表达式中特殊字符"></a>8. Ognl表达式中特殊字符</h4><ol><li><p>#号:它是从非root中获取数据<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021403_640.png" alt=""></p></li><li><p>%用于强制是否要解析ognl表达式<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021404_511.png" alt=""></p></li><li><p>$它主要是在配置文件中来获取valueStack中数据<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021404_605.png" alt=""></p></li></ol><h3 id="04-拦截器Interceptor"><a href="#04-拦截器Interceptor" class="headerlink" title="04- 拦截器Interceptor"></a>04- 拦截器Interceptor</h3><p>原理：Struts2中的interceptor它是基于aop思想，而aop思想它本质上是通过动态代理来实现<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021405_218.png" alt=""></p><h4 id="1-自定义Interceptor步骤"><a href="#1-自定义Interceptor步骤" class="headerlink" title="1.  自定义Interceptor步骤"></a>1.  自定义Interceptor步骤</h4><p>1.所有的Interceptor都要实现一个接口<br>com.opensymphony.xwork2.interceptor.Interceptor<br>2.在配置文件中声明Interceptor<br>3.在Action中应用Interceptor<br>注意:当我们显示的引入了一个自定义的Interceptor,那么默认的defaultStack就不会在导入，需要手动导入。</p><h4 id="2．Interceptor练习"><a href="#2．Interceptor练习" class="headerlink" title="2．Interceptor练习"></a>2．Interceptor练习</h4><p>1.创建一个Interceptor</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021408_215.png" alt=""></p><p>在struts.xml文件中声明，并在指定的action中引用<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021408_975.png" alt=""></p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021409_15.png" alt=""><br>完成功能<br>修改登录action中操作</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021410_684.png" alt=""></p><p>将用户存储到session中。<br>在interceptor中完成权限控制</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021410_3.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021410_957.png" alt=""></p><p>问题1:如何在login指定的视图页面上展示错误信息，例如权限不足。<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021411_584.png" alt=""></p><p>问题2:我们在struts.xml文件中配置action时，可以使用*通配置符，这时它可以处理多个方法，你指定的interceptor只想拦截某一个方法，怎样处理？<br>我们可以使用Interceptor接口的一个实现类来完成操作<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021411_923.png" alt=""><br>在配置时，就可以指定哪些方法拦截，哪些方法不拦截<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021412_744.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>svn相关</title>
      <link href="/2015/04/09/svn%E7%9B%B8%E5%85%B3/"/>
      <url>/2015/04/09/svn%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="svn上下载maven项目的一种正确方法"><a href="#svn上下载maven项目的一种正确方法" class="headerlink" title="svn上下载maven项目的一种正确方法"></a>svn上下载maven项目的一种正确方法</h2><p>  第一步：新建一个空文件夹</p><p>  第二步：在文件夹上右键点SVNcheckOut</p><p>  第三步：在Eclipse中工程栏的空白位置右键Import</p><p>  第四步：填maven-&gt;Excist Maven Project</p><p>  第五步：选中项目中的pom.xml</p><p>  第六步：完成</p><p>错误的方法：在Eclipse中工程拦的空白位置右键，svn 从svn中检出项目，选择项目的网址，找到对应的文件夹导出。</p><h2 id="svn导入项目后如何转成maven项目"><a href="#svn导入项目后如何转成maven项目" class="headerlink" title="svn导入项目后如何转成maven项目"></a>svn导入项目后如何转成maven项目</h2><p>刚从svn上导出的maven工程是个普通的文件夹，并且也没有编译。从网上找了很多办法，都没有解决问题。最后还是自己琢磨着把问题解决了。<br>1.如果导出的项目没有自动变成maven项目并且也不是普通的Java工程，网上说通过右键点击工程-&gt;Configure-&gt;convert into maven project解决。但是我按照上面试了一下，结果没有发现configure下有convert into maven project选项。如果你和我一样，不妨试下点击convert into faceted form。这时，你的工程应该变成了普通的Java工程（并且报错）。这时，再右键该工程-&gt;maven-&gt;enabled dependency management，这样，你的工程就变成了maven工程。<br>2.如果这时你的工程仍然报错，展开项目，看看项目中是不是缺少 Maven Dependencies 项，如果是这样的话，就右键项目-&gt;maven-&gt;update project Configuration，然后你再看看工程是不是不报错了。（或者右键项目-&gt;maven-&gt;disable Dependency Management-&gt;右键项目-&gt;maven-&gt;enable Dependency Management）</p><p>参考：<a href="http://chenzhou123520.iteye.com/blog/1811340" target="_blank" rel="noopener">http://chenzhou123520.iteye.com/blog/1811340</a></p><h2 id="Maven工程下使用SVN上传和下载代码"><a href="#Maven工程下使用SVN上传和下载代码" class="headerlink" title="Maven工程下使用SVN上传和下载代码"></a>Maven工程下使用SVN上传和下载代码</h2><p><a href="https://blog.csdn.net/kerwinJu/article/details/65630079" target="_blank" rel="noopener">https://blog.csdn.net/kerwinJu/article/details/65630079</a></p><p>Trunk是主干，我们都在这里进行开发，这是发布版本，必须向前开发，大版本。如果版本里有bug，就在branches里进行小版本开发，最后再向主干里合并。复制trunk的url地址用于上传，它是https协议的。</p><p>https用的端口是433。</p><p>在eclipse的每个工程里Team-&gt;shareproject-&gt;SVN-&gt;trunk的url</p><p>点完成</p><p>点yes同步</p><p>Eclipse里会跳转到同步窗口，此时代码还在本地，文件带绿色加号的都是要上传的，旁边那排按钮有上传、下载、同步等功能。</p><p>向SVN提交代码</p><p>每个人的机器配置不一样，需要忽略.settings和.project上传，一定要忽略掉再提交！</p><p>回到svn服务器上刷新一下，就看到了提交的工程</p><p>再接着上传其他目录，maven工程会有冲突，就更新一下再提交就没错了</p><p>此时又要去忽略.settings和.project每次都要这样很麻烦，可以这样做：</p><p>在eclipse的首选项中team-&gt;git-&gt;Ignored Resources-&gt;Add Pattern</p><p>添加.settings .project 和.classpath</p><p>之后提交工程，提交完了点同步一下（第一个按钮）</p><p>在提交Maven聚合工程的时候，还需要忽略target，它就相当于java工程里的bin目录，</p><p>Bin目录是不需要上传到svn的。同样可以把target添加到ignored resources里。</p><p>提交、同步完工程后，聚合工程下的子工程就不需要提交了，但是子工程上没有小桶</p><p>标记，说明没有被svn管理，右键把它们删了，但千万别勾选删了硬盘上的。只是逻辑上的删除而已，相当于删除工程的引用而已，然后再把它们引进来。</p><p>右击聚合工程import-&gt;maven-&gt;existing maven projects，就可以导入子工程了，就都有小桶标记了。</p><p>从SVN下载代码</p><p>在eclipse里删掉所有刚提交的项目</p><p>安装VisualSvn服务端报错解决和安装SVN插件具体见我的CSDN</p><p>点击JavaEE图标旁边的小方框，弹出如下选择框，选择SVN资源库研究</p><p>此时展现出来的页面就是服务端的东西，不能乱删东西，在这边删了服务端就没了</p><p>回到JavaEE界面import-&gt;svn</p><p>需要注意的是，如果选择导入一个工程，下一步检出为选第二个</p><p>如果选择多个工程就直接下一步就行了。下载下来后是没有子工程的，需要手动导入子工程，点击聚合的工程导入就行了，方法上面已经介绍。</p><p>接下来会发现下载下来的工程不是一个maven工程的目录结构，需要转成Maven工程，转的过程中按照依赖关系转，否则会出错，先转parent(configure-&gt;convert to maven project)，然后再转其他子工程。</p><h2 id="eclipse-maven-插件的安装和配置"><a href="#eclipse-maven-插件的安装和配置" class="headerlink" title="eclipse maven 插件的安装和配置"></a>eclipse maven 插件的安装和配置</h2><p><a href="https://blog.csdn.net/kevin_spa/article/details/71214189" target="_blank" rel="noopener">https://blog.csdn.net/kevin_spa/article/details/71214189</a></p><h2 id="Eclipse的SVN插件与本地svn客户端关联详解"><a href="#Eclipse的SVN插件与本地svn客户端关联详解" class="headerlink" title="Eclipse的SVN插件与本地svn客户端关联详解"></a>Eclipse的SVN插件与本地svn客户端关联详解</h2><p><a href="https://blog.csdn.net/shenxiuwen1989/article/details/52162152" target="_blank" rel="noopener">https://blog.csdn.net/shenxiuwen1989/article/details/52162152</a></p><h2 id="Eclipse-安装-SVN-插件的两种方法"><a href="#Eclipse-安装-SVN-插件的两种方法" class="headerlink" title="Eclipse 安装 SVN 插件的两种方法"></a>Eclipse 安装 SVN 插件的两种方法</h2><p><a href="https://blog.csdn.net/jieshaowang1229/article/details/51594992" target="_blank" rel="noopener">https://blog.csdn.net/jieshaowang1229/article/details/51594992</a></p><h2 id="svn-下载列表"><a href="#svn-下载列表" class="headerlink" title="svn 下载列表"></a>svn 下载列表</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javaweb第十五天笔记</title>
      <link href="/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h4><ol><li>session对象</li><li>Jsp概述</li><li>Jsp三大指令</li><li>Jsp9个内置对象</li><li>Jsp六大动作<a id="more"></a><br><br><br><br><br><br><br><br><br><h3 id="01-案例三：简单的购物车的实现：需求和session的概述"><a href="#01-案例三：简单的购物车的实现：需求和session的概述" class="headerlink" title="01-案例三：简单的购物车的实现：需求和session的概述"></a>01-案例三：简单的购物车的实现：需求和session的概述</h3></li></ol><p>Cookie与Session的区别<br>Cookie本身是有大小和个数的限制.大小一般不超过4KB, 个数的不超过20个,Session没有限制.Cookie的数据保存在客户端,Session数据保存在服务器端.Cookie被禁止了，默认session也不能使用<br>Session的执行原理：基于Cookie的JSESSIONID<br>获得Session:<code>request.getSession();/request.getSession(boolean)</code></p><h3 id="02-案例三：简单的购物车的实现：分析及前期准备"><a href="#02-案例三：简单的购物车的实现：分析及前期准备" class="headerlink" title="02-案例三：简单的购物车的实现：分析及前期准备"></a>02-案例三：简单的购物车的实现：分析及前期准备</h3><p>考虑购物车很多商品对应数量  Map&lt;商品名称,数量&gt;<br>一个Map对象模拟购物车的实现</p><h3 id="03-案例三：简单的购物车的实现：代码实现"><a href="#03-案例三：简单的购物车的实现：代码实现" class="headerlink" title="03-案例三：简单的购物车的实现：代码实现"></a>03-案例三：简单的购物车的实现：代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试从session中获得购物车：null/获得操作过的购物车对象</span></span><br><span class="line">Map&lt;String,Integer&gt;map=(Map&lt;String,Integer&gt;)request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line">    <span class="keyword">if</span>(map == <span class="keyword">null</span>)&#123;</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;String,Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断购物车中是否已经买了该商品.</span></span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(name))&#123;</span><br><span class="line">    <span class="comment">// map中已经有该商品:</span></span><br><span class="line">    <span class="comment">// * 如果购物车中已经有该商品: 获得到Map中该商品的数量+1。 存回到Map集合中.</span></span><br><span class="line">        Integer count = map.get(name);</span><br><span class="line">        count++;</span><br><span class="line">        map.put(name, count);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// map中没有该商品.// * 如果购物车中没有改商品: 将商品添加到Map集合中 数量1.</span></span><br><span class="line">        map.put(name, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04-案例三：简单的购物车的实现：总结：session作为域对象存取数据"><a href="#04-案例三：简单的购物车的实现：总结：session作为域对象存取数据" class="headerlink" title="04-案例三：简单的购物车的实现：总结：session作为域对象存取数据"></a>04-案例三：简单的购物车的实现：总结：session作为域对象存取数据</h3><p>session的创建和销毁<br>创建:服务器端第一次调用getSession()创建session.，以后调用getSession获得同一个<br>销毁:三种情况销毁session:</p><ol><li>session过期. 默认过期时间为30分钟.<br> 在Tomcat设置：所有的项目的session<br> 在某个项目中的web.xml设置：当前工程的所有session<br> 给某个session对象设置：对应的session对象<br> <code>setMaxInactiveInterval(int interval)</code></li><li>非正常关闭服务器.如果正常关闭session序列化到硬盘.</li><li>手动调用session.invalidate();</li></ol><ul><li>作用范围:多次请求.(一次会话)</li></ul><p>==Servlet中的域对象：request,session,ServletContext==<br>request:范围一次请求，转发时能够共享数据,一个请求对应一个<br>session:一次会话（包含多次请求与响应），转发与重定向都能共享,一个用户对应一个<br>ServletContext:一个项目都有效，包含多个会话<br>共同的特点：存储数据<br><code>setAttribute()/getAttribute()/removeAttribute()</code><br><code>Cookie, new Cookie(String,String)</code><br><code>session,  setAttribute(String,Object)</code></p><h3 id="05-案例三：简单的购物车的实现：总结：session保存用户的信息"><a href="#05-案例三：简单的购物车的实现：总结：session保存用户的信息" class="headerlink" title="05-案例三：简单的购物车的实现：总结：session保存用户的信息"></a>05-案例三：简单的购物车的实现：总结：session保存用户的信息</h3><p>登录的拦截：登录成功，session设置标志位<br>直接访问商品信息页面，检查session中有没有标志位</p><h3 id="06-案例四：一次性验证码的校验：需求，分析及代码实现"><a href="#06-案例四：一次性验证码的校验：需求，分析及代码实现" class="headerlink" title="06-案例四：一次性验证码的校验：需求，分析及代码实现"></a>06-案例四：一次性验证码的校验：需求，分析及代码实现</h3><p>为什么要使用验证码？避免机器识别登录<br>服务器生成4位随机数，存在session<br>页面显示，输入随机数<br>校验登录Servlet获得随机数，与session中的随机数比对<br>避免浏览器缓存：如果路径一致，读取缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"img1"</span>).src=<span class="string">"/day11/CheckImgServlet?time="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="07-案例四：一次性验证码的校验：JS控制图片切换"><a href="#07-案例四：一次性验证码的校验：JS控制图片切换" class="headerlink" title="07-案例四：一次性验证码的校验：JS控制图片切换"></a>07-案例四：一次性验证码的校验：JS控制图片切换</h3><h3 id="01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本"><a href="#01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本" class="headerlink" title="01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本"></a>01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本</h3><p>JSP：Java Server Pages（Java服务器端的页面）,被翻译成Servlet类来编译执行</p><h3 id="02-案例一：将商品信息显示到页面：JSP的注释"><a href="#02-案例一：将商品信息显示到页面：JSP的注释" class="headerlink" title="02-案例一：将商品信息显示到页面：JSP的注释"></a>02-案例一：将商品信息显示到页面：JSP的注释</h3><p>JSP的注释: <code>&lt;%-- JSP的注释 --%&gt;</code><br>HTML注释：只能注释HTML标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   </span></span><br><span class="line"><span class="comment">    &lt;c:for start=”1” end =”10”  &gt; </span></span><br><span class="line"><span class="comment">&lt;h1&gt;aaaaa&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">    &lt;/c:for&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="03-案例一：将商品信息显示到页面：JSP的page指令一"><a href="#03-案例一：将商品信息显示到页面：JSP的page指令一" class="headerlink" title="03-案例一：将商品信息显示到页面：JSP的page指令一"></a>03-案例一：将商品信息显示到页面：JSP的page指令一</h3><p>JSP中有三个指令:page指令, include指令, taglib指令.</p><h3 id="04-案例一：将商品信息显示到页面：JSP的page指令二"><a href="#04-案例一：将商品信息显示到页面：JSP的page指令二" class="headerlink" title="04-案例一：将商品信息显示到页面：JSP的page指令二"></a>04-案例一：将商品信息显示到页面：JSP的page指令二</h3><ul><li><code>contentType</code>: 设置浏览器打开这个JSP的时候采用的默认的字符集的编码. </li><li><code>pageEncoding</code>: 设置文件保存到本地硬盘,以及生成Servlet后,Servlet保存到硬盘上的编码.</li><li><code>import</code>: 在JSP中引入类对象.但是import可以出现多次.</li></ul><p>设置全局的错误友好页面：* 在web.xml中设置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="05-案例一：将商品信息显示到页面：JSP的include和taglib指令"><a href="#05-案例一：将商品信息显示到页面：JSP的include和taglib指令" class="headerlink" title="05-案例一：将商品信息显示到页面：JSP的include和taglib指令"></a>05-案例一：将商品信息显示到页面：JSP的include和taglib指令</h3><p>JSP中的include指令:指示JSP包含其他的页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"logo.jsp"</span> %&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"menu.jsp"</span> %&gt;</span><br><span class="line">&lt;h1&gt;BODY部分&lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"footer.jsp"</span> %&gt;</span><br></pre></td></tr></table></figure><p>JSP中的taglib指令:指示JSP引入标签库.<br><code>&lt;%@ taglib uri=&quot;标签的URI的路径&quot; prefix=&quot;标签的别名&quot; %&gt;</code></p><h3 id="06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象"><a href="#06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象" class="headerlink" title="06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象"></a>06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象</h3><p>==JSP的内置对象==<br>JSP的内置对象:在JSP中可以直接使用的对象.<br>JSP中有9大内置对象</p><ul><li>request</li><li>response</li><li>session</li><li>application   ServletContext</li><li>page  当前页面</li><li>pageContext</li><li>config</li><li>out    JspWriter</li><li>exception</li></ul><h3 id="07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围"><a href="#07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围" class="headerlink" title="07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围"></a>07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围</h3><p>==向JSP的四个域中存取数据==<br>JSP的四个域范围:</p><ul><li>PageScope: 当前页面中有效.<br>  <code>pageContext PageContext</code></li><li>RequestScope: 一次请求范围.<br>  <code>request HttpServletRequest</code></li><li>SessionScope: 一次会话范围.<br>  <code>session HttpSession</code></li><li>ApplicationScope: 整个应用范围<br>  <code>application ServletContext</code></li></ul><p>作用：存储数据<br><code>pageContext</code>  获得其他8个对象</p><h3 id="08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据"><a href="#08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据" class="headerlink" title="08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据"></a>08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据</h3><p><code>${ name}=======pageContext. findAttribute(“”)</code></p><h3 id="09-案例一：将商品信息显示到页面：JSP的动作标签"><a href="#09-案例一：将商品信息显示到页面：JSP的动作标签" class="headerlink" title="09-案例一：将商品信息显示到页面：JSP的动作标签"></a>09-案例一：将商品信息显示到页面：JSP的动作标签</h3><p><code>&lt;jsp:forward /&gt;</code>: 用于页面的转发,如<code>&lt;jsp:forward page=&quot;/demo1-jsp/demo3-object/demo3.jsp&quot;&gt;&lt;/jsp:forward&gt;</code><br><code>&lt;jsp:include  page=”” /&gt;</code>: 用于页面的包含(动态包含)<br>==静态包含和动态包含的区别<code>(&lt;%@ include  file=””%&gt;和&lt;jsp:include&gt;)</code>==<br>静态包含：直接将源代码拷贝到目标文件中，一起翻译成.java编译运行<br>动态包含：每个文件单独翻译成.java单独编译，将编译后运行的结果进行包含.调用一个方法将结果包含</p><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ol><li><p>Session<br> HttpSession:<br> 作用：域对象存储数据<br> <code>setAttribute()/getAttribute()</code><br> 创建：在第一次访问<code>(request.getSession())session</code><br> 销毁：默认ID存储在cookie当中，默认session随着浏览器关闭而销毁<br> 设置session生存时间，默认在tomcat中有配置  web.xml:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30min<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">配置当前工程web.xml：</span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置单个session：<code>setMaxInActiveInterval(s)</code><br> 范围：session：一次会话有效（多次请求响应）</p></li><li>JSP: Java服务器端页面<br> 注释：<code>&lt;%-- --%&gt;</code><br> 3个指令<code>(&lt;%@   page %&gt; &lt;%@   include %&gt; &lt;%@   taglib %&gt;)</code><br> 6个动作标签<code>&lt;jsp:forward&gt;/include/useBean/setProperty/getProperty/param</code><br> 9个内置对象<code>request/response/session/page/pageContext/application/out/config/exception</code><br> 4个作用域<br> <code>pageScope---------&gt;pageContext</code><br> <code>requestScope-----&gt;request</code><br> <code>sessionScope-----session</code><br> <code>applicationScope----&gt;application(ServletContext)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javaweb第十六天笔记</title>
      <link href="/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Javaweb第十六天笔记"><a href="#Javaweb第十六天笔记" class="headerlink" title="Javaweb第十六天笔记"></a>Javaweb第十六天笔记</h1><h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><h2 id="今日重点"><a href="#今日重点" class="headerlink" title="今日重点"></a>今日重点</h2><ol><li>EL表达式</li><li>JSTL标签库</li><li>MVC模式</li></ol><h3 id="01-案例一：将商品信息显示到页面：EL的概述及获取数据一"><a href="#01-案例一：将商品信息显示到页面：EL的概述及获取数据一" class="headerlink" title="01-案例一：将商品信息显示到页面：EL的概述及获取数据一"></a>01-案例一：将商品信息显示到页面：EL的概述及获取数据一</h3><p>EL的概述:Excepress Language,表达式语言<br>作用：以最简单的方式操作JSP<br>使用EL表达式语法:${ EL表达式 }<br>概括: EL 是从 JavaScript 脚本语言得到启发的一种表达式语言，它借鉴了 JavaScript 多类型转换无关性的特点。在使用 EL 从 scope 中得到参数时可以自动转换类型，因此对于类型的限制更加宽松。 Web 服务器对于 request 请求参数通常会以 String 类型来发送，在得到时使用的 Java 语言脚本就应该是<code>request.getParameter(“XXX”)</code> ，这样的话，对于实际应用还必须进行强制类型转换。而 EL 就将用户从这种类型转换的繁琐工作脱离出来，允许用户直接使用EL 表达式取得的值，而不用关心它是什么类型</p><h3 id="02-案例一：将商品信息显示到页面：EL获取数据二"><a href="#02-案例一：将商品信息显示到页面：EL获取数据二" class="headerlink" title="02-案例一：将商品信息显示到页面：EL获取数据二"></a>02-案例一：将商品信息显示到页面：EL获取数据二</h3><p>获取数据:(JSP的四个域)</p><p>获取域对象 <code>${ applicationScope.name }</code><br>访问数组元素 <code>${ arrs[下标] }</code><br>访问集合 <code>${ list[下标] }</code> <code>${ map.key的值 }</code><br>获取对象的属性 <code>${ user.id }</code><br>获取对象的集合的数据 <code>${ userList[0].id }</code><br>==<code>.</code>和<code>[]</code>的区别==<br><code>[]</code>用于有下标的数据(数组,list集合) <code>.</code>用于有属性的数据(map,对象)<br>如果属性名中包含有特殊的字符.必须使用<code>[]</code><br>如果EL表达式从四个域对象中没有取到值会返回<code>&quot;&quot;</code>, 而不是<code>null</code>, 但属性名写错会报错，如 <code>${user.naaa}</code><br>在书写表达式时，如果没有指定搜索范围，那么系统会依次调用<code>pageContext</code>、<code>request</code>、<code>session</code>、<code>application</code>的<code>getAttribute()</code>方法。这样不限定查找范围的代码不利于排错，所以这种取值的操作可以先定对象的查找范围。如：<code>${sessionScope.user.name}</code><br>一旦指定了对象所在的范围，那么只会在范围内查找绑定对象，不会在找不到的时候再去其他区域中查找了。</p><h3 id="03-案例一：将商品信息显示到页面：EL执行运算"><a href="#03-案例一：将商品信息显示到页面：EL执行运算" class="headerlink" title="03-案例一：将商品信息显示到页面：EL执行运算"></a>03-案例一：将商品信息显示到页面：EL执行运算</h3><p>执行运算:</p><ol><li>EL执行算数运算 <code>${ n1 + n2 }</code></li><li>EL执行比较运算 <code>${ n1 eq n2 }</code></li><li>EL执行关系运算 <code>and  or    not</code></li><li>EL执行三元运算 <code>${ n1 &lt; n2 ? &quot;正确&quot;:&quot;错误&quot; }</code></li><li>判断null <code>${ empty user }`</code>${ not empty user }`<br>空运算主要用于判断字符串，集合是否为空，是空或为null及找不到值时都会输出true</li></ol><h3 id="04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象"><a href="#04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象" class="headerlink" title="04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象"></a>04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象</h3><p>操作WEB开发的常用的对象:<br><code>pageScope,requestScope,sessionScope,applicationScope</code> - 获取JSP中域中的数据<br><code>param,paramValues</code> - 接收参数.<br><code>header,headerValues</code> - 获取请求头信息<br><code>initParam</code> - 获取全局初始化参数<br><code>cookie</code> - WEB开发中cookie<br><code>pageContext</code> - WEB开发中的pageContext.</p><ol><li><code>${ param.id }===request.getPamameter(“id&quot;)</code></li><li>获取Cookie中的值<code>${ cookie.history.value }</code></li><li>调用API：<code>${ pageContext.request.remoteAddr }</code> <code>${ pageContext.request.contextPath }</code></li></ol><h3 id="05-案例一：将商品信息显示到页面：JSTL的概述"><a href="#05-案例一：将商品信息显示到页面：JSTL的概述" class="headerlink" title="05-案例一：将商品信息显示到页面：JSTL的概述"></a>05-案例一：将商品信息显示到页面：JSTL的概述</h3><p>JSTL概述：Jsp  Standard  Tag  library,Sun 公司 Java 规范标准的 JSTL 由 apache组织负责维护。作为开源的标准技术，它一直在不断地完善。<br>JSTL 的发布包有两个版本： Standard-1.0 Taglib 、 Standard-1.1 Taglib ，它们在使用时是不同的。</p><p>==使用JSTL==</p><ol><li>引入JSTL的相关的jar包.</li><li>在页面中引入标签库.<code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</code></li></ol><h3 id="06-案例一：将商品信息显示到页面：JSTL的入门案例"><a href="#06-案例一：将商品信息显示到页面：JSTL的入门案例" class="headerlink" title="06-案例一：将商品信息显示到页面：JSTL的入门案例"></a>06-案例一：将商品信息显示到页面：JSTL的入门案例</h3><h3 id="07-案例一：将商品信息显示到页面：JSTL的out，set，if标签"><a href="#07-案例一：将商品信息显示到页面：JSTL的out，set，if标签" class="headerlink" title="07-案例一：将商品信息显示到页面：JSTL的out，set，if标签"></a>07-案例一：将商品信息显示到页面：JSTL的out，set，if标签</h3><p>基本语法<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span>  test=<span class="string">"$&#123;&#125;"</span>&gt;</span><br><span class="line">  ....</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure></p><p>==注意JSTL没有else==</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setName(<span class="string">"胡萝卜"</span>);</span><br><span class="line">  user.setGender(<span class="string">"f"</span>);</span><br><span class="line">  request.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">%&gt;</span><br><span class="line">姓名:$&#123;user.name&#125;&lt;br/&gt;</span><br><span class="line">性别:</span><br><span class="line">&lt;c:if test="$&#123;user.gender =='m'&#125;" var="rs" scope="request"&gt;男&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;!rs&#125;"&gt;女&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h3 id="08-案例一：将商品信息显示到页面：JSTL的forEach标签"><a href="#08-案例一：将商品信息显示到页面：JSTL的forEach标签" class="headerlink" title="08-案例一：将商品信息显示到页面：JSTL的forEach标签"></a>08-案例一：将商品信息显示到页面：JSTL的forEach标签</h3><p>forEach<br>加强<code>For: var=&quot;i&quot;   items = “{被遍历的对象}&quot;</code><br>普通<code>for: var =&quot;i&quot;  begin=&quot;开始数据&quot; end=&quot;结束数据&quot;  step=&quot;步数&quot; varstatus=&quot;&quot;</code> 统计循环的个数<br>举例:<br>其中items属性为要遍历的集合，var属性为每次取出来的一个对象，varStatus指定当前迭代的状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;序号&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;users&#125;"</span> <span class="keyword">var</span>=<span class="string">"u"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.age&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h3 id="09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库"><a href="#09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库" class="headerlink" title="09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库"></a>09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"i"</span> items=<span class="string">'$&#123; fn:split("a-b-c-d","-") &#125;'</span>&gt;</span><br><span class="line">  $&#123; i &#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h3 id="10-案例一：将商品信息显示到页面：代码实现的准备工作"><a href="#10-案例一：将商品信息显示到页面：代码实现的准备工作" class="headerlink" title="10-案例一：将商品信息显示到页面：代码实现的准备工作"></a>10-案例一：将商品信息显示到页面：代码实现的准备工作</h3><h3 id="11-案例一：将商品信息显示到页面：代码实现商品列表显示功能"><a href="#11-案例一：将商品信息显示到页面：代码实现商品列表显示功能" class="headerlink" title="11-案例一：将商品信息显示到页面：代码实现商品列表显示功能"></a>11-案例一：将商品信息显示到页面：代码实现商品列表显示功能</h3><p>JSTL&amp;EL页面代码可读性更好，信息显示简便</p><h3 id="01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式"><a href="#01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式" class="headerlink" title="01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式"></a>01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式</h3><p>MVC：Model  模型层，View视图层,Controller 控制层<br>使用Jsp做显示<br>使用Servlet控制调度<br>a. 接收参数封装数据<br>b. 调用业务层逻辑，接收返回结果<br>c. 根据结果，实现页面的跳转<br>使用JavaBean做数据封装处理</p><h3 id="02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签"><a href="#02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签" class="headerlink" title="02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签"></a>02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签</h3><h3 id="03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二"><a href="#03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二" class="headerlink" title="03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二"></a>03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二</h3><p>MVC实现登录：<br>Servlet实现控制：接收参数封装数据<br><code>Map map = request.getParameterMap()</code><br><code>BeanUtils.populate(new User(),map);//实现数据的封装</code></p><h2 id="今日总结："><a href="#今日总结：" class="headerlink" title="今日总结："></a>今日总结：</h2><ol><li>==EL表达式==<br>概念：Exepression Language,表达式语言<br>功能3个：<ul><li>获取域中的数据 <code>${pageScope.xxxx}</code></li><li>做简单运算 <code>${1+1}</code></li><li>操作其他的web对象:<br>pageScope,requestScope,sessionScope,applicationScope //获取JSP中域中的数据<br>param,paramValues //接收参数.<br>header,headerValues  //获取请求头信息<br>initParam  //获取全局初始化参数<br>cookie  //WEB开发中cookie<br>pageContext //WEB开发中的pageContext.<br><code>${param.name}</code><br><code>${cookie.cookie名称.value}</code><br><code>${pageContext.API}</code></li></ul></li><li>JSTL<br>概念：JSP Standard Tag Library,Jsp标准标签库<br>使用: 导包 –&gt; 在JSP页面引入<code>&lt;%@   taglib uri=&quot;/jsp/jstl/core&quot;   prefix=&quot;c&quot; %&gt;</code></li><li><p>标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span>   test=<span class="string">"$&#123;&#125;"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:if&gt;  // 没有else</span><br><span class="line">&lt;c:forEach   <span class="keyword">var</span>=<span class="string">"i"</span>    items=<span class="string">"$&#123;域中的集合或者数组&#125;"</span>  &gt;</span><br><span class="line">    $&#123;i&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;c:forEach   <span class="keyword">var</span>=”i”   begin=”开始”  end=”结束”   step=”自增”   varstatus=”个数” &gt;</span><br><span class="line">    $&#123;i&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></li><li><p>MVC模式<br>什么是MVC(Model  模型层  JavaBean， View 视图层  Jsp, Controller 控制层 Servlet)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Orcal数据库第一天</title>
      <link href="/2015/04/02/Oracle%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2015/04/02/Oracle%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h4 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h4><ol><li>创建表空间</li><li>创建用户以及授权</li><li>DDL与DML操作</li><li>数据库导入导出<a id="more"></a></li></ol><h3 id="01-什么是ORACLE-avi"><a href="#01-什么是ORACLE-avi" class="headerlink" title="01.什么是ORACLE.avi"></a>01.什么是ORACLE.avi</h3><p>Oracle 数据库<br>ORACLE 数据库的特点</p><ol><li>支持多用户、大事务量的事务处理</li><li>数据安全性和完整性控制</li><li>支持分布式数据处理</li><li>可移植性</li></ol><h3 id="04-ORACLE安装及体系结构讲解-avi"><a href="#04-ORACLE安装及体系结构讲解-avi" class="headerlink" title="04.ORACLE安装及体系结构讲解.avi"></a>04.ORACLE安装及体系结构讲解.avi</h3><p>ORACLE 体系结构<br><img src="http://os4z8t7lb.bkt.clouddn.com/201802052351_41.png" alt="体系结构"><br><img src="http://os4z8t7lb.bkt.clouddn.com/201802052352_10.png" alt="体系结构"></p><p>几个概念</p><ol><li>数据库实例  orcl</li><li>表空间：管理dbf文件</li><li>用户</li><li>表</li></ol><p>几个关系<br>一个实例对应多个表空间<br>一个表空间对应多个用户<br>一个表空间对应多个数据文件(.dbf/.ora)<br>一个用户对应多个表<br>一个表中的数据存储在多个数据文件中<br><img src="http://os4z8t7lb.bkt.clouddn.com/201803250049_580.png" alt="逻辑结构"></p><h3 id="05-远程连接ORACLE-avi"><a href="#05-远程连接ORACLE-avi" class="headerlink" title="05.远程连接ORACLE.avi"></a>05.远程连接ORACLE.avi</h3><p><img src="http://os4z8t7lb.bkt.clouddn.com/201803250817_859.png" alt="数据库远程连接"></p><p>使用工具<code>instantclient_12_1</code></p><h3 id="06-可视化工具安装与配置-avi"><a href="#06-可视化工具安装与配置-avi" class="headerlink" title="06.可视化工具安装与配置.avi"></a>06.可视化工具安装与配置.avi</h3><ol><li>配置PL/SQL developer</li><li>拷贝tnsnames.ora  修改IP</li><li>配置环境变量（tnsnames.ora路径，中文配置）</li></ol><p>设置中文编码<br>查看服务器端编码 <code>select userenv(&#39;language&#39;) from dual</code><br>结果为:<code>AMERICAN_AMERICA.ZHS16GBK</code><br>计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建设置变量名:<code>NLS_LANG</code><br>变量值:查到的值<code>AMERICAN_AMERICA.ZHS16GBK</code></p><blockquote><p>注意事项：安装目录不能有中文和空格，否则连接不上</p></blockquote><h3 id="07-需求分析与表结构-avi"><a href="#07-需求分析与表结构-avi" class="headerlink" title="07.需求分析与表结构.avi"></a>07.需求分析与表结构.avi</h3><p><img src="http://os4z8t7lb.bkt.clouddn.com/201802052337_94.png" alt="表结构"></p><h3 id="08-创建表空间-avi"><a href="#08-创建表空间-avi" class="headerlink" title="08.创建表空间.avi"></a>08.创建表空间.avi</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> waterboss</span><br><span class="line"><span class="keyword">datafile</span> <span class="string">'c:\waterboss.dbf'</span></span><br><span class="line"><span class="keyword">size</span> <span class="number">100</span>m</span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">next</span> <span class="number">10</span>m</span><br></pre></td></tr></table></figure><h3 id="09-创建用户与用户赋权-avi"><a href="#09-创建用户与用户赋权-avi" class="headerlink" title="09.创建用户与用户赋权.avi"></a>09.创建用户与用户赋权.avi</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> wateruser</span><br><span class="line"><span class="keyword">identified</span> <span class="keyword">by</span> itcast</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">tablespace</span> waterboss</span><br></pre></td></tr></table></figure><p>给用户设置权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> wateruser</span><br></pre></td></tr></table></figure><h3 id="10-表的创建修改与删除-avi"><a href="#10-表的创建修改与删除-avi" class="headerlink" title="10.表的创建修改与删除.avi"></a>10.表的创建修改与删除.avi</h3><p>SQL可分为:</p><ol><li>数据定义语言（DDL） : Data Definition Language<br>用于建立、修改、删除数据库对象，包括创建语句(CREATE)、修改语句(ALTER)、删除语句(DROP)，比如使用CREATE TABLE创建表，使用ALTER TABLE修改表，使用DROPTABLE删除表等动作。==这类语言不需要事务的参与，自动提交。==</li><li>数据操纵语言（DML） : Data Manipulation Language<br>用于改变数据库数据，包括INSERT、UPDATE、DELETE三条语句。其中，INSERT语句用于将数据插入到数据库中，UPDATE语句用于更新数据库中已存在的数据，DELETE用于删除数据库中已存在的数据。==DML语言和事务是相关的，执行完DML操作后必须经过事务控制语句提交后才真正的将改变应用到数据库中。==</li><li>事务控制语言（TCL）：Transaction Control Language)<br>用来维护数据一致性的语句，包括提交(COMMIT)、回滚(ROLLBACK)、保存点(SAVEPOINT)三条语句，其中COMMIT用来确认已经进行的数据库改变， ROLLBACK语句用来取消已经进行的数据库改变，当执行DML操作后(也就是上面说的增加、修改、删除等动作)，可以使用COMMIT语句来确认这种改变，或者使用ROLLBACK取消这种改变。SAVEPOINT语句用来设置保存点，使当前的事务可以回退到指定的保存点，便于取消部分改变。</li><li>数据查询语言（DQL）：Data Query Language<br>用来查询所需要的数据。使用最广泛，语法灵活复杂。</li><li>数据控制语言（DCL） : Data Control Language<br>用于执行权限的授予和收回操作、创建用户等，包括授予(GRANT)语句，收回(REVOKE)语句，CREATE USER语句，其中GRANT用于给用户或角色授予权限， REVOKE用于收回用户或角色已有的权限。==DCL语句也不需要事务的参与，是自动提交的。==</li></ol><p>数据类型<br>NUMBER表示数字类型，经常被定义成NUMBER（7，2）形式，其中：<br>    P表示数字的总位数<br>    S表示小数点后面的位数<br>CHAR表示固定长度的字符类型，经常被定义成CHAR（5）形式, N表示占用的字节数，N的最大取值是2000<br>VARCHAR2表示变长的字符类型，定义格式是VARCHAR2（10）, N表示最多可占用的字节数，最大长度是4000字节</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--表的创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">    字段名 类型(长度) primary <span class="keyword">key</span>,</span><br><span class="line">    字段名 类型(长度),</span><br><span class="line">    .......</span><br><span class="line">);</span><br><span class="line"><span class="comment">--表的修改</span></span><br><span class="line"><span class="comment">--增加字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span>(列名 <span class="number">1</span> 类型 [<span class="keyword">DEFAULT</span> 默认值]，列名 <span class="number">1</span> 类型</span><br><span class="line">[<span class="keyword">DEFAULT</span> 默认值]...)</span><br><span class="line"><span class="comment">--修改字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">MODIFY</span>(列名 <span class="number">1</span> 类型 [<span class="keyword">DEFAULT</span> 默认值]，列名 <span class="number">1</span> 类型</span><br><span class="line">[<span class="keyword">DEFAULT</span> 默认值]...)</span><br><span class="line"><span class="comment">--修改字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> 原列名 <span class="keyword">TO</span> 新列名</span><br><span class="line"><span class="comment">--删除一个字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名</span><br><span class="line"><span class="comment">--删除多个字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> (列名 <span class="number">1</span>,列名 <span class="number">2.</span>..)</span><br><span class="line"><span class="comment">--表的删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名称</span><br></pre></td></tr></table></figure><h3 id="11-数据增删改-avi"><a href="#11-数据增删改-avi" class="headerlink" title="11.数据增删改.avi"></a>11.数据增删改.avi</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span>   <span class="keyword">INTO</span> 表名[(列名 <span class="number">1</span>，列名 <span class="number">2</span>，...)]<span class="keyword">VALUES</span>(值 <span class="number">1</span>，值 <span class="number">2</span>，...)</span><br><span class="line"><span class="comment">--修改数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名 <span class="number">1</span>=值 <span class="number">1</span>，列名 <span class="number">2</span>=值 <span class="number">2</span>，....WHERE 修改条件</span><br><span class="line"><span class="comment">--删除数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 删除条件</span><br></pre></td></tr></table></figure><p>truncate 与delete区别</p><ol><li>delete 删除的数据可以 rollback</li><li>delete 删除可能产生碎片，并且不释放空间</li><li>truncate 是先摧毁表结构，再重构表结构</li></ol><p>DML（insert update,delete）需要提交事务(update/insert/delete)<br>DDL（create drop alter tuncate）不要提交事务（create/drop/alter/truncate）</p><h3 id="12-JDBC连接Oracle-搭建开发环境和编写工具类-avi"><a href="#12-JDBC连接Oracle-搭建开发环境和编写工具类-avi" class="headerlink" title="12.JDBC连接Oracle-搭建开发环境和编写工具类.avi"></a>12.JDBC连接Oracle-搭建开发环境和编写工具类.avi</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.waterboss.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基本数据访问类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取数据库连接</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.sql.<span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> java.sql.DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@192.168.80.10:1521:orcl"</span>,<span class="string">"wateruser"</span>, <span class="string">"itcast"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 关闭资源</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(java.sql.ResultSet rs, java.sql.Statement stmt,java.sql.Connection conn)</span></span>&#123;</span><br><span class="line">    <span class="comment">//关闭结果集</span></span><br><span class="line">    <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭执行对象</span></span><br><span class="line">    <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭执行对象</span></span><br><span class="line">    <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-JDBC连接Oracle-数据的增删改操作-avi"><a href="#13-JDBC连接Oracle-数据的增删改操作-avi" class="headerlink" title="13.JDBC连接Oracle-数据的增删改操作.avi"></a>13.JDBC连接Oracle-数据的增删改操作.avi</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.waterboss.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.waterboss.entity.Owners;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 业主数据访问类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OwnersDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增业主</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> owners</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Owners owners)</span></span>&#123;</span><br><span class="line">        java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        java.sql.PreparedStatement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=BaseDao.getConnection();</span><br><span class="line">            stmt=conn.prepareStatement(<span class="string">"insert into T_OWNERS</span></span><br><span class="line"><span class="string">            values(?,?,?,?,?,?,?)"</span>);</span><br><span class="line">            stmt.setLong(<span class="number">1</span>, owners.getId());</span><br><span class="line">            stmt.setString(<span class="number">2</span>, owners.getName());</span><br><span class="line">            stmt.setLong(<span class="number">3</span>, owners.getAddressid());</span><br><span class="line">            stmt.setString(<span class="number">4</span>, owners.getHousenumber());</span><br><span class="line">            stmt.setString(<span class="number">5</span>, owners.getWatermeter());</span><br><span class="line">            stmt.setDate(<span class="number">6</span>, <span class="keyword">new</span></span><br><span class="line">            java.sql.Date(owners.getAdddate().getTime()));</span><br><span class="line">            stmt.setLong(<span class="number">7</span>, owners.getOwnertypeid());</span><br><span class="line">            stmt.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeAll(<span class="keyword">null</span>, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改业主</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> owners</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Owners owners)</span></span>&#123;</span><br><span class="line">        java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        java.sql.PreparedStatement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=BaseDao.getConnection();</span><br><span class="line">            stmt=conn.prepareStatement(<span class="string">"update T_OWNERS set</span></span><br><span class="line"><span class="string">            name=?,addressid=?,housenumber=?,"</span></span><br><span class="line">            + <span class="string">"watermeter=?,adddate=?, ownertypeid=? where id=?"</span>);</span><br><span class="line">            stmt.setString(<span class="number">1</span>, owners.getName());</span><br><span class="line">            stmt.setLong(<span class="number">2</span>, owners.getAddressid());</span><br><span class="line">            stmt.setString(<span class="number">3</span>, owners.getHousenumber());</span><br><span class="line">            stmt.setString(<span class="number">4</span>, owners.getWatermeter());</span><br><span class="line">            stmt.setDate(<span class="number">5</span>, <span class="keyword">new</span></span><br><span class="line">            java.sql.Date(owners.getAdddate().getTime()));</span><br><span class="line">            stmt.setLong(<span class="number">6</span>, owners.getOwnertypeid());</span><br><span class="line">            stmt.setLong(<span class="number">7</span>, owners.getId());</span><br><span class="line">            stmt.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeAll(<span class="keyword">null</span>, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除业主</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> owners</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        java.sql.PreparedStatement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=BaseDao.getConnection();</span><br><span class="line">            stmt=conn.prepareStatement(<span class="string">"delete from T_OWNERS where id=?"</span>);</span><br><span class="line">            stmt.setLong(<span class="number">1</span>, id);</span><br><span class="line">            stmt.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeAll(<span class="keyword">null</span>, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-整库导出和导入-avi"><a href="#14-整库导出和导入-avi" class="headerlink" title="14.整库导出和导入.avi"></a>14.整库导出和导入.avi</h3><p>整库导出命令: <code>exp system/itcast full=y</code><br>指定备份文件的名称导出命令: <code>exp system/itcast file=文件名 full=y</code><br>整库导入命令: <code>imp system/itcast full=y</code><br>指定备份文件的名称导入命令: <code>imp system/itcast full=y file=water.dmp</code><br>如果不指定 <code>file</code> 参数，则默认用备份文件 <code>EXPDAT.DMP</code> 进行导入<br>如果指定 <code>file</code> 参数，则按照 <code>file</code> 指定的备份文件进行恢复</p><h3 id="15-按用户和表导入导出-avi"><a href="#15-按用户和表导入导出-avi" class="headerlink" title="15.按用户和表导入导出.avi"></a>15.按用户和表导入导出.avi</h3><p>按用户导出: <code>exp system/itcast owner=wateruser file=wateruser.dmp</code><br>按用户导入: <code>imp system/itcast   file=wateruser.dmp fromuser=wateruser</code></p><p>按表导出：<code>exp wateruser/itcast file=a.dmp tables=t_account,a_area</code><br>按表导入：<code>imp wateruser/itcast file=a.dmp tables=t_account,a_area</code></p><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ol><li>ORACLE特点及体系结构</li><li><p>创建表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> xxxx</span><br><span class="line"> <span class="keyword">datafile</span> ‘位置’</span><br><span class="line"> <span class="keyword">size</span>   <span class="number">100</span>m</span><br><span class="line"> <span class="keyword">autoextend</span>  <span class="keyword">on</span></span><br><span class="line"> <span class="keyword">next</span>   <span class="number">10</span>m</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span>  xxxxx</span><br><span class="line"> <span class="keyword">identified</span> <span class="keyword">by</span>  xxxxx</span><br><span class="line"> <span class="keyword">default</span>   <span class="keyword">tablespace</span> xxxx</span><br></pre></td></tr></table></figure></li><li><p>给用户授权<br><code>grant  dba  to xxxxx</code></p></li><li>表的创建修改删除</li><li>表数据的增删改查</li><li>JDBC操作ORACLE</li><li>数据导入导出<br><code>exp system/xxxxx   full=y  file=xxx.dmp   owner=hello tables=a,b,c</code><br><code>imp system/xxxx  full=y  file=xxx.dmp   fromuser=hello  tables=a,b,c….</code></li></ol><p>Enterprise Manager Database Control URL - (orcl) :<br><a href="http://itcast-0d2699cf.lan:1158/em" target="_blank" rel="noopener">http://itcast-0d2699cf.lan:1158/em</a></p><p>数据库配置文件已经安装到 C:\oracle\product\10.2.0,同时其他选定的安装组件也已经安装到 C:\oracle\product\10.2.0\db_1。<br>iSQL*Plus URL 为:<br><a href="http://itcast-0d2699cf.lan:5560/isqlplus" target="_blank" rel="noopener">http://itcast-0d2699cf.lan:5560/isqlplus</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> orcal </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
