<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>jQuery之二(操作)</title>
      <link href="/2019/04/29/jQuery%E4%B9%8B%E4%BA%8C/"/>
      <url>/2019/04/29/jQuery%E4%B9%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="一-jQuery操作样式-css"><a href="#一-jQuery操作样式-css" class="headerlink" title="一.jQuery操作样式(css)"></a>一.jQuery操作样式(css)</h3><p>1.设置单个样式<br><code>$(&quot;#one&quot;).css(&quot;background&quot;,&quot;gray&quot;);</code><br>2.设置多个样式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#one"</span>).css(&#123;</span><br><span class="line">    <span class="string">"background"</span>:<span class="string">"gray"</span>,</span><br><span class="line">    <span class="string">"width"</span>:<span class="string">"400px"</span>,</span><br><span class="line">    <span class="string">"height"</span>:<span class="string">"200px"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ol start="3"><li>获取样式<br><code>$(&quot;li&quot;).css(&quot;fontSize&quot;)</code></li><li>注意,jQuery在设置css样式的时候,它会隐匿迭代,比如设置字体大小为16,去使用css获取样式的时候,只会取第一个值,如图,只会返回20px的值</li><li><img src="http://video.quejifang.cn/201904232307_715.png" alt=""></li></ol><h3 id="二-jQuery操作样式-class"><a href="#二-jQuery操作样式-class" class="headerlink" title="二.jQuery操作样式(class)"></a>二.jQuery操作样式(class)</h3><p>适合给多个标签添加样式</p><ol><li>添加样式<code>addClass(name)</code><br><code>$(&quot;div&quot;).addClass(&quot;one&quot;)</code></li><li>移除样式<code>removeClass</code><br><code>$(&quot;div&quot;).removeClass(&quot;one&quot;)</code></li><li>判断是否有某个样式<code>hasClass(name)</code><br><code>$(&quot;div&quot;).hasClass(&quot;one&quot;)</code></li><li>切换样式类<br>toggleClass(name);<br><code>$(&quot;div&quot;).toggleClass(&quot;one&quot;);</code></li></ol><h3 id="三-jQuery操作属性"><a href="#三-jQuery操作属性" class="headerlink" title="三.jQuery操作属性"></a>三.jQuery操作属性</h3><p>注意: style <strong>里面的是样式,用CSS()方法操作,而标签属性里面的属性是用attr方法操作</strong></p><p>1.设置单个属性<br><code>$(&quot;img&quot;).attr(&quot;alt&quot;,&quot;图破了&quot;)</code><br>2.设置多个属性,对象形式<br><code>$(&quot;img&quot;).attr({alt:&quot;图破了&quot;,title:&quot;错错错&quot;})</code><br>3.获取属性<br><code>var a = $(&quot;img&quot;).attr(&quot;alt&quot;)</code></p><p>4.<strong>对于布尔类型的属性,不要用attr方法,应该使用prop方法</strong>比如checke,selected,desabled.使用prop方法属性没设置,就拿到false,设置了就拿到true;</p><p>5.移除属性  <code>removeAttr(name)</code><br>6.括号属性里不用加点</p><h3 id="三-jQuery操作动画"><a href="#三-jQuery操作动画" class="headerlink" title="三.jQuery操作动画"></a>三.jQuery操作动画</h3><ol><li><code>show() hide()</code>,里面可以传毫秒值,也可以传”fast”200ms,”normal”=400ms,”slow”=600ms</li><li>还可以写回调<br><code>$(&quot;div&quot;).show(1000,function(){console.log(&quot;动画执行完毕&quot;)})</code></li></ol><p>3.滑入<code>sildeup()</code>,滑出<code>sildedown()</code> 切换<code>$(&quot;div&quot;).slideToggle();</code></p><ul><li>不传参数,就是normal</li><li>也可以传回调,用show方法回调函数一样</li><li>slideToggle()逻辑是如果是滑入,就执行滑出.</li></ul><ol start="4"><li>淡入淡出(跟滑入滑出差不多)<ul><li>淡入:fadeIn()</li><li>淡出:fadeOut()</li><li>切换:<code>fadeToggle()</code></li></ul></li></ol><p>5.自定义动画<code>animate(对象,时间,动画效果,回调)</code><br><img src="http://video.quejifang.cn/201904250020_318.png" alt=""></p><p>6.stop的使用<br><img src="http://video.quejifang.cn/201904252254_479.png" alt=""></p><p>7.视频标签</p><ul><li>音频和视频,jQuery没有封闭,必须用js来操作</li><li>controls 进度条</li><li>autoplay 自动播放</li><li>loop 循环播放<br><img src="http://video.quejifang.cn/201904252325_711.png" alt=""></li></ul><h3 id="四-节点操作"><a href="#四-节点操作" class="headerlink" title="四. 节点操作"></a>四. 节点操作</h3><ul><li><code>$(&quot;div&quot;).append($(&quot;p&quot;));</code>添加到子元素后面</li><li><code>$(&quot;p&quot;).appendTo($(&quot;div&quot;))</code> 把p添加到div里,用得多的是这种</li><li><code>$(&quot;div&quot;).prepend($(&quot;p&quot;));</code>添加到子元素前面</li><li><code>$(&quot;p&quot;).prependTo($(&quot;div&quot;))</code></li><li><code>$(&quot;div&quot;).after($(&quot;p&quot;));</code>作为兄弟元素添加到后面</li><li><ul><li><code>$(&quot;div&quot;).before($(&quot;p&quot;));</code>作为兄弟元素添加到前面</li></ul></li></ul><ol><li>清空节点与删除节点</li><li>$(“div”).epmty()或者$(“div”).hmtl(“”);后面存在内存泄露</li><li>$(“div”).remove();</li></ol><h3 id="四-节点操作-克隆"><a href="#四-节点操作-克隆" class="headerlink" title="四. 节点操作(克隆)"></a>四. 节点操作(克隆)</h3><p>$(“.des”).clone(true).appendTo(“div”)<br>默认是false.默认深度复制,但是传true会复制事件.<br><img src="http://video.quejifang.cn/201904260021_928.png" alt=""></p><h3 id="五-特殊方法"><a href="#五-特殊方法" class="headerlink" title="五.特殊方法"></a>五.特殊方法</h3><h4 id="1-val方法"><a href="#1-val方法" class="headerlink" title="1. val方法"></a>1. val方法</h4><ul><li>val方法用于设置和获取表单元素的值，例如input、textarea的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">"#name"</span>).val(“张三”);</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">$(<span class="string">"#name"</span>).val();</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-html方法与text方法"><a href="#2-html方法与text方法" class="headerlink" title="2. html方法与text方法"></a>2. html方法与text方法<img src="http://video.quejifang.cn/201904262238_914.png" alt=""></h4><ul><li>html方法相当于innerHTML  text方法相当于innerText<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置内容</span></span><br><span class="line">$(“div”).html(“&lt;span&gt;这是一段内容&lt;<span class="regexp">/span&gt;”);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/获取内容</span></span><br><span class="line"><span class="regexp">$(“div”).html()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/设置内容</span></span><br><span class="line"><span class="regexp">$(“div”).text(“&lt;span&gt;这是一段内容&lt;/</span>span&gt;”);</span><br><span class="line"><span class="comment">//获取内容</span></span><br><span class="line">$(“div”).text()</span><br></pre></td></tr></table></figure></li></ul><p>区别：html方法会识别html标签，text方法会那内容直接当成字符串，并不会识别html标签。</p><h4 id="3-width方法与height方法"><a href="#3-width方法与height方法" class="headerlink" title="3. width方法与height方法"></a>3. width方法与height方法</h4><p><img src="http://video.quejifang.cn/201904262238_914.png" alt=""></p><h4 id="4-scrollTop与scrollLeft"><a href="#4-scrollTop与scrollLeft" class="headerlink" title="4. scrollTop与scrollLeft"></a>4. scrollTop与scrollLeft</h4><ul><li>设置或者获取垂直滚动条的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取页面被卷曲的高度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="comment">//获取页面被卷曲的宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft();</span><br></pre></td></tr></table></figure><p><img src="http://video.quejifang.cn/201904262241_713.png" alt=""></p><h4 id="5-offset方法与position方法"><a href="#5-offset方法与position方法" class="headerlink" title="5 offset方法与position方法"></a>5 offset方法与position方法</h4><ul><li>offset方法获取元素距离document的位置，position方法获取的是元素距离有定 位的父元素的位置。</li><li>position用得多一些</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).offset();</span><br><span class="line"><span class="comment">//获取相对于其最近的有定位的父元素的位置。</span></span><br><span class="line">$(selector).position();</span><br></pre></td></tr></table></figure><p>总结:position是只读属性,其它几个方法,给参数是设置值,不给就是获取值 </p><h3 id="六-事件注册"><a href="#六-事件注册" class="headerlink" title="六,事件注册"></a>六,事件注册</h3><ul><li><strong>简单事件注册</strong></li></ul><ol><li>click(handler)</li><li>mouseenter(handler)</li><li>mouseleave(handler)</li><li>缺点是不能同时注册多个事件</li></ol><ul><li><strong>bind方式注册</strong><br>1.第一个参数 ,事件类型<br>2.第二个参数,事件处理程序 <ol start="3"><li>缺点不支持动态事件绑定<br><code>$(&quot;p&quot;).bind(&quot;click mouseenter&quot;,function(){//事件响应方法})</code></li></ol></li><li><strong>delegate 注册委托事件</strong><br>1.第一参数,selector,要绑定事件的元素<br>2.第二个参数,事件类型<br>3.事件处理函数<br>4.缺点,只能注册委托事件.不能<img src="http://video.quejifang.cn/201904271137_83.png" alt="">注册自己的事件.<br>5.注册时,选择器是父元素,<strong>委托给父元</strong>素,下面的所有类型P元素就会多有事件了,<strong>最终还是子元素执行</strong>,其实是事件冒泡.<br><code>$(&quot;.parentBox&quot;).delegate(&quot;p&quot;,&quot;click&quot;,function(){.parentBox下面的p标签所有的绑定事件})</code><h3 id="七-事件注册-on事件-重点"><a href="#七-事件注册-on事件-重点" class="headerlink" title="七,事件注册(on事件,重点)"></a>七,事件注册(on事件,重点)</h3></li><li>on注册简单事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>on注册委托事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>,“span”, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>on注册事件的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span></span><br><span class="line"><span class="comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span></span><br><span class="line"><span class="comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span></span><br><span class="line"><span class="comment">// 第四个参数：handler，事件处理函数</span></span><br><span class="line">$(selector).on(events[,selector][,data],handler);</span><br></pre></td></tr></table></figure></li><li><p>事件执行的顺序 先执行委托的,再执行自己的,下图呜呜最后面执行</p></li><li><p>给p简单注册–&gt;给div里的p委托注册事件–&gt;给div自己注册事件.顺序是这样的<br><img src="http://video.quejifang.cn/201904271137_83.png" alt=""></p></li><li><p>off方式（推荐）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑匹配元素的所有事件</span></span><br><span class="line">$(selector).off();</span><br><span class="line"><span class="comment">// 解绑匹配元素的所有click事件</span></span><br><span class="line">$(selector).off(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure></li><li><p>触发事件</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selector).click(); <span class="comment">//触发 click事件</span></span><br><span class="line">$(selector).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure><h3 id="七-jQuery事件对象"><a href="#七-jQuery事件对象" class="headerlink" title="七. jQuery事件对象"></a>七. jQuery事件对象</h3><p>如图,先给参数data传值,然后再function里写上e,就可以在下面得到e.data,也就是传的data的值.<br><img src="http://video.quejifang.cn/201904271459_491.png" alt=""></p><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//screenX和screenY对应屏幕最左上角的值</span></span><br><span class="line"><span class="comment">//clientX和clientY距离页面左上角的位置（忽视滚动条）</span></span><br><span class="line"><span class="comment">//pageX和pageY距离页面最顶部的左上角的位置（会计算滚动条的距离）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.keyCode按下的键盘代码</span></span><br><span class="line"><span class="comment">//event.data存储绑定事件时传递的附加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.stopPropagation()阻止事件冒泡行为</span></span><br><span class="line"><span class="comment">//event.preventDefault()阻止浏览器默认行为</span></span><br><span class="line"><span class="comment">//return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span></span><br></pre></td></tr></table></figure></p><h3 id="八-jQuery补充知识点"><a href="#八-jQuery补充知识点" class="headerlink" title="八. jQuery补充知识点"></a>八. jQuery补充知识点</h3><ul><li>链式编程</li><li>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end(); <span class="comment">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span></span><br></pre></td></tr></table></figure><p>【案例：五角星评分案例.html】</p><ul><li>each方法</li><li>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</li></ul><p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数一表示当前元素在所有匹配元素中的索引号</span></span><br><span class="line"><span class="comment">// 参数二表示当前元素（DOM对象）</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p><img src="http://video.quejifang.cn/201904271614_550.png" alt=""></p><h3 id="九-jQuery补充知识点多库共存"><a href="#九-jQuery补充知识点多库共存" class="headerlink" title="九. jQuery补充知识点多库共存"></a>九. jQuery补充知识点多库共存</h3><ul><li>jQuery使用$作为标示符，但是如果与其他框架中的$冲突时，jQuery可以释放$符的控制权.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = $.noConflict();<span class="comment">//释放$的控制权,并且把$的能力给了c</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery之一(选择器)</title>
      <link href="/2019/04/23/jQurey%E4%B9%8B%E4%B8%80(%E9%80%89%E6%8B%A9%E5%99%A8)/"/>
      <url>/2019/04/23/jQurey%E4%B9%8B%E4%B8%80(%E9%80%89%E6%8B%A9%E5%99%A8)/</url>
      
        <content type="html"><![CDATA[<h3 id="一-jQuery的入口函数"><a href="#一-jQuery的入口函数" class="headerlink" title="一.jQuery的入口函数"></a>一.jQuery的入口函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="二-jQuery入口函数与js入口函数的对比"><a href="#二-jQuery入口函数与js入口函数的对比" class="headerlink" title="二.jQuery入口函数与js入口函数的对比"></a>二.jQuery入口函数与js入口函数的对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</span><br><span class="line"><span class="number">2.</span>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</span><br></pre></td></tr></table></figure><h3 id="三-jQuery对象与DOM对象的区别（重点）"><a href="#三-jQuery对象与DOM对象的区别（重点）" class="headerlink" title="三.jQuery对象与DOM对象的区别（重点）"></a>三.jQuery对象与DOM对象的区别（重点）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</span><br><span class="line"><span class="number">2.</span> jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</span><br><span class="line"><span class="number">3.</span> jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合（伪数组））</span><br><span class="line"><span class="number">4.</span> DOM对象与jQuery对象的方法不能混用。</span><br></pre></td></tr></table></figure><p>DOM对象转换成jQuery对象：【联想记忆】<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $obj = $(domObj);</span><br><span class="line"><span class="comment">// $(document).ready(function()&#123;&#125;);就是典型的DOM对象转jQuery对象</span></span><br></pre></td></tr></table></figure></p><p>jQuery对象转换成DOM对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(“li”);</span><br><span class="line"><span class="comment">//第一种方法（推荐使用）</span></span><br><span class="line">$li[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">$li.get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="四-选择器"><a href="#四-选择器" class="headerlink" title="四.选择器"></a>四.选择器</h3><ul><li><strong>基本选择器</strong><br><img src="http://video.quejifang.cn/201904222144_98.png" alt=""></li><li><strong>层级选择器</strong><br><img src="http://video.quejifang.cn/201904222145_872.png" alt=""></li><li><strong>过滤选择器</strong></li><li><code>:first :last :gt :lt</code><br><img src="http://video.quejifang.cn/201904222146_709.png" alt=""></li><li><strong>筛选选择器</strong></li></ul><p><img src="http://video.quejifang.cn/201904222149_142.png" alt=""></p><h3 id="五-案例"><a href="#五-案例" class="headerlink" title="五.案例"></a>五.案例</h3><ul><li><p>mouseenter 事件(菜单弹出)(注意children()方法使用)<br><img src="http://video.quejifang.cn/201904222224_2.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $li = $(<span class="string">".wrap&gt;ul&gt;li"</span>);</span><br><span class="line">     $li.mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).show();</span><br><span class="line">     &#125;)</span><br><span class="line">     </span><br><span class="line">     $li.mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).hide();</span><br><span class="line">     &#125;)</span><br><span class="line">      </span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=<span class="string">"javascript:void(0);"</span>&gt;一级菜单<span class="number">1</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul class="ul"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="javascript:void(0);"&gt;二级菜单11&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单12<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单13<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=<span class="string">"javascript:void(0);"</span>&gt;一级菜单<span class="number">2</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="javascript:void(0);"&gt;二级菜单21&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单22<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单23<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=<span class="string">"javascript:void(0);"</span>&gt;一级菜单<span class="number">3</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="javascript:void(0);"&gt;二级菜单31&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单32<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单33<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></li><li><p>突出亮光显示(注意mouseenter 和mouseleave 两个事件搭配使用)<br><img src="http://video.quejifang.cn/201904222226_600.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">".wrap&gt;ul&gt;li"</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"opacity"</span>, <span class="string">"1"</span>).siblings().css(<span class="string">"opacity"</span>, <span class="string">"0.4"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">".wrap"</span>).mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).find(<span class="string">"li"</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/01.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/03.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/04.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/05.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></li><li><p>手风琴案例(注意siblings()的位置)<br><img src="http://video.quejifang.cn/201904222245_304.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">      $(function () &#123;</span><br><span class="line">          //思路分析：</span><br><span class="line">          //1. 给所有的span注册点击事件，让当前span的兄弟div显示出来</span><br><span class="line">          $(&quot;.groupTitle&quot;).click(function () &#123;</span><br><span class="line">            //下一个兄弟：nextElementSibling</span><br><span class="line">            </span><br><span class="line">            //链式编程：在jQuery里面，方法可以一直调用下去。</span><br><span class="line">           $(this).next().slideDown(200).parent().siblings().children(&quot;div&quot;).slideUp(200);</span><br><span class="line">      &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul class=&quot;parentWrap&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题1&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div1&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题2&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div2&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题3&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div3&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题4&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div4&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>淘宝精品案例(注意:eq 和.eq()的区别)<br><img src="http://video.quejifang.cn/201904222318_439.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">     </span><br><span class="line">     $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="string">"#left&gt;li"</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $index = $(<span class="keyword">this</span>).index();</span><br><span class="line">     $(<span class="string">"#center&gt;li"</span>).eq($index).show().siblings().hide();</span><br><span class="line">     &#125;)</span><br><span class="line">     </span><br><span class="line">     $(<span class="string">"#right&gt;li"</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $index = $(<span class="keyword">this</span>).index()+<span class="number">9</span>;</span><br><span class="line">     $(<span class="string">"#center&gt;li:eq("</span>+$index+<span class="string">")"</span>).show().siblings().hide();</span><br><span class="line">     &#125;)    </span><br><span class="line">     &#125;)       </span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;ul id=<span class="string">"left"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>雪地靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>冬裙<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>呢大衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>毛衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>棉服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女裤<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>羽绒服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>牛仔裤<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul id="center"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&lt;a href="#"&gt;&lt;img src="./im</span>ages/女靴.jpg<span class="string">" width="</span><span class="number">200</span><span class="string">" height="</span><span class="number">250</span><span class="string">"/&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;&lt;img src="./images/雪地靴.jpg" width="200" height="250"/&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/冬裙.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/呢大衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/毛衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/棉服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/女裤.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/羽绒服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/牛仔裤.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/女包.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男靴.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/登山鞋.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/皮带.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/围巾.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/皮衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男毛衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男棉服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男包.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul id="right"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&lt;a href="#"&gt;女包&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登山鞋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>皮带<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>围巾<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>皮衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男毛衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男棉服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML</title>
      <link href="/2019/04/23/HTML/"/>
      <url>/2019/04/23/HTML/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="一-HTML属性"><a href="#一-HTML属性" class="headerlink" title="一.HTML属性"></a>一.HTML属性</h4><p>1.<code>&lt;h1 align=&quot;center&quot;&gt;</code></p><ol start="2"><li><code>&lt;body bgcolor=&quot;yellow&quot;&gt;</code></li><li><code>&lt;table border=&quot;1&quot;&gt;</code></li></ol><h4 id="二-HTML链接"><a href="#二-HTML链接" class="headerlink" title="二.HTML链接"></a>二.HTML链接</h4><p>1.创建锚的语法：<code>&lt;a href=&quot;url&quot;&gt;Text to be displayed&lt;/a&gt;</code></p><ol start="2"><li>使用 Target 属性，你可以定义被链接的文档在何处显示。下面的这行会在新窗口打开文档：<ul><li><code>&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot;&gt;Visit W3School!&lt;/a&gt;</code></li></ul><ol start="3"><li>锚标签和 Name 属性<br>Name 属性用于创建被命名的锚（named anchors）。当使用命名锚（named anchors）时，我们可以创建直接跳至页面中某个节的链接，这样使用者就无需不停的滚动页面来寻找他们需要的信息。<br><code>&lt;a name=&quot;tips&quot;&gt;Useful Tips Section&lt;/a&gt;</code><br>将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个节，就像这样<br><code>&lt;a href=&quot;http://www.w3school.com.cn/html_links.asp#tips&quot;&gt;Jump to the Useful Tips Section&lt;/a&gt;</code></li></ol></li></ol><h4 id="三-HTML框架"><a href="#三-HTML框架" class="headerlink" title="三.HTML框架"></a>三.HTML框架</h4><ol><li><strong>框架结构标签（<frameset></frameset></strong>）<br>框架结构标签（<frameset>）定义如何将窗口分割为框架 每个 frameset 定义了一系列行或列 rows/columns 的值规定了每行或每列占据屏幕的面积 </frameset></li><li>框架标签（Frame）<br>Frame 标签定义了放置在每个框架中的 HTML 文档。</li></ol><ul><li><p>在下面的这个例子中，我们设置了一个两列的框架集。第一列被设置为占据浏览器窗口的25%。第二列被设置为占据浏览器窗口的 75%。HTML 文档 “frame_a.htm” 被置于第一个列中，而 HTML 文档 “frame_b.htm” 被置于第二个列中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"25%,75%"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_a.htm"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_b.htm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基本的注意事项 - 有用的提示：<br>假如一个框架有可见边框，用户可以拖动边框来改变它的大小。为了避免这种情况发生，可以在 <code>&lt;frame&gt;</code> 标签中加入：<code>noresize=&quot;noresize&quot;</code>。</p></li><li>为不支持框架的浏览器添加 <noframes> 标签。</noframes></li><li>重要提示：不能将 <code>&lt;body&gt;&lt;/body&gt;</code> 标签与 <code>&lt;frameset&gt;&lt;/frameset&gt;</code> 标签同时使用！不过，假如你添加包含一段文本的 <code>&lt;noframes&gt;</code>标签，就必须将这段文字嵌套于 <code>&lt;body&gt;&lt;/body&gt;</code> 标签内。</li></ul><h4 id="四-Jquery事件绑定"><a href="#四-Jquery事件绑定" class="headerlink" title="四.Jquery事件绑定"></a>四.Jquery事件绑定</h4><p>Jquery中绑定事件有三种方法：以click事件为例</p><p>  （1）target.click(function(){});</p><p>  （2）target.bind(“click”,function(){});</p><p>  （3）target.live(“click”,function(){});</p><p>第一种方法很好理解，其实就和普通JS的用法差不多，只是少了一个on而已</p><p>第二、三种方法都是绑定事件，但是二者又有很大的不同，下面着重讲解一下，因为这个如果用到Jquery的框架的话是用的挺多的，尤其要注意二者的区别。</p><p>【bind和live的区别】</p><pre><code>live方法其实是bind方法的变种，其基本功能就同bind方法的功能是一样的，都是为一个元素绑定某个事件，但是bind方法只能给当前存在的元素绑定事件，对于事后采用JS等方式新生成的元素无效，而live方法则正好弥补了bind方法的这个缺陷，它可以对后生成的元素也可以绑定相应的事件。</code></pre><h4 id="四-Js弹框事件"><a href="#四-Js弹框事件" class="headerlink" title="四.Js弹框事件"></a>四.Js弹框事件</h4><ol><li>第一种alert()</li><li>第二种：confirm()方法</li></ol><ul><li>confirm()方法与alert()方法的使用十分类似，不同点是在该种对话框上除了包含一个“确认”按钮外，还有一个“取消”按钮，这种对话框称为确认对话框，在调用window对象的confirm()方法以及后面介绍的prompt()方法时也可以不写window。下面来看一个关于confirm()的小例子,代码如下所示：</li><li><code>confirm()</code>返回布尔值</li><li><code>&lt;script language=&quot;javascript&quot;&gt; //js脚本标注var con;con=confirm(&quot;你喜欢玫瑰花么?&quot;); //在页面上弹出对话框if(con==true)alert(&quot;非常喜欢!&quot;);else alert(&quot;不喜欢!&quot;);&lt;/script&gt;</code></li></ul><ol start="3"><li>prompt()方法, 提示框,<ul><li>与confirm()类似</li><li>不同的是能让用户使用键盘输入自己的信息,同时还包含确认和取消两个按钮,点确认返回用户在文本框中输入的内容, 单周取消则返回null<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"> //js脚本标注</span></span><br><span class="line"><span class="undefined">var name,age;</span></span><br><span class="line"><span class="undefined">name=prompt("请问你叫什么名字?"); /*在页面上弹出提示对话框，</span></span><br><span class="line"><span class="undefined">将用户输入的结果赋给变量name*/</span></span><br><span class="line"><span class="undefined">alert(name); //输出用户输入的信息</span></span><br><span class="line"><span class="undefined">age=prompt("你今年多大了?","请在这里输入年龄"); /*在页面上再一次弹出提示对话框，</span></span><br><span class="line"><span class="undefined">讲用户输入的信息赋给变量age*/</span></span><br><span class="line"><span class="undefined">alert(age)//输出用户输入的信息</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="五-选择器-css"><a href="#五-选择器-css" class="headerlink" title="五.选择器(css)"></a>五.选择器(css)</h4><ol><li>后代选择器 <code>ul li</code></li><li>子代选择器,可以缩小范围  h1 &gt; strong {color:red;}</li></ol><h4 id="六-伪类"><a href="#六-伪类" class="headerlink" title="六.伪类"></a>六.伪类</h4><p>伪类<br>W3C：”W3C” 列指示出该属性在哪个 CSS 版本中定义（CSS1 还是 CSS2）。</p><p>属性    描述    CSS<br>:active    向被激活的元素添加样式。    1<br>:focus    向拥有键盘输入焦点的元素添加样式。    2<br>:hover    当鼠标悬浮在元素上方时，向元素添加样式。    1<br>:link    向未被访问的链接添加样式。    1<br>:visited    向已被访问的链接添加样式。    1<br>:first-child    向元素的第一个子元素添加样式。    2<br>:lang    向带有指定 lang 属性的元素添加样式。    2</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>struts总结</title>
      <link href="/2019/04/23/struts/"/>
      <url>/2019/04/23/struts/</url>
      
        <content type="html"><![CDATA[<ol><li>核心点:<ul><li>拦截器 interceptor</li><li>Action</li><li>ognl与valueStack</li></ul></li></ol><ol start="2"><li><p>package配置</p><ul><li>name:作用:定义一个包的名称，它必须唯一。</li><li>namespace:主要是与action标签的name属性联合使用来确定一个action 的访问路径</li><li>extends属性 作用:指定继承自哪个包。一般值是strtus-default,strtus-default包是在strtus-default.xml文件中声明的。</li><li>4.abstruct属性 它代表当前包是一个抽象的，主要是用于被继承 </li></ul></li><li><p>action配置</p><ul><li>name属性 作用:主要是与package的namespace联合使用来确定一个action的访问路径</li><li>2.class属性  作用:用于指示当前的action类</li><li>3.method属性  作用:用于指示当前的action类中的哪个方法执行</li></ul></li><li><p>result配置  </p><ul><li>它主要是用于指示结果视图</li><li>name属性 作用是与action类的method方法的返回值进行匹配，来确定跳转路径</li><li>type属性 作用是用于指定跳转方式</li></ul></li><li><p>扩展</p><ul><li>关于action配置中的class与method的默认值以及result中的name与type 默认值问题</li><li>不写result,method, result的name属性默认值是success,默认的跳转方式是请求转发 dispatcher,方法是 execute.<br><img src="http://video.quejifang.cn/201904202223_907.png" alt=""></li></ul></li></ol><h3 id="二-常量配置"><a href="#二-常量配置" class="headerlink" title="二.常量配置"></a>二.常量配置</h3><ul><li>default.properties文件中定义了struts2框架常用常量 .<br>问题:我们怎样可以定义常量<br>1.可以在src下创建一个strtus.properties配置文件<br>2.可以在web.xml文件中配置<br>3.可以直接在strtus.xml文件中定义常量 (推荐)<br><img src="http://video.quejifang.cn/201904202234_159.png" alt=""></li></ul><h3 id="三-struts2的action详解"><a href="#三-struts2的action详解" class="headerlink" title="三.struts2的action详解"></a>三.struts2的action详解</h3><ol><li><p>action类创建的三种方式</p><ul><li><p><strong>创建一个pojo类</strong><br>优点:无耦合<br>缺点:所有的功能都要自己完成</p></li><li><p><strong>实现action接口com.opensymphony.xwork2.Action</strong><br>在Action接口中定义了五个常量，一个execute方法<br>五个常量:它们是默认的五个结果视图<result name="””">:<br>ERROR : 错误视图<br>INPUT: 它是struts2框架中interceptor中发现问题后会访问的一个视图<br>LOGIN:它是一个登录视图，可以在权限操作中使用<br>NONE:它代表的是null,什么都不做（也不会做跳转操作）<br>SUCCESS:这是一个成功视图<br>优点：耦合度低<br>缺点:还是需要自己来完成功能</result></p></li><li><p><strong>继承actionSupport</strong><br>com.opensymphony.xwork2.ActionSupport<br>ActionSupport类也实现了Action接口。<br>我们在开发中一般会使用这种方案:<br>优点:具有丰富的功能，例如  表单校验 错误信息设置  国际化<br>缺点:耦合度高</p></li></ul></li></ol><h3 id="四-action访问方式"><a href="#四-action访问方式" class="headerlink" title="四.action访问方式"></a>四.action访问方式</h3><ul><li>1.直接通过<action>标签来配置，通过method来指定访问的方法，如果method没有，默认访问的是execute方法。<br><img src="http://video.quejifang.cn/201904210947_621.png" alt=""></action></li><li>2.简化的action访问方式，可以使用<em>通配符来访问。<br>这种方式的缺点:不建议使用过多的</em>号，它带来程序阅读障碍，不便于理解<br>使用*来简化操作方案，它对名称规范必须进行一个统一。<br><img src="http://video.quejifang.cn/201904210948_252.png" alt=""></li></ul><h3 id="五-Struts2框架封装数据"><a href="#五-Struts2框架封装数据" class="headerlink" title="五.Struts2框架封装数据"></a>五.Struts2框架封装数据</h3><p>主要有两种方式:<br><strong>1.属性驱动</strong></p><ul><li>a.直接在action类中提供与请求参数匹配属性，提供get/set方法</li><li>b.在action类中创始一个javaBean,对其提供get/set ，在请求时页面上要进行修改，      例如 user.username  user.password ,要使用ognl表达式<br>以上两种方式的优缺点:</li><li>第一种比较简单，在实际操作我们需要将action的属性在赋值给模型(javaBean)    去操作</li><li>第二种:不需要在直接将值给javaBean过程，因为直接将数据封装到了javaBean    中。它要求在页面上必须使用ognl表达式，就存在页面不通用问题。</li></ul><p><strong>2.模型驱动</strong><br>步骤:</p><ul><li>1.让Action类要实现一个指定接口ModelDriven</li><li>2.实例化模型对象(就是要new出来javaBean)</li><li>3.重写getModel方法将实例化的模型返回。</li></ul>]]></content>
      
      
      <categories>
          
          <category> struts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>复盘定时入库项目</title>
      <link href="/2019/04/11/%E5%AE%9A%E6%97%B6%E5%85%A5%E5%BA%93/"/>
      <url>/2019/04/11/%E5%AE%9A%E6%97%B6%E5%85%A5%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="一-定义定时类QuartzMain"><a href="#一-定义定时类QuartzMain" class="headerlink" title="一. 定义定时类QuartzMain"></a>一. 定义定时类QuartzMain</h3><ol><li>定义定时器对象</li><li>定义工作对象</li><li>定义触发器</li><li>开启定时任务</li></ol><h3 id="二-编写job"><a href="#二-编写job" class="headerlink" title="二. 编写job"></a>二. 编写job</h3><ol><li>发送请求前,组装参数, 其中的beginTime需从数据库中获取.</li><li>发送post请求,获取json数据</li><li>fastjson工具接收, 并转换成实体类</li><li>得到响应回数据中的两个重要参数,订单号 和 是否有下一页<ul><li>得到订单号需要去数据库查询是否存在相同订单号</li><li>是,需要删除原来的主表记录,详细表记录</li><li>然后再插入新的记录,写三张表,主表,详细表,返现表</li><li>返现表的策略,是不删除,但会判断无重复记录,再进行添加 </li><li>否,直接进行插入操作</li></ul></li><li>第一次请求全在一个<code>do{}</code>里面</li><li>while里面是一个flag,值是has_next是否有下一下增值,当has_next为值的时候,pageNumber马上加1</li></ol><h3 id="注意的问题一"><a href="#注意的问题一" class="headerlink" title="注意的问题一"></a>注意的问题一</h3><ul><li><strong>fastjson解析</strong></li><li>格式为<br><img src="http://video.quejifang.cn/201904101705_923.png" alt=""></li><li>(orderdomain)定义实体类从最里面,list变量名一定要对应json里的数组变量名.<br><code>private List&lt;OrderitemsDomain&gt; orderitems;</code></li><li>(Alldomain)外面包装的实体类<br><code>private List&lt;OrderDomain&gt; datas;</code></li><li>整个结构是<code>Alldomain-&gt;orderdomain-&gt;orderitemsdomain</code></li><li><strong>解析代码</strong></li></ul><ol><li>最外面是{},所以先解析成jsonObject<br><code>JSONObject jsonObject = JSON.parseObject(result);</code></li><li>取list为datas里的数据,转成JSONArray<br><code>JSONArray datasArray = jsonObject.getJSONArray(&quot;datas&quot;);</code></li><li>再转成实体类的list,数据就已经转到实体类里面去了<br><code>List&lt;OrderDomain&gt; resultList = JSONObject.parseArray(datasArray.toJSONString(), OrderDomain.class);</code><br>4.如果再第一步之后,需要取一个字符串值,方法是<br><code>String has_next = jsonObject.getString(&quot;has_next&quot;);</code></li></ol><ul><li><strong>组装json注意</strong></li><li>嵌套的方式组装数据</li><li>先new map,放里面的键值</li><li>再new <code>ArrayList&lt;Map&lt;String,Object&gt;&gt;()</code></li><li>再使用list,add进map就可以了.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       JSONObject jsobj1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">       jsobj1.put(<span class="string">"timestamp"</span>, nowTime());</span><br><span class="line">       jsobj1.put(<span class="string">"sign"</span>, getSign());</span><br><span class="line">       jsobj1.put(<span class="string">"company_code"</span>, COMPANY_CODE);</span><br><span class="line">       Map&lt;String,Object&gt; orderSnMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">       orderSnMap.put(<span class="string">"order_sn"</span>,<span class="string">"20190407155156"</span>);</span><br><span class="line">       List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">       list.add(orderSnMap);</span><br><span class="line">       jsobj1.put(<span class="string">"datas"</span>, list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       String postResponse = PostService.post(jsobj1, <span class="string">"http://melcintf.5mall.com/intf/v1/order/queryOrderStatus.jhtml"</span>);</span><br><span class="line">       <span class="comment">//解析成json对象</span></span><br><span class="line">       JSONObject jsonObject = JSON.parseObject(postResponse);</span><br></pre></td></tr></table></figure></li></ul><h3 id="三-关于json转换"><a href="#三-关于json转换" class="headerlink" title="三.关于json转换"></a>三.关于json转换</h3><p>(1).创建JsonObject第一种方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"UserName"</span>, <span class="string">"kobi"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"age"</span>, <span class="string">"34"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"workIn"</span>, <span class="string">"ALI"</span>);</span><br><span class="line">        System.out.println(<span class="string">"jsonObject1："</span> + jsonObject);</span><br></pre></td></tr></table></figure></p><p>(2). 创建JsonObject第二种方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">       hashMap.put(<span class="string">"UserName"</span>, <span class="string">"ZHULI"</span>);</span><br><span class="line">       hashMap.put(<span class="string">"age"</span>, <span class="string">"30"</span>);</span><br><span class="line">       hashMap.put(<span class="string">"workIn"</span>, <span class="string">"ALI"</span>);</span><br><span class="line">       System.out.println(<span class="string">"jsonObject2："</span> + JSONObject.fromObject(hashMap));</span><br></pre></td></tr></table></figure></p><p>(3).JSONArray创建的方法,第一种<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">       jsonArray.add(<span class="number">0</span>, <span class="string">"kobi"</span>);</span><br><span class="line">       jsonArray.add(<span class="number">1</span>, <span class="string">"34"</span>);</span><br><span class="line">       jsonArray.add(<span class="number">2</span>, <span class="string">"ALI"</span>);</span><br><span class="line">       System.out.println(<span class="string">"jsonArray1："</span> + jsonArray);</span><br></pre></td></tr></table></figure></p><p>(4).创建JsonArray方法2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();</span><br><span class="line">       arrayList.add(&quot;kobi&quot;);</span><br><span class="line">       arrayList.add(&quot;34&quot;);</span><br><span class="line">       arrayList.add(&quot;ALI&quot;);</span><br><span class="line">       System.out.println(&quot;jsonArray2：&quot; + JSONArray.fromObject(arrayList))</span><br></pre></td></tr></table></figure></p><h3 id="四-fastjson-的具体使用"><a href="#四-fastjson-的具体使用" class="headerlink" title="四.fastjson 的具体使用"></a>四.fastjson 的具体使用</h3><p>(1).List 转 JSONArray<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过JSONPath获取其中数据，也可以说自己生成的List</span></span><br><span class="line">List&lt;JSONObject&gt; caseList =  JsonPath.read(resStr, <span class="string">"$.result.case"</span>);</span><br><span class="line"><span class="comment">// 转换为JSONArray</span></span><br><span class="line">JSONArray cases = JSONArray.parseArray(JSON.toJSONString(caseList));</span><br></pre></td></tr></table></figure></p><p>(2).  JSONArray 转 List<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSONArray array = <span class="keyword">new</span> JSONArray();</span><br><span class="line">List&lt;T&gt; list = JSONObject.parseArray(array.toJSONString(), T.class);</span><br></pre></td></tr></table></figure></p><p>(3). String 转 List<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">""</span>;</span><br><span class="line">List&lt;T&gt; list = JSONObject.parseArray(str, T.class);</span><br></pre></td></tr></table></figure></p><p>参考:[fastjson转换参考][1]</p><p>  1，对于JSON对象与JSON格式字符串的转换可以直接用 toJSONString()这个方法。</p><p>2，javaBean与JSON格式字符串之间的转换要用到：JSON.toJSONString(obj);</p><p>3，javaBean与json对象间的转换使用：JSON.toJSON(obj)，然后使用强制类型转换，JSONObject或者JSONArray。<br>[1]: <a href="https://www.cnblogs.com/cdf-opensource-007/p/7106018.html" target="_blank" rel="noopener">https://www.cnblogs.com/cdf-opensource-007/p/7106018.html</a></p><h3 id="五-注意的其它问题"><a href="#五-注意的其它问题" class="headerlink" title="五.注意的其它问题"></a>五.注意的其它问题</h3><p>1.jdbc访问数据库的问题</p><ul><li>在表中查询最后一条记录的sql语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> &lt;<span class="keyword">table</span>&gt; <span class="keyword">order</span> <span class="keyword">by</span> &lt;<span class="keyword">key</span>&gt;) <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> &lt;<span class="keyword">table</span>&gt; <span class="keyword">order</span> <span class="keyword">by</span> &lt;<span class="keyword">key</span>&gt; <span class="keyword">desc</span>) <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p>2.日期转换问题</p><ul><li><p>oracle 表中是日期类开的话<br><code>stmt.setTimestamp(24, getDate(orderDomain.getCreate_date()));</code></p></li><li><p>java代码转成日期类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Timestamp <span class="title">getDate</span><span class="params">(String create_date)</span> </span>&#123;</span><br><span class="line">    java.util.Date creatDate = <span class="keyword">null</span>;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        creatDate = sdf.parse(create_date);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Timestamp ts = <span class="keyword">new</span> Timestamp(creatDate.getTime());</span><br><span class="line">    <span class="keyword">return</span> ts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定时任务的job加上注解<code>@DisallowConcurrentExecution</code>,可以起到第一次任务执行完毕后,第二次定时任务再接着执行.(因为有时会是两次的定时任务启动时长小于,一次任务执行完毕的时长. )</li></ol>]]></content>
      
      
      <categories>
          
          <category> 定时入库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker使用</title>
      <link href="/2019/03/24/Docker/"/>
      <url>/2019/03/24/Docker/</url>
      
        <content type="html"><![CDATA[<h3 id="一-Docker安装"><a href="#一-Docker安装" class="headerlink" title="一.Docker安装"></a>一.Docker安装</h3><ol><li>查看centos版本,内核版本要高于3.10<code>uname -r</code></li><li>升级软件包和内核<code>yum update</code></li><li>安装docker<code>yum install docker</code></li><li>启动docker<code>systemctl start docker</code></li><li>将docker服务设为开机启动<code>systemctl enable docker</code></li><li>停止docker<code>systemctl sotp docker</code> </li></ol><h3 id="三-出现错误解决"><a href="#三-出现错误解决" class="headerlink" title="三.出现错误解决"></a>三.出现错误解决</h3><ul><li><code>Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.</code><br>1). yum remove docker<br>2). yum remove docker-selinux<br>3). vi  /etc/yum.repos.d/docker.repo<br>4). 添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure></li></ul><p>5). yum install docker-engine<br>6). service docker start<br>7). docker images<br>8). docker version</p><h3 id="四-操作命令"><a href="#四-操作命令" class="headerlink" title="四.操作命令"></a>四.操作命令</h3><ul><li>镜像操作</li><li>`<img src="http://video.quejifang.cn/201903241344_229.png" alt=""></li><li>容器操作</li><li><img src="http://video.quejifang.cn/201903241345_245.png" alt=""></li></ul><p>1、搜索镜像<br>[root@localhost ~]# docker search tomcat<br>2、拉取镜像<br>[root@localhost ~]# docker pull tomcat<br>3、根据镜像启动容器<br>docker run –name mytomcat -d tomcat:latest<br>4、docker ps<br>查看运行中的容器<br>5、 停止运行中的容器<br>docker stop  容器的id<br>6、查看所有的容器<br>docker ps -a<br>7、启动容器<br>docker start 容器id<br>8、删除一个容器<br> docker rm 容器id<br>9、启动一个做了端口映射的tomcat<br>[root@localhost ~]# docker run –name mytomcat -d -p 8888:8080 tomcat<br>-d：后台运行<br>-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</p><p>10、为了演示简单关闭了linux的防火墙<br>service firewalld status ；查看防火墙状态<br>service firewalld stop：关闭防火墙<br>11、查看容器的日志<br>docker logs container-name/container-id</p><p>更多命令参看<br><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a><br>可以参考每一个镜像的文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3）、安装MySQL示例</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>错误的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure><p>正确的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure><p>几个其他的高级操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line">把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebService</title>
      <link href="/2019/03/23/Webservice/"/>
      <url>/2019/03/23/Webservice/</url>
      
        <content type="html"><![CDATA[<h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h3><p>CXF WebService 开发，主要分为两种服务提供方式 WS 、RS<br><img src="http://video.quejifang.cn/201903231723_435.png" alt=""></p><ul><li>JAX-WS 传输数据，就是 XML 格式，基于 SOAP 协议</li><li>JAX-RS 传输数据，传输 XML 格式或者 JSON 格式，基于 HTTP 协议</li></ul><h3 id="二-JAX-RS-独立服务使用"><a href="#二-JAX-RS-独立服务使用" class="headerlink" title="二. JAX-RS 独立服务使用"></a>二. JAX-RS 独立服务使用</h3><ol><li>RestFul风格介绍<br><img src="http://video.quejifang.cn/201903231725_329.png" alt=""></li><li>Restful 风格好处 ？</li></ol><ul><li><p>基于这种风格架构，软件编写可以更简洁<br>-基于 HTTP 协议， 支持多种消息格式，比如 XML 、JSON<br>更易于实现缓存机制（第一次访问资源 缓存，第二次访问资源，返回 304 客户端调用本地）</p><p>  POST 请求方式访问 增加操作<br>  PUT 请求方式访问 修改操作<br>  GET 请求方式访问 查询操作<br>  DELETE 请求方式访问 删除操作</p></li></ul><h3 id="三-案例项目搭建"><a href="#三-案例项目搭建" class="headerlink" title="三.案例项目搭建"></a>三.案例项目搭建</h3><ul><li><p>webxml</p><ul><li>注意CXFService下的url路径,访问路径的顺序是webxml–&gt;applicationContext–&gt;类上路的路径–&gt;方法上的路径</li><li>下面xml的路径是/services/<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring配置文件位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring核心监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/services/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>ApplicationContext</p><ul><li>在这个配置里面就发布了服务</li><li>service id 是接口名</li><li>address 是访问后要加上去的地址</li><li>jaxrs:serviceBeans是实现类的全路径</li><li>下面两个是输入输出的日志信息<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:jaxrs</span>=<span class="string">"http://cxf.apache.org/jaxrs"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">address 发布服务地址 </span></span><br><span class="line"><span class="comment">servicesBeans 服务实现类 </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:server</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">address</span>=<span class="string">"/userService"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:serviceBeans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.que.service.UserServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:serviceBeans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:inInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.cxf.interceptor.LoggingInInterceptor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:inInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:outInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.cxf.interceptor.LoggingOutInterceptor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:outInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写实体类</p><ul><li>注意注解<code>@XmlRootElement(name=类名)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写服务接口类,要注意注解,接口的实现类不要写注解</p><ul><li>@Produces 生成（方法返回值） @Consumes 消费 （方法参数）</li><li>@Consumes 指定能够处理客户端传递过来数据格式</li><li>@Produces 指定能否生成哪种格式数据返回给客户端</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Produces</span>(<span class="string">"*/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PUT</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Produces</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(<span class="string">"application/xml"</span>)</span><br><span class="line"><span class="meta">@Produces</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">finUserById</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DELETE</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(<span class="string">"application/xml"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-总结注解"><a href="#四-总结注解" class="headerlink" title="四. 总结注解"></a>四. 总结注解</h3><p><img src="http://video.quejifang.cn/201903231755_991.png" alt=""></p><ul><li>@Path注解上传的ID可以使用<code>@PathParam(&quot;id&quot;)</code>来直接接收</li><li>@QueryParam(“id”)也可以接收参数(它就是HTTP的请求参数,可以通过此注解获取)</li></ul><h3 id="五-JUNIT测试的注解"><a href="#五-JUNIT测试的注解" class="headerlink" title="五. JUNIT测试的注解"></a>五. JUNIT测试的注解</h3><ul><li><code>@RunWith(springJUnit4ClassRunner.class)</code></li><li><code>@ContextConfiguration(locations=&quot;classspath:applicationContext.xml&quot;)</code></li><li>测试方法上写<code>@Test</code>注解<br><img src="http://video.quejifang.cn/201903231809_183.png" alt=""></li></ul><h3 id="六-ajax请求"><a href="#六-ajax请求" class="headerlink" title="六. ajax请求"></a>六. ajax请求</h3><p><img src="http://video.quejifang.cn/201903231931_90.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">"/abc"</span>,&#123;<span class="string">"id"</span>:id&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="七-使用webClient调用服务"><a href="#七-使用webClient调用服务" class="headerlink" title="七. 使用webClient调用服务"></a>七. 使用webClient调用服务</h3><p><img src="http://video.quejifang.cn/201903231939_318.png" alt=""></p><ul><li>WebClient.creat(路径).accept(MediaType.APPLICATION_JSON).getCollection(Customer.class)</li></ul>]]></content>
      
      
      <categories>
          
          <category> WebService </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL语句练习</title>
      <link href="/2019/03/14/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/03/14/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>按照所列表格字段和SQL查询结果，写出SQL语句<br><img src="http://video.quejifang.cn/201903242049_827.png" alt=""><br>查询结果<br><img src="http://video.quejifang.cn/201903242049_867.png" alt=""><br>根据以上查询结果，两种写法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TF.flats_num <span class="keyword">AS</span> <span class="string">"公寓编号"</span>,</span><br><span class="line"><span class="keyword">COUNT</span>(CASEWHEN TR.<span class="string">`status`</span> = <span class="number">0</span> THENTR.idEND) <span class="keyword">AS</span> <span class="string">"未出租数量"</span>,</span><br><span class="line"><span class="keyword">COUNT</span>(TR.id) <span class="keyword">AS</span> <span class="string">"该公寓所有房间数量"</span>,</span><br><span class="line">(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> TF.is_private = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'是'</span> <span class="keyword">ELSE</span> <span class="string">'否'</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">"公寓是否是自营"</span>,</span><br><span class="line"><span class="keyword">CONCAT</span>(TC.<span class="string">`name`</span>, <span class="string">'-'</span>, TC.street) <span class="keyword">AS</span> <span class="string">"小区地址"</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">t_flats TF</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_community TC <span class="keyword">ON</span> (TF.community_id = TC.id)</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_room TR <span class="keyword">ON</span> (TR.flats_id = TF.id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">TF.flats_num;</span><br></pre></td></tr></table></figure></p><p>第二种<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TF.flats_num <span class="keyword">AS</span> <span class="string">"公寓编号"</span>,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(TRM.id) <span class="keyword">FROM</span> t_room TRM <span class="keyword">WHERE</span> TRM.flats_id = TF.id <span class="keyword">AND</span> TRM.<span class="string">`status`</span> = <span class="number">0</span>) <span class="keyword">AS</span> <span class="string">"未出租数量"</span>,</span><br><span class="line"><span class="keyword">COUNT</span>(TR.id) <span class="keyword">AS</span> <span class="string">"该公寓所有房间数量"</span>,</span><br><span class="line">(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> TF.is_private = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'是'</span> <span class="keyword">ELSE</span> <span class="string">'否'</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">"公寓是否是自营"</span>,</span><br><span class="line"><span class="keyword">CONCAT</span>(TC.<span class="string">`name`</span>, <span class="string">'-'</span>, TC.street) <span class="keyword">AS</span> <span class="string">"小区地址"</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">t_flats TF</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_community TC <span class="keyword">ON</span> (TF.community_id = TC.id)</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_room TR <span class="keyword">ON</span> (TR.flats_id = TF.id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">TF.flats_num;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多线程总结</title>
      <link href="/2019/03/14/%E4%B8%80.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2019/03/14/%E4%B8%80.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一-线程安全解决办法"><a href="#一-线程安全解决办法" class="headerlink" title="一.线程安全解决办法"></a>一.线程安全解决办法</h3><ol><li>同步代码块,一般使用Object锁<code>synchronized (Object)</code>或者this锁,就是当前对象</li><li>同步方法使用this锁<code>public synchronized void sale() {</code></li><li>同步静态方法,使用锁是当前类的字节码文件<code>synchronized (ThreadTrain.class)</code></li><li>同步代码块是只能有一个线程进入该代码块，但是会有多个线程进入该方法，如果想要同一时刻只有一个线程进入方法，需要用同步方法。</li><li>一般静态变量或者静态方法,都是使用类.class作为锁. </li><li>Java中的对象锁和类锁：java的对象锁和类锁在锁的概念上基本上和内置锁是一致的，但是，两个锁实际是有很大的区别的，对象锁是用于对象实例方法，或者一个对象实例上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的对象实例可以有很多个，但是每个类只有一个class对象，所以不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁。但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。</li><li>锁是和对象相关联的，每个对象有一把锁，为了执行synchronized语句，线程必须能够获得synchronized语句中表达式指定的对象的锁，一个对象只有一把锁，被一个线程获得之后它就不再拥有这把锁，线程在执行完synchronized语句后，将获得锁交还给对象。</li><li>在方法前面加上synchronized修饰符即可以将一个方法声明为同步化方法。同步化方法在执行之前获得一个锁。如果这是一个类方法(就是静态方法)，那么获得的锁是和声明方法的类相关的Class类对象的锁。如果这是一个实例方法，那么此锁是this对象的锁。</li></ol><ul><li><p><strong>同步代码块</strong></p><ul><li>同步代码块指同一时刻只有一个线程进入同步代码块，但是多个线程可以进入方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////同步代码块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MythreadB</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tickets=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">////同步代码块，一次只允许一个线程进入该代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)</span><br><span class="line">            <span class="comment">//锁住的是当前MythreadB对象，而只有一个MythreadB对象，3个线程是通过MythreadB转换为Thread创建出来的，</span></span><br><span class="line">            <span class="comment">// 所以实现了同步，一次只能有线程卖票，一个线程卖完一张票后，隐式解锁，其他线程可以卖票</span></span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"还剩"</span> + tickets + <span class="string">"张票"</span>);</span><br><span class="line">                        tickets--;</span><br><span class="line">                        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synch</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MythreadB thread=<span class="keyword">new</span> MythreadB();</span><br><span class="line">        <span class="keyword">new</span> Thread(thread,<span class="string">"黄牛1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(thread,<span class="string">"黄牛2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(thread,<span class="string">"黄牛3"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>同步方法</strong></p><ul><li>同步方法是当方法声明上加synchronized，表示此时只有一个线程进入同步方法。锁住的该类实例化的对象。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MythreadB</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tickets=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sale();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span>  <span class="comment">//同步方法，表示同一时刻只能有一个线程进入该方法，锁住的是MythraedB对象</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"还剩"</span> + tickets + <span class="string">"张票"</span>);</span><br><span class="line">                tickets--;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="二-多线程的三大特性"><a href="#二-多线程的三大特性" class="headerlink" title="二.多线程的三大特性"></a>二.多线程的三大特性</h3><ol><li>原子性、可见性、有序性</li><li><strong>原子性</strong><ul><li>即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li><li>我们操作数据也是如此，比如i = i+1；其中就包括，读取i的值，计算i，写入i。这行代码在Java中是不具备原子性的，则多线程运行肯定会出问题，所以也需要我们使用同步和lock这些东西来确保这个特性了。<br>原子性其实就是保证数据一致、线程安全一部分，</li></ul></li><li><strong>可见性</strong><br>当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。<br>若两个线程在不同的cpu，那么线程1改变了i的值还没刷新到主存，线程2又使用了i，那么这个i值肯定还是之前的，线程1对变量的修改线程没看到这就是可见性问题。 </li><li><strong>有序性</strong><br>程序执行的顺序按照代码的先后顺序执行。<br>一般来说处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。如下：<br>int a = 10;    //语句1<br>int r = 2;    //语句2<br>a = a + 3;    //语句3<br>r = a*a;     //语句4<br>则因为重排序，他还可能执行顺序为 2-1-3-4，1-3-2-4<br>但绝不可能 2-1-4-3，因为这打破了依赖关系。<br>显然重排序对单线程运行是不会有任何问题，而多线程就不一定了，所以我们在多线程编程时就得考虑这个问题了。</li></ol><h3 id="三。Java内存模型"><a href="#三。Java内存模型" class="headerlink" title="三。Java内存模型"></a>三。Java内存模型</h3><p>共享内存模型指的就是Java内存模型(简称JMM)，JMM决定一个线程对共享变量的写入时,能对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。<br><img src="http://video.quejifang.cn/201903071958_705.png" alt=""></p><ul><li>总结：什么是Java内存模型：java内存模型简称jmm，定义了一个线程对另一个线程可见。共享变量存放在主内存中，每个线程都有自己的本地内存，当多个线程同时访问一个数据的时候，可能本地内存没有及时刷新到主内存，所以就会发生线程安全问题。</li></ul><h3 id="四。什么是Volatile"><a href="#四。什么是Volatile" class="headerlink" title="四。什么是Volatile"></a>四。什么是Volatile</h3><ul><li>Volatile 关键字的作用是变量在多个线程之间可见。</li><li>线程之间是不可见的，读取的是副本，没有及时读取到主内存结果。<br>解决办法使用Volatile关键字将解决线程之间可见性, 强制线程每次读取该值的时候都去“主内存”中取值</li><li>Volatile非原子性</li></ul><h3 id="五。AtomicInteger原子类"><a href="#五。AtomicInteger原子类" class="headerlink" title="五。AtomicInteger原子类"></a>五。AtomicInteger原子类</h3><ul><li>AtomicInteger是一个提供原子操作的Integer类，通过线程安全的方式操作加减。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileNoAtomic</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//等同于i++</span></span><br><span class="line">atomicInteger.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化10个线程</span></span><br><span class="line">VolatileNoAtomic[] volatileNoAtomic = <span class="keyword">new</span> VolatileNoAtomic[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line">volatileNoAtomic[i] = <span class="keyword">new</span> VolatileNoAtomic();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; volatileNoAtomic.length; i++) &#123;</span><br><span class="line">volatileNoAtomic[i].start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="六-volatile与synchronized区别"><a href="#六-volatile与synchronized区别" class="headerlink" title="六. volatile与synchronized区别"></a>六. volatile与synchronized区别</h3><ol><li>仅靠volatile不能保证线程的安全性。（原子性）</li><li>volatile轻量级，只能修饰变量。synchronized重量级，还可修饰方法</li><li>volatile只能保证数据的可见性，不能用来同步，因为多个线程并发访问volatile修饰的变量不会阻塞。</li><li>synchronized不仅保证可见性，而且还保证原子性，因为，只有获得了锁的线程才能进入临界区，从而保证1. 临界区中的所有语句都全部执行。多个线程争抢synchronized锁对象时，会出现阻塞。<br><strong>线程安全性</strong></li><li>线程安全性包括两个方面，①可见性。②原子性。</li><li>从上面自增的例子中可以看出：仅仅使用volatile并不能保证线程安全性。而synchronized则可实现线程的安全性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springMVC注解等总结</title>
      <link href="/2019/03/13/spring%20mvc%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/03/13/spring%20mvc%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="mvc接收参数"><a href="#mvc接收参数" class="headerlink" title="mvc接收参数"></a>mvc接收参数</h3><ol><li><p>从请求的URL中取参数出来,可以加(HttpServletRest request),就从request中取,<code>String id = request.getParmeter(&quot;id&quot;)</code></p></li><li><p>绑定简单类型,直接使用(String id),支持的简单数据类型有</p><ul><li>字符串：String</li><li>单精度：Float、float</li><li>双精度：Double、double()</li><li>布尔型：Boolean、boolean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 处理器方法：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(Model model,Integer id,Boolean status)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">请求url：</span></span><br><span class="line"><span class="function">http:<span class="comment">//localhost:8080/xxx.action?id=2&amp;status=false</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li>使用注解 <code>@RequestParam</code>常用于处理简单类型的绑定<br><code>public String editItem(@RequestParam(value=&quot;item_id&quot;,required=true) String id) {}</code></li></ol><ul><li>形参名称为id，但是这里使用value=” item_id”限定请求的参数名为item_id，所以页面传递参数的名必须为item_id。<br>注意：如果请求参数中没有item_id将抛出异常：<br>HTTP Status 500 - Required Integer parameter ‘item_id’ is not present</li><li>这里通过required=true限定item_id参数为必需传递，如果不传递则报400错误，可以使用<code>defaultvalue</code>设置默认值，即使required=true也可以不传item_id参数值</li></ul><ol start="4"><li><p>使用pojo接收表单数据</p><ul><li>如果提交的参数很多，或者提交的表单中的内容很多的时候可以使用pojo接收数据。要求pojo对象中的属性名和表单中input的name属性一致。</li><li><code>&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;</code><br><code>&lt;input type=&quot;text&quot; name=&quot;price&quot;/&gt;</code><br><img src="http://video.quejifang.cn/201903131959_17.png" alt=""></li></ul></li><li><p>包装pojo同样的道理,要有对应的实体类</p></li><li><p>自定义参数绑定</p></li></ol><ul><li>由于日期数据有很多种格式，所以springmvc没办法把字符串转换成日期类型。所以需要自定义参数绑定。前端控制器接收到请求后，找到注解形式的处理器适配器，对RequestMapping标记的方法进行适配，并对方法中的形参进行参数绑定。在springmvc这可以在处理器适配器上自定义Converter进行参数绑定。</li><li><p>自定义converter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.parse(source);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Converter</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 加载注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service=<span class="string">"conversionService"</span>/&gt;</span><br><span class="line">&lt;!-- 转换器配置 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"conversionService"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.springmvc.convert.DateConverter"</span>/&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><p>7.springmvc默认提供yyyy/MM/dd HH:mm:ss这样的格式转换</p><ol start="8"><li>直接在实体类的时间属性上指定时间的格式(此种方式比较灵活)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createtime;</span><br></pre></td></tr></table></figure></li></ol><p>9.默认支持哪些类型：<br>HttpServletRequest、response、session、Model(用于将数据填充到request域)</p><h3 id="二-高级参数绑定"><a href="#二-高级参数绑定" class="headerlink" title="二.高级参数绑定"></a>二.高级参数绑定</h3><ol><li>绑定数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(QueryVo queryVo, String[] ids)</span> </span>&#123;</span><br><span class="line">System.out.println(queryVo.getItems().getName());</span><br><span class="line">System.out.println(queryVo.getItems().getPrice());</span><br><span class="line">System.out.println(ids.toString());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>或者：<br><img src="http://video.quejifang.cn/201903132022_396.png" alt=""></p><ol start="2"><li>将表单的数据绑定到List</li></ol><ul><li>List中存放对象，并将定义的List放在包装类中，使用包装pojo对象接收。<br><img src="http://video.quejifang.cn/201903132025_503.png" alt=""><br>itemsList[0]或itemsList[1]。。，[]中是序号，从0开始。<br>itemsList[].name：name就是controller方法形参包装类型中list中pojo的属性名<br><img src="http://video.quejifang.cn/201903132027_199.png" alt=""></li></ul><ol start="3"><li><code>@RequestMapping</code></li></ol><ul><li>限定GET方法<br><code>@RequestMapping(method = RequestMethod.GET)</code></li><li>限定POST方法<br><code>@RequestMapping(method = RequestMethod.POST)</code></li><li>GET和POST都可以<br><code>@RequestMapping(method={RequestMethod.GET,RequestMethod.POST})</code></li></ul><h3 id="三-Json数据交互"><a href="#三-Json数据交互" class="headerlink" title="三.Json数据交互"></a>三.Json数据交互</h3><ol><li><code>@RequestBody</code></li></ol><ul><li>@RequestBody注解用于读取http请求的内容(字符串)，通过springmvc提供的HttpMessageConverter接口将读到的内容转换为json、xml等格式的数据并绑定到controller方法的参数上。<br>List.action?id=1&amp;name=zhangsan&amp;age=12</li></ul><ol start="2"><li><code>@ResponseBody</code></li></ol><ul><li>该注解用于将Controller的方法返回的对象，通过HttpMessageConverter接口转换为指定格式的数据如：json,xml等，通过Response响应给客户端<br>本例子应用：<br>@ResponseBody注解实现将controller方法返回对象转换为json响应给客户端</li></ul><ol start="3"><li>还要配置一个json转换器以及添加jar包<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注解适配器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"messageConverters"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>//json数据交互<br>    //@RequestBody:接收json数据并转换成pojo对象<br>    //@ResponseBody:响应json数据，把java对象转换成json并响应<br>    @RequestMapping(“/jsontest”)<br>    @ResponseBody<br>    public Items jsonTest(@RequestBody Items items) {<br>        return items;<br>    }</p></blockquote><p>页面js 方法编写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">引入 js：</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> </span><br><span class="line">src=<span class="string">"$&#123;pageContext.request.contextPath &#125;/js/jquery-1.4.4.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求json响应json</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendJson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">url:<span class="string">"$&#123;pageContext.request.contextPath &#125;/item/jsontest.action"</span>,</span><br><span class="line">data:<span class="string">'&#123;"id":1,"name":"电冰箱","price":1999.0&#125;'</span>,</span><br><span class="line">contentType:<span class="string">"application/json;charset=utf-8"</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(data.id +<span class="string">":"</span> +data.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">注意json数据的格式:data:'&#123;"id":1,"name":"电冰箱","price":1999.0&#125;',</span></span><br></pre></td></tr></table></figure></p><h3 id="四-URL模板模式映射"><a href="#四-URL模板模式映射" class="headerlink" title="四. URL模板模式映射"></a>四. URL模板模式映射</h3><p>@RequestMapping(value=”/ viewItems/{id}”)：{×××}占位符，请求的URL可以是“/viewItems/1”或“/viewItems/2”，通过在方法中使用@PathVariable获取{×××}中的×××变量。<br>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。<br>@PathVariable 映射 URL 绑定的占位符<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/viewItems/&#123;id&#125;/&#123;name&#125;"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> viewItems(<span class="meta">@PathVariable</span>(<span class="string">"id"</span>) String id,Model model) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//方法中使用@PathVariable获取useried的值，使用model传回页面</span></span><br><span class="line"><span class="comment">//调用 service查询商品信息</span></span><br><span class="line">ItemsCustom itemsCustom = itemsService.findItemsById(id);</span><br><span class="line"><span class="keyword">return</span> itemsCustom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、GET[select]  请求会向数据库发索取数据的请求，从而来获取信息,其只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容。无论进行多少次操作，结果都是一样的。<br>2、PUT[update]  请求是向服务器端发送数据的，从而改变信息，其用来修改数据的内容，但是不会增加数据的种类等，无论进行多少次PUT操作，其结果并没有不同。<br>3、POST[insert]请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源.几乎目前所有的提交操作都是用POST请求的。<br>4、DELETE[delete]请求是用来删除某一个资源的。</p><p>如果RequestMapping中表示为”/viewItems/{id}”，id和形参名称一致，@PathVariable不用指定名称。</p><h3 id="拦截器定义"><a href="#拦截器定义" class="headerlink" title="拦截器定义"></a>拦截器定义</h3><p>实现HandlerInterceptor接口，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行前调用此方法</span></span><br><span class="line"><span class="comment"> * 返回true表示继续执行，返回false中止执行</span></span><br><span class="line"><span class="comment"> * 这里可以加入登录校验、权限拦截等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Return <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后但未返回视图前调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可在返回用户前对模型数据进行加工处理，比如这里加入公用信息以便页面显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后且视图返回后调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可得到执行controller时的异常信息</span></span><br><span class="line"><span class="comment"> * 这里可记录操作日志，资源清理等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>针对某种mapping配置拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"interceptors"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor2"</span>/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor2"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>针对所有mapping配置全局拦截器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--拦截器 --&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;!--多个拦截器,顺序执行 --&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="cn.itcast.springmvc.filter.HandlerInterceptor1"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="cn.itcast.springmvc.filter.HandlerInterceptor2"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP详解</title>
      <link href="/2019/03/13/http%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/03/13/http%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一-HTTP协议详解"><a href="#一-HTTP协议详解" class="headerlink" title="一.HTTP协议详解"></a>一.HTTP协议详解</h3><ol><li>1.HTTP协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</li><li>HTTP协议作为TCP/IP模型中应用层的协议也不例外。HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS</li><li>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。</li><li>HTTP默认的端口号为80，HTTPS的端口号为443。</li><li>HTTP是一种协议，只要通信的双方都遵守这个协议，HTTP就能能信,比如浏览网页等<br><img src="http://video.quejifang.cn/201903131650_33.png" alt=""></li></ol><h3 id="二-HTTP特点"><a href="#二-HTTP特点" class="headerlink" title="二. HTTP特点"></a>二. HTTP特点</h3><ol><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li></ol><ol start="2"><li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p></li><li><p>HTTP 1.0默认是短连接,  1.1默认是长链接</p></li><li><strong>无状态：HTTP协议是无状态协议</strong>。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li><li>支持B/S及C/S模式。</li></ol><h3 id="三-HTTP之请求消息Request"><a href="#三-HTTP之请求消息Request" class="headerlink" title="三.HTTP之请求消息Request"></a>三.HTTP之请求消息Request</h3><ol><li><p>请求行、请求头、请求体三个部分组成。<br><img src="http://video.quejifang.cn/201903131700_263.png" alt=""></p></li><li><p>响应<br><img src="http://video.quejifang.cn/201903131713_464.png" alt=""></p></li><li>get,post区别<ul><li>地址栏（URI）会跟上参数数据。以？开头，多个参数之间以&amp;分割。</li><li>GET提交参数数据有限制，不超过1KB。</li><li>GET方式不适合提交敏感密码。</li><li>浏览器直接访问的请求，默认提交方式是GET方式</li></ul></li><li><p>post方式</p><ul><li>参数不会跟着URI后面。参数而是跟在请求的实体内容中。没有？开头，多个参数之间以&amp;分割。</li><li>POST提交的参数数据没有限制。</li><li>POST方式提交敏感数据。<br><img src="http://video.quejifang.cn/201903131705_28.png" alt=""></li></ul></li><li><p>常见的状态：<br>200 ：  表示请求处理完成并完美返回<br>302：   表示请求需要进一步细化。<br>304：   读取本地缓存<br>404：   表示客户访问的资源找不到。<br>500：   表示服务器的资源发送错误。（服务器内部错误）</p></li><li><p>HttpServletResponse对象</p><pre><code>HttpServletResponse对象修改响应信息：        响应行：                 response.setStatus()  设置状态码        响应头：                 response.setHeader(&quot;name&quot;,&quot;value&quot;)  设置响应头        实体内容：                response.getWriter().writer();   发送字符实体内容                response.getOutputStream().writer()  发送字节实体内容 </code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springBoot 基础总结</title>
      <link href="/2019/03/13/springBoot%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/03/13/springBoot%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一-简单工程搭建步骤"><a href="#一-简单工程搭建步骤" class="headerlink" title="一. 简单工程搭建步骤"></a>一. 简单工程搭建步骤</h3><h4 id="1-pom文件"><a href="#1-pom文件" class="headerlink" title="1. pom文件"></a>1. pom文件</h4><ul><li><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>他的父项目是下面这个,他来真正管理Spring Boot应用里面的所有依赖版本,没有在dependencies里的就要声明版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-启动器"><a href="#2-启动器" class="headerlink" title="2. 启动器"></a>2. 启动器</h4><ul><li>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-主程序类，主入口类"><a href="#3-主程序类，主入口类" class="headerlink" title="3. 主程序类，主入口类"></a>3. 主程序类，主入口类</h4><ul><li>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器</p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="images/搜狗截图20180129224104.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p><code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</code></p><p>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；以前我们需要自己配置的东西，自动配置类都帮我们；</p><h4 id="4-mave里需加入配置文件"><a href="#4-mave里需加入配置文件" class="headerlink" title="4. mave里需加入配置文件"></a>4. mave里需加入配置文件</h4><p>给maven 的settings.xml配置文件的profiles标签添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-maven-报红问题"><a href="#5-maven-报红问题" class="headerlink" title="5. maven 报红问题"></a>5. maven 报红问题</h4><ol><li><p><code>&lt;project</code>报红</p><ul><li>找到对应的maven的jar包删除</li><li>并且再更新一下<code>Reimport All maven Project</code>就可以了</li></ul></li><li><p>dependencies下面的包报红色波浪线的问题</p><ul><li>解决办法是,把对应的pom文件座标删除</li><li>在右边的lifecycle,clean一下</li><li>OK了</li></ul></li></ol><h3 id="二-yml语法"><a href="#二-yml语法" class="headerlink" title="二. yml语法"></a>二. yml语法</h3><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h4 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h4><ol><li>这个prefix里的也是小写<br><code>@Component</code><br><code>@ConfigurationProperties(prefix = &quot;person&quot;)</code></li><li>yml文件里请填写类型名字,也就是小写开头的.<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">   name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">   age:</span> <span class="number">19</span></span><br><span class="line"><span class="attr">   birth:</span> <span class="number">2019</span><span class="string">/5/3</span></span><br><span class="line"><span class="attr">   dog:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">ahuang</span></span><br><span class="line"><span class="attr">     age:</span>  <span class="number">2</span></span><br><span class="line"><span class="attr">   maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1</span> <span class="string">,</span> <span class="attr">k2:</span> <span class="string">v2&#125;</span></span><br><span class="line"><span class="attr">   lists:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">wangwu</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="三-properties配置要注意编码问题"><a href="#三-properties配置要注意编码问题" class="headerlink" title="三.properties配置要注意编码问题"></a>三.properties配置要注意编码问题</h3><p>在这里设置一下<br><img src="http://video.quejifang.cn/201903191126_857.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person.name=张三</span><br><span class="line">person.age=18</span><br><span class="line">person.birth=2018/3/3</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=v2</span><br><span class="line">person.lists=a,b,ch</span><br><span class="line">person.dog.name=阿黄</span><br><span class="line">person.dog.age=2</span><br></pre></td></tr></table></figure><h3 id="四-获取值的另一种方式"><a href="#四-获取值的另一种方式" class="headerlink" title="四.获取值的另一种方式"></a>四.获取值的另一种方式</h3><ul><li><code>@ConfigurationProperties</code>和<code>@Value</code><br><img src="http://video.quejifang.cn/201903191138_851.png" alt=""></li><li></li><li><p>@Value获取值和@ConfigurationProperties获取值比较</p></li></ul><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>总结:</strong></p><ul><li><p>配置文件yml还是properties他们都能获取到值；</p></li><li><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p></li><li><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p></li></ul><h3 id="五-三个注解学习"><a href="#五-三个注解学习" class="headerlink" title="五.三个注解学习"></a>五.三个注解学习</h3><ol><li>@PropertySource</li></ol><ul><li>@PropertySource读取外部指定的properties文件<code>@PropertySource(value={&quot;classpath:person.properties&quot;})</code></li><li>放到需要放入值的实体类上面</li></ul><ol start="2"><li>@ImportResource</li></ol><ul><li><code>@ImportResource</code>导入Spring的配置文件,让配置文件里面的内容生效</li><li>比如有一个beans.xml需成spring的组件!<br><img src="http://video.quejifang.cn/201903191210_530.png" alt=""></li><li>在主配置类上加上注解即可生效<br><img src="http://video.quejifang.cn/201903191215_579.png" alt=""><ul><li>测试方法<br><img src="http://video.quejifang.cn/201903191211_918.png" alt=""></li></ul></li></ul><ol start="3"><li>spring推荐的方式,不来编写配置文件,要给容器加组件,就用注解,写一个配置类</li></ol><ul><li>加注解<code>@Configuration</code></li><li>以前用<code>&lt;bean&gt;</code>来添加组件</li><li>现在使用注解<code>@Bean</code>来添加,容器中默认的id就是方法名</li><li><img src="http://video.quejifang.cn/201903191219_148.png" alt=""></li></ul><h3 id="六-的使用"><a href="#六-的使用" class="headerlink" title="六.${}的使用"></a>六.<code>${}</code>的使用</h3><ol><li>可以使用随机数</li><li>可以使用<code>:默认值</code> 来指定默认值<br><img src="http://video.quejifang.cn/201903191225_384.png" alt=""></li></ol><h3 id="七-Profile配置文件"><a href="#七-Profile配置文件" class="headerlink" title="七.Profile配置文件"></a>七.Profile配置文件</h3><p>1.yml支持多文档块方式,指定激活哪个文档块起作用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><p>2.Properties指定激活哪个文件<br><img src="http://video.quejifang.cn/201903191334_933.png" alt=""></p><ul><li>激活指定profile</li></ul><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev<br><img src="http://video.quejifang.cn/201903191326_994.png" alt=""></p><h3 id="八-配置文件加载位置"><a href="#八-配置文件加载位置" class="headerlink" title="八. 配置文件加载位置"></a>八. 配置文件加载位置</h3><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><ul><li><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p></li><li><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p></li></ul><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong><br>运维可以通过打包好后文件加命令参数指定配置文件生效<br><strong>spring.config.location来改变默认的配置文件位置</strong></p><p><code>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties</code></p><h3 id="九-外部配置加载顺序"><a href="#九-外部配置加载顺序" class="headerlink" title="九. 外部配置加载顺序"></a>九. 外部配置加载顺序</h3><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><ol start="12"><li>命令行加载外部的示例图片说明,文件中是一个jar包和一个properties<br><img src="http://video.quejifang.cn/201903191355_558.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL数据库优化专题之二sql语句优化</title>
      <link href="/2019/03/02/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BA%8Csql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/"/>
      <url>/2019/03/02/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BA%8Csql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一-联合索引"><a href="#一-联合索引" class="headerlink" title="一.联合索引"></a>一.联合索引</h3><p>alter table 表名 add primary key (列名);<br>创建一个联合索引<br>alter table dept add index my_ind (dname,loc); //  dname 左边的列,loc就是右边的列<br>注意:</p><ol><li>对于创建的多列索引，如果不是使用第一部分，则不会创建索引。<br>explain select * from dept where loc=’aaa’\G<br>就不会使用到索引</li><li>模糊查询在like前面有百分号开头会失效。</li><li>如果条件中有or，即使其中有条件带索引也不会使用。换言之，就是要求使用的所有字段，都必须建立索引, 我们建议大家尽量避免使用or 关键字</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来。否则不使用索引。(添加时,字符串必须’’), 也就是，如果列是字符串类型，就一定要用 ‘’ 把他包括起来.</li><li>如果mysql估计使用全表扫描要比使用索引快，则不使用索引。</li></ol><h3 id="二-查询所用使用率"><a href="#二-查询所用使用率" class="headerlink" title="二.查询所用使用率"></a>二.查询所用使用率</h3><p>show status like ‘handler_read%’;<br>大家可以注意：<br>handler_read_key:这个值越高越好，越高表示使用索引查询到的次数。<br>handler_read_rnd_next:这个值越高，说明查询低效。</p><h3 id="三-SQL优化技巧"><a href="#三-SQL优化技巧" class="headerlink" title="三.SQL优化技巧"></a>三.SQL优化技巧</h3><ol><li>使用group by 分组查询是，默认分组后，还会排序，可能会降低速度，</li><li>在group by 后面增加 order by null 就可以防止排序.explain select * from emp  group by deptno order by null;</li><li>有些情况下，可以使用连接来替代子查询。因为使用join，MySQL不需要在内存中创建临时表。<br>select <em> from dept, emp where dept.deptno=emp.deptno; [简单处理方式]<br>select </em> from dept left join emp on dept.deptno=emp.deptno;  [左外连接，更ok!]</li></ol><ol start="4"><li>对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引</li><li>应尽量避免在 where 子句中对字段进行 null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num is null</li><li>最好不要给数据库留 NULL，尽可能的使用 NOT NULL 填充数据库.</li><li>备注、描述、评论之类的可以设置为 NULL，其他的，最好不要使用 NULL。</li><li>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL 也包含在内），都是占用 100 个字符的空间的，如果是 varchar 这样的变长字段， null 不占用空间。</li><li>可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询：<br>select id from t where num = 0</li></ol><p>30种调优技巧</p><ol><li><p>’对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p></li><li><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p></li><li><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p></li></ol><p>select id from t where num is null</p><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><p>select id from t where num=0</p><ol start="4"><li>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</li></ol><p>select id from t where num=10 or num=20</p><p>可以这样查询：</p><p>select id from t where num=10</p><p>union all</p><p>select id from t where num=20</p><ol start="5"><li>下面的查询也将导致全表扫描：</li></ol><p>select id from t where name like ‘%abc%’</p><p>若要提高效率，可以考虑全文检索。</p><ol start="6"><li>in 和 not in 也要慎用，否则会导致全表扫描，如：</li></ol><p>select id from t where num in(1,2,3)</p><p>对于连续的数值，能用 between 就不要用 in 了：</p><p>select id from t where num between 1 and 3</p><ol start="7"><li>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</li></ol><p>select id from t where num=@num</p><p>可以改为强制查询使用索引：</p><p>select id from t with(index(索引名)) where num=@num</p><ol start="8"><li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li></ol><p>select id from t where num/2=100</p><p>应改为:</p><p>select id from t where num=100*2</p><ol start="9"><li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li></ol><p>select id from t where substring(name,1,3)=’abc’–name以abc开头的id</p><p>select id from t where datediff(day,createdate,’2005-11-30’)=0–’2005-11-30’生成的id</p><p>应改为:</p><p>select id from t where name like ‘abc%’</p><p>select id from t where createdate&gt;=’2005-11-30’ and createdate&lt;’2005-12-1’</p><ol start="10"><li><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p></li><li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p></li><li><p>不要写一些没有意义的查询，如需要生成一个空表结构：</p></li></ol><p>select col1,col2 into #t from t where 1=0</p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p><p>create table #t(…)</p><ol start="13"><li>很多时候用 exists 代替 in 是一个好的选择：</li></ol><p>select num from a where num in(select num from b)</p><p>用下面的语句替换：</p><p>select num from a where exists(select 1 from b where num=a.num)</p><ol start="14"><li><p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p></li><li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p></li><li><p>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p></li><li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p></li><li><p>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p></li><li><p>任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p></li><li><p>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p></li><li><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p></li><li><p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p></li><li><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p></li><li><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p></li><li><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p></li><li><p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p></li><li><p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p></li><li><p>在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p></li><li><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p></li><li><p>尽量避免大事务操作，提高系统并发能力。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL数据库优化专题之一</title>
      <link href="/2019/03/02/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BA%8C%E4%B8%80/"/>
      <url>/2019/03/02/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一-MySQL如何优化"><a href="#一-MySQL如何优化" class="headerlink" title="一.MySQL如何优化"></a>一.MySQL如何优化</h3><ol><li><p>表的设计合理化(符合3NF)</p></li><li><p>添加适当索引(index) [四种: 普通索引、主键索引、唯一索引unique、全文索引]</p></li><li><p><strong>SQL语句优化</strong></p></li><li><p>分表技术(水平分割、垂直分割)</p></li><li><p>读写分离</p></li><li><p>存储过程 [模块化编程，可以提高速度]</p></li><li><p>配置优化 [配置最大并发数my.ini, 调整缓存大小 ]</p></li><li><p>服务器硬件升级</p></li><li><p>清除不需要的数据,碎片整理(MyISAM)</p></li></ol><h3 id="二-数据库三大范式"><a href="#二-数据库三大范式" class="headerlink" title="二.数据库三大范式"></a>二.数据库三大范式</h3><ul><li>第一范式：1NF是对属性的<strong>原子性约束</strong>，要求属性<strong>(列)具有原子性</strong>，不可再分解；(只要是关系型数据库都满足1NF)</li><li>第二范式：2NF是对<strong>记录的惟一性约束</strong>，表中的记录是唯一的, 就满足2NF,通常我们<strong>设计一个主键来实现，主键不能包含业务逻辑</strong>。</li><li>第三范式：<strong>3NF是对字段冗余性的约束</strong>，它要求字段没有冗余。 没有冗余的数据库设计可以做到。<br>但是，没有冗余的数据库未必是最好的数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是： 在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。</li></ul><h3 id="三-垂直拆分"><a href="#三-垂直拆分" class="headerlink" title="三.垂直拆分"></a>三.垂直拆分</h3><ul><li>垂直分割指的是：表的记录并不多，但是字段却很长，表占用空间很大，检索表的时候需要执行大量的IO，严重降低了性能。这时需要把大的字段拆分到另一个表，并且该表与原表是一对一的关系。</li></ul><h3 id="四-水平拆分"><a href="#四-水平拆分" class="headerlink" title="四.水平拆分"></a>四.水平拆分</h3><ul><li>而水平切分就是要把一个表按照某种规则把数据划分到不同表或数据库里。<br><strong>总结</strong></li></ul><p><strong>垂直拆分：</strong><br>解决问题：</p><ol><li>表与表之间的io竞争</li><li>不解决问题：</li><li>单表中数据量增长出现的压力</li></ol><p>方案：</p><ul><li>把产品表和用户表放到一个server上</li><li>订单表单独放到一个server上</li></ul><p><strong>水平拆分：</strong><br>解决问题：</p><ol><li>单表中数据量增长出现的压力<br>不解决问题：</li><li>表与表之间的io争夺</li></ol><h3 id="五-取模方式分表"><a href="#五-取模方式分表" class="headerlink" title="五.取模方式分表"></a>五.取模方式分表</h3><ol><li>比如如何把6个数据均匀分配到3个表当中</li><li>可以拿ID为1%3=1,就分配到表1当,2%3=2,分配到表2中.3%3=0,分配到表0当中</li><li>比如在分布式当中如何确保ID唯一,可以先生成ID放在REDIS当中,再从REDIS中取ID.</li></ol><h3 id="六-SQL语句优化"><a href="#六-SQL语句优化" class="headerlink" title="六.SQL语句优化"></a>六.SQL语句优化</h3><p><strong>先要定位慢查询</strong></p><ol><li>什么是慢查询?</li></ol><ul><li>MySQL默认10秒内没有响应SQL结果,则为慢查询</li><li>可以去修改MySQL慢查询默认时间</li></ul><ol start="2"><li>如何修改慢查询<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--查询慢查询时间</span><br><span class="line">show variables like <span class="string">'long_query_time'</span>;</span><br><span class="line">--修改慢查询时间</span><br><span class="line">set long_query_time=<span class="number">1</span>; ---但是重启mysql之后，long_query_time依然是my.ini中的值</span><br></pre></td></tr></table></figure></li></ol><p>*3. 如何将慢查询定位到日志中<br>在默认情况下，我们的mysql不会记录慢查询，需要在启动mysql时候，指定记录慢查询才可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin\mysqld.exe --safe-mode  --slow-query-log [mysql5.5 可以在my.ini指定]（安全模式启动，数据库将操作写入日志，以备恢复）</span><br><span class="line">bin\mysqld.exe –log-slow-queries=d:/abc.log [低版本mysql5.0可以在my.ini指定]</span><br><span class="line">先关闭mysql,再启动, 如果启用了慢查询日志，默认把这个文件放在</span><br><span class="line">my.ini 文件中记录的位置</span><br><span class="line">#Path to the database root</span><br><span class="line">datadir=<span class="string">" C:/ProgramData/MySQL/MySQL Server 5.5/Data/"</span></span><br></pre></td></tr></table></figure></p><ol><li>MySQL explain执行计划解读</li></ol><ol><li>什么是索引</li></ol><ul><li>索引用来快速地寻找那些具有特定值的记录，所有MySQL索引都以B-树的形式保存。</li></ul><ol start="2"><li>主键索引</li></ol><ul><li>主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”</li><li>增加主键索引 alter table 表名 add primary key (列名);</li><li>删除主键索引 alter table articles drop primary key;</li></ul><ol start="3"><li>查询索引</li></ol><ul><li>desc  表名;   不能显示索引名称</li><li>show index from 表名</li><li>show keys from 表名</li></ul><ol start="4"><li>全文索引</li></ol><ul><li>在mysql中fulltext 索引只针对 myisam生效 </li><li>错误用法:<br>select <em> from articles where body like ‘%mysql%’; 错误用法 索引不会生效<br>正确用法:<br>select </em> from articles where body like ‘mysql%’; 错误用法 索引不会生效 </li></ul><ol start="5"><li>唯一索引</li></ol><ul><li>这种索引和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一。唯一性索引可以用以下几种方式创建： </li><li>创建索引，例如CREATE UNIQUE INDEX &lt;索引的名字&gt; ON tablename (列的列表)；<br>修改表，例如ALTER TABLE tablename ADD UNIQUE [索引的名字] (列的列表)；<br>创建表的时候指定索引，例如CREATE TABLE tablename ( […], UNIQUE [索引的名字] (列的列表) )；</li><li>unique字段可以为NULL,并可以有多NULL, 但是如果是具体内容，则不能重复，<br>但是不能存有重复的空字符串’’</li></ul><ol start="6"><li>数据库索引</li></ol><ul><li>是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 B 树及其变种 B+ 树。</li><li>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</li><li>为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。</li><li>B-TREE存储结构<br><img src="http://video.quejifang.cn/201903022235_514.png" alt=""></li></ul><h3 id="七-索引"><a href="#七-索引" class="headerlink" title="七.索引"></a>七.索引</h3><p>创建索引可以大大提高系统的性能。</p><ol><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li><li>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ol><p>也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？因为，增加索引也有许多不利的方面。</p><ol><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li></ol><p>索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。</p><ol><li>一般来说，应该在这些列上创建索引：在经常需要搜索的列上，可以加快搜索的速度；</li><li>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；</li><li>在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；</li><li>在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；</li><li>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；在经常使用在 WHERE 子句中的列上面创建索引，加快条件的判断速度。</li></ol><p>同样，对于有些列不应该创建索引。一般来说，不应该创建索引的的这些列具有下列特点：</p><ol><li>对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</li><li>对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</li><li>对于那些定义为 text, image 和 bit 数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</li><li>当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</li></ol><p>根据数据库的功能，可以在数据库设计器中创建三种索引：唯一索引、主键索引和聚集索引。<br>唯一索引</p><ol><li>唯一索引是不允许其中任何两行具有相同索引值的索引。<br>当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在 employee </li><li>表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。主键索引数据库表经常有一列或列组合，其值唯一标识表中的每一行。该列称为表的主键。在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。聚集索引在聚集索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。<br>如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快的数据访问速度。</li></ol><p>局部性原理与磁盘预读<br>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘 I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。程序运行期间所需要的数据通常比较集中。<br>由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高 I/O 效率。<br>预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为 4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。<br>B-/+Tree 索引的性能分析<br>到这里终于可以分析 B-/+Tree 索引的性能了。<br>上文说过一般使用磁盘 I/O 次数评价索引结构的优劣。先从 B-Tree 分析，根据 B-Tree 的定义，可知检索一次最多需要访问 h 个节点。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次 I/O 就可以完全载入。为了达到这个目的，在实际实现 B-Tree 还需要使用如下技巧：<br>每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个 node 只需一次 I/O。<br>B-Tree 中一次检索最多需要 h-1 次 I/O（根节点常驻内存），渐进复杂度为 O(h)=O(logdN)。一般实际应用中，出度 d 是非常大的数字，通常超过 100，因此 h 非常小（通常不超过 3）。<br>而红黑树这种结构，h 明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的 I/O 渐进复杂度也为 O(h)，效率明显比 B-Tree 差很多。<br>综上所述，用 B-Tree 作为索引结构效率是非常高的。<br>应该花时间学习 B-树和 B+ 树数据结构</p><p>1）B 树<br>B 树中每个节点包含了键值和键值对于的数据对象存放地址指针，所以成功搜索一个对象可以不用到达树的叶节点。<br>成功搜索包括节点内搜索和沿某一路径的搜索，成功搜索时间取决于关键码所在的层次以及节点内关键码的数量。<br>在 B 树中查找给定关键字的方法是：首先把根结点取来，在根结点所包含的关键字 K1,…,kj 查找给定的关键字（可用顺序查找或二分查找法），若找到等于给定值的关键字，则查找成功；否则，一定可以确定要查的关键字在某个 Ki 或 Ki+1 之间，于是取 Pi 所指的下一层索引节点块继续查找，直到找到，或指针 Pi 为空时查找失败。<br>2）B+ 树<br>B+ 树非叶节点中存放的关键码并不指示数据对象的地址指针，非也节点只是索引部分。所有的叶节点在同一层上，包含了全部关键码和相应数据对象的存放地址指针，且叶节点按关键码从小到大顺序链接。如果实际数据对象按加入的顺序存储而不是按关键码次数存储的话，叶节点的索引必须是稠密索引，若实际数据存储按关键码次序存放的话，叶节点索引时稀疏索引。<br>B+ 树有 2 个头指针，一个是树的根节点，一个是最小关键码的叶节点。<br>所以 B+ 树有两种搜索方法：<br>一种是按叶节点自己拉起的链表顺序搜索。<br>一种是从根节点开始搜索，和 B 树类似，不过如果非叶节点的关键码等于给定值，搜索并不停止，而是继续沿右指针，一直查到叶节点上的关键码。所以无论搜索是否成功，都将走完树的所有层。<br>B+ 树中，数据对象的插入和删除仅在叶节点上进行。<br>这两种处理索引的数据结构的不同之处：<br>a，B 树中同一键值不会出现多次，并且它有可能出现在叶结点，也有可能出现在非叶结点中。而 B+ 树的键一定会出现在叶结点中，并且有可能在非叶结点中也有可能重复出现，以维持 B+ 树的平衡。<br>b，因为 B 树键位置不定，且在整个树结构中只出现一次，虽然可以节省存储空间，但使得在插入、删除操作复杂度明显增加。B+ 树相比来说是一种较好的折中。<br>c，B 树的查询效率与键在树中的位置有关，最大时间复杂度与 B+ 树相同(在叶结点的时候)，最小时间复杂度为 1(在根结点的时候)。而 B+ 树的时候复杂度对某建成的树是固定的。可以扫描2的次方。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM总结</title>
      <link href="/2019/02/24/JVM%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/24/JVM%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="一-JVM运行时数据区"><a href="#一-JVM运行时数据区" class="headerlink" title="一.JVM运行时数据区"></a>一.JVM运行时数据区</h3><p><img src="http://video.quejifang.cn/201902140038_502.png" alt=""></p><hr><p><strong>虚拟机栈</strong></p><ul><li>作用</li></ul><ol><li>描述Java方法执行的内存模型。每个方法在执行的同时都会开辟一段内存区域用于存放方法运行时所需的数据，成为栈帧</li><li>一个栈帧包含如：<strong>局部变量表、操作栈、动态链接、方法出口</strong>等信息。</li></ol><ul><li>意义<br>JVM是基于栈的，所以每个方法从调用到执行结束，就对应着一个栈帧在虚拟机栈中入栈和出栈的整个过程。<br>存储内容 </li><li>局部变量表（编译期可知的各种基本数据类型、引用类型和指向一条字节码指令的returnAddress类型）、操作数栈、动态链接、方法出口等信息。</li><li><strong>局部变量表(八大基本数据类型,对象引用,returnAddress</strong>)<br>值得注意的是：局部变量表所需的内存空间在编译期间完成分配。在方法运行的阶段是不会改变局部变量表的大小的。</li><li>可能出现的异常<br>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。<br>如果在动态扩展内存的时候无法申请到足够的内存，就会抛出OutOfMemoryError异常。</li></ul><p><strong>本地方法栈</strong></p><ul><li>作用<br>为JVM所调用到的Nativa即本地方法服务。</li><li>可能出现的异常<br>和虚拟机栈出现的异常很相像。</li></ul><p><strong>方法区</strong></p><ul><li>作用<br>方法区是各个线程共享的内存区域, 用于存储<strong>运行时常量池、已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。</li><li>意义<br>对运行时常量池、常量、静态变量等数据做出了规定。</li><li>存储内容<br>运行时常量池（具有动态性）、已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据(JIT编译的代码)。</li><li>可能出现的异常<br>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</li></ul><hr><h3 id="二-JVM内存模型"><a href="#二-JVM内存模型" class="headerlink" title="二.JVM内存模型"></a>二.JVM内存模型</h3><p><img src="http://video.quejifang.cn/201902140100_16.png" alt=""></p><ul><li>堆是JVM内存占用最大，管理最复杂的一个区域。其唯一的用途就是存放对象实例：所有的对象实例及数组都在对上进行分配</li><li>老年代 ： 三分之二的堆空间<br>年轻代 ： 三分之一的堆空间<br>eden区： 8/10 的年轻代空间<br>survivor0 : 1/10 的年轻代空间<br>survivor1 : 1/10 的年轻代空间</li></ul><ol><li>堆分成两大块,新生代和老年代,对象产生之初在新生代,步入暮年时进入老年代,但是老年代也接纳在新生代无法容纳的超大对象</li><li>新生代 = 1个Eden区 + 2个Survivor区</li><li>大部份对象在Eden区生成,当Eden区装满的时候, 会触发YGC(Yong Garbage Collection 垃圾回收),触发后Eden区实现清除策略,没有被引用的对象则直接回收,存活的对象会被送到Survivor</li><li>Survivor有两个,会被送到哪一个呢?<ul><li>它的策略是:每次YGC的时候,它将存活的对象复制到未使用的那块空间,然后将当前使用的空间清除,交换两块空间的使用状态.</li><li>当要移送的对象大于S区容量的上限,则直接交给老年代.</li><li>假如一些没有进取心的的对象在S1和S2换来换去用什么策略防止呢?每个对象都有一个计数器,每次YGC都会加1,-XX:Max TenuringThreshold参数能配置计数器达到某个阈值的时候,对象直接从新生代晋升到老年代,默认值是15,可以在S区交换14次之的之后晋升到老年代</li></ul><ol start="5"><li>如果S区无法放下,或者超大对象的阈值超过上限,则尝试在第年代中进行分配,如果老年代也无法放下,则会触发FGC(Full Garbage Collection),还是放不下的话,则会抛出OOM(Out of Memory)</li></ol></li></ol><h3 id="三-JVM内存模型—持久代"><a href="#三-JVM内存模型—持久代" class="headerlink" title="三.JVM内存模型—持久代"></a>三.JVM内存模型—持久代</h3><p>持久代中包含了虚拟机中所有可通过<strong>反射获取到的数据，比如Class和Method对象</strong>。不同的Java虚拟机之间可能会进行类共享，因此持久代又分为只读区和读写区。</p><p>JVM用于描述应用程序中用到的类和方法的元数据也存储在持久代中。JVM运行时会用到多少持久代的空间取决于应用程序用到了多少类。除此之外，Java SE库中的类和方法也都存储在这里。</p><p>如果JVM发现有的类已经不再需要了，它会去回收（卸载）这些类，将它们的空间释放出来给其它类使用。Full GC会进行持久代的回收。</p><ul><li>JVM中类的<strong>元数据</strong>在Java堆中的存储区域。</li><li>Java类对应的HotSpot虚拟机中的<strong>内部表示</strong>也存储在这里。</li><li>类的<strong>层级信息，字段，名字</strong>。</li><li>方法的<strong>编译信息及字节码</strong>。</li><li><strong>变量</strong></li><li><strong>常量池和符号解析</strong></li><li>(所谓的元数据是指用来描述数据的数据，更通俗一点就是描述代码间关系，或者代码与其它资源（例如数据库表）之间内在联系得数据，对Struts来说就是struts-config.xml,对ejb来说就是ejb-jar.xml和厂商自定义的xml文件，对hibernate来说就是hbm文件。)</li></ul><p><strong>持久代的大小</strong></p><ul><li>它的上限是MaxPermSize，默认是64M</li><li>Java堆中的连续区域 : 如果存储在非连续的堆空间中的话，要定位出持久代到新对象的引用非常复杂并且耗时。卡表（card table），是一种记忆集（Remembered Set），它用来记录某个内存代中普通对象指针（oops）的修改。</li><li>持久代用完后，会抛出OutOfMemoryError “PermGen space”异常。解决方案：应用程序清理引用来触发类卸载；增加MaxPermSize的大小。</li><li>需要多大的持久代空间取决于类的数量，方法的大小，以及常量池的大小。</li></ul><p><strong>为什么移除持久代</strong></p><ul><li>它的大小是在启动时固定好的——很难进行调优。-XX:MaxPermSize，设置成多少好呢？</li><li>HotSpot的内部类型也是Java对象：它可能会在Full GC中被移动，同时它对应用不透明，且是非强类型的，难以跟踪调试，还需要存储元数据的元数据信息（meta-metadata）。</li><li>简化Full GC：每一个回收器有专门的元数据迭代器。</li><li>可以在GC不进行暂停的情况下并发地释放类数据。</li><li>使得原来受限于持久代的一些改进未来有可能实现</li></ul><h3 id="JVM内存模型–元空间-metaspace"><a href="#JVM内存模型–元空间-metaspace" class="headerlink" title="JVM内存模型–元空间(metaspace"></a>JVM内存模型–元空间(metaspace</h3><ul><li>持久代的空间被彻底地删除了，它被一个叫<strong>元空间</strong>的区域所替代了。持久代删除了之后，很明显，JVM会忽略PermSize和MaxPermSize这两个参数，还有就是你再也看不到java.lang.OutOfMemoryError: PermGen error的异常了。原来类的<strong>静态变量和Interned Strings</strong> 都被转移到了java堆区，<strong>只有class元数据才在元空间。JDK 8的HotSpot JVM现在使用的是本地内存来表示类的元数据，这个区域就叫做元空间</strong></li><li>持久代区别于元空间,元空间在本地内存中分配,在JDK8里,Perm区中的所有内容中字符串常量移至堆内存,其它内容(包括类远元信息,字段,静态属性,方法,常量等移至元空间内,)</li></ul><p><strong>元空间的特点：</strong></p><ul><li>充分利用了Java语言规范中的好处：<strong>类及相关的元数据的生命周期与类加载器的一致</strong>。</li><li>每个加载器有专门的存储空间</li><li>只进行线性分配</li><li>不会单独回收某个类</li><li>省掉了GC扫描及压缩的时间</li><li>元空间里的对象的位置是固定的</li><li>如果GC发现某个类加载器不再存活了，会把相关的空间整个回收掉</li></ul><p><strong>元空间的内存分配模型</strong></p><ul><li>绝大多数的类元数据的空间都从本地内存中分配</li><li>用来描述类元数据的类也被删除了</li><li>为元数据分配了多个虚拟内存空间</li><li>给每个类加载器分配一个内存块的列表。块的大小取决于类加载器的类型;</li><li><code>sun</code>/反射/代理对应的类加载器的块会小一些</li><li>归还内存块，释放内存块列表</li><li>一旦元空间的数据被清空了，虚拟内存的空间会被回收掉</li><li>减少碎片的策略</li></ul><p><strong>元空间的调优</strong></p><ul><li>使用-XX:MaxMetaspaceSize参数可以设置元空间的最大值，默认是没有上限的，也就是说你的系统内存上限是多少它就是多少。</li><li><code>-XX:MetaspaceSize</code>选项指定的是元空间的初始大小，如果没有指定的话，元空间会根据应用程序运行时的需要动态地调整大小。</li></ul><p><a href="https://blog.csdn.net/u011464536/article/details/78235438" target="_blank" rel="noopener">参考网站 </a></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis标签总结</title>
      <link href="/2019/02/16/Mybatis%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/02/16/Mybatis%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-foreach标签"><a href="#1-foreach标签" class="headerlink" title="1.foreach标签"></a>1.foreach标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　&lt;delete id=<span class="string">"deleteBatch"</span>&gt; </span><br><span class="line"></span><br><span class="line">　　　　delete from user where id in</span><br><span class="line"></span><br><span class="line">　　　　&lt;foreach collection=<span class="string">"array"</span> item=<span class="string">"id"</span> index=<span class="string">"index"</span> open=<span class="string">"("</span> close=<span class="string">")"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line"></span><br><span class="line">　　　　　　#&#123;id&#125;</span><br><span class="line"></span><br><span class="line">　　　　&lt;/foreach&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>　　我们假如说参数为—-  int[] ids = {1,2,3,4,5}  —-那么打印之后的SQL如下：</p><p>　　delete form user where id in (1,2,3,4,5)</p><p>　　释义：</p><p>　　　　collection ：collection属性的值有三个分别是list、array、map三种，分别对应的参数类型为：List、数组、map集合，我在上面传的参数为数组，所以值为array</p><p>　　　　item ： 表示在迭代过程中每一个元素的别名</p><p>　　　　index ：表示在迭代过程中每次迭代到的位置（下标）</p><p>　　　　open ：前缀</p><p>　　　　close ：后缀</p><p>　　　　separator ：分隔符，表示迭代时每个元素之间以什么分隔</p><p>我们通常可以将之用到批量删除、添加等操作中。</p><h3 id="2-mybatis动态sql中的trim标签的使用"><a href="#2-mybatis动态sql中的trim标签的使用" class="headerlink" title="2. mybatis动态sql中的trim标签的使用"></a>2. mybatis动态sql中的trim标签的使用</h3><ul><li>trim标记是一个格式化的标记，可以完成set或者是where标记的功能，如下代码：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　　select * from user </span><br><span class="line"></span><br><span class="line">　　&lt;trim prefix=<span class="string">"WHERE"</span> prefixoverride=<span class="string">"AND |OR"</span>&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;if test="name != null and name.length()&gt;0"&gt; AND name=#&#123;name&#125;&lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;if test="gender != null and gender.length()&gt;0"&gt; AND gender=#&#123;gender&#125;&lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;/trim&gt;</span><br></pre></td></tr></table></figure></li></ul><p>　　假如说name和gender的值都不为null的话打印的SQL为：select * from user where    name = ‘xx’ and gender = ‘xx’</p><p>　　在where 后面的地方是不存在第一个and的，上面两个属性的意思如下：</p><p>　　prefix：前缀　　　　　　</p><p>　　prefixoverride：去掉第一个and或者是or    　　</p><ul><li>第二种用法<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　　update user</span><br><span class="line"></span><br><span class="line">　　&lt;trim prefix=<span class="string">"set"</span> suffixoverride=<span class="string">","</span> suffix=<span class="string">" where id = #&#123;id&#125; "</span>&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;if test="name != null and name.length()&gt;0"&gt; name=#&#123;name&#125; , &lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;if test="gender != null and gender.length()&gt;0"&gt; gender=#&#123;gender&#125; ,  &lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;/trim&gt;</span><br></pre></td></tr></table></figure></li></ul><p>　　假如说name和gender的值都不为null的话打印的SQL为：update user set name=’xx’ , gender=’xx’     where id=’x’</p><p>　　在红色标记的地方不存在逗号，而且自动加了一个set前缀和where后缀，上面三个属性的意义如下，其中prefix意义如上：</p><p>　　suffixoverride：去掉最后一个逗号（也可以是其他的标记，就像是上面前缀中的and一样）</p><p>　　suffix：后缀　　</p><h3 id="3-mybatis动态sql中where标签的使用"><a href="#3-mybatis动态sql中where标签的使用" class="headerlink" title="3. mybatis动态sql中where标签的使用"></a>3. mybatis动态sql中where标签的使用</h3><p>where标记的作用类似于动态sql中的set标记，他的作用主要是用来简化sql语句中where条件判断的书写的，如下所示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">　　&lt;select id=<span class="string">"selectByParams"</span> parameterType=<span class="string">"map"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line"></span><br><span class="line">　　　　select * from user</span><br><span class="line"></span><br><span class="line">　　　　&lt;where&gt;</span><br><span class="line"></span><br><span class="line">　　　　　　&lt;if test="id != null "&gt;id=#&#123;id&#125;&lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　　　　　&lt;if test="name != null and name.length()&gt;0" &gt;and name=#&#123;name&#125;&lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　　　　　&lt;if test="gender != null and gender.length()&gt;0"&gt;and gender = #&#123;gender&#125;&lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;/where&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>　　在上述SQL中加入ID的值为null的话，那么打印出来的SQL为：select * from user where name=”xx” and gender=”xx”</p><p>　　where 标记会自动将其后第一个条件的and或者是or给忽略掉　　</p><h3 id="4-mybatis动态SQL中的set标签的使用"><a href="#4-mybatis动态SQL中的set标签的使用" class="headerlink" title="4. mybatis动态SQL中的set标签的使用"></a>4. mybatis动态SQL中的set标签的使用</h3><p>set标记是mybatis提供的一个智能标记，我一般将其用在修改的sql中，例如以下情况：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">　　&lt;update&gt;</span><br><span class="line"></span><br><span class="line">　　　　update user </span><br><span class="line"></span><br><span class="line">　　　　&lt;set&gt;</span><br><span class="line"></span><br><span class="line">　　　　　　&lt;if test="name != null and name.length()&gt;0"&gt;name = #&#123;name&#125;,&lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　　　　　&lt;if test="gender != null and gender.length()&gt;0"&gt;gender = #&#123;gender&#125;,&lt;/if&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;/set&gt;</span><br><span class="line"></span><br><span class="line">　　　　where id = #&#123;id&#125;</span><br><span class="line"></span><br><span class="line">　　&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>　在上述的代码片段当中，假如说现在三个字段都有值得话，那么上面打印的SQL语句如下：</p><p>　update user set name=’xxx’ ,  gender=’xx’    where  id=’x’</p><p>　在上面标红的地方是没有逗号的，也就是说set标记已经自动帮助我们把最后一个逗号给去掉了</p><h3 id="4-mybatis动态SQL中的sql片段"><a href="#4-mybatis动态SQL中的sql片段" class="headerlink" title="4. mybatis动态SQL中的sql片段"></a>4. mybatis动态SQL中的sql片段</h3><p>在mybatis中通过使用SQL片段可以提高代码的重用性，如下情景：</p><p>1、创建动态SQL<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　　　&lt;sql id=<span class="string">"sql_count"</span>&gt;<span class="function">select <span class="title">count</span><span class="params">(*)</span>&lt;/sql&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、使用<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　　　&lt;select id=<span class="string">"selectListCountByParam"</span> parameterType=<span class="string">"map"</span> resultType=<span class="string">"String"</span>&gt;</span><br><span class="line"></span><br><span class="line">　　　　　　&lt;include refid=<span class="string">"sql_count"</span>/&gt; from table_name</span><br><span class="line"></span><br><span class="line">　　　　&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>3、解析<br>在使用sql片段时使用include标签通过sql片段的id进行引用，sql片段的ID在当前空间必须为唯一的<br>当然，sql片段中也可以写其他的内容，只要符合语法规范都是可以的。如下：<br>　　　　<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">　　　　&lt;sql id=<span class="string">"sql_where"</span>&gt;</span><br><span class="line">　　　　　　&lt;trim prefix=<span class="string">"WHERE"</span> prefixoverride=<span class="string">"AND | OR"</span>&gt;</span><br><span class="line">　　　　　　　　&lt;if test="id != null"&gt;AND id=#&#123;id&#125;&lt;/if&gt;</span><br><span class="line">　　　　　　　　&lt;if test="name != null and name.length()&gt;0"&gt;AND name=#&#123;name&#125;&lt;/if&gt;</span><br><span class="line">　　　　　　　　&lt;if test="gender != null and gender.length()&gt;0"&gt;AND gender=#&#123;gender&#125;&lt;/if&gt;</span><br><span class="line">　　　　　　&lt;/trim&gt;</span><br><span class="line">　　　　&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　　　&lt;select id=<span class="string">"updateByKey"</span> parameterType=<span class="string">"Map"</span> resultType=<span class="string">"List"</span>&gt;</span><br><span class="line">　　　　　　select * from user </span><br><span class="line">　　　　　　&lt;include refid=<span class="string">"sql_where"</span>&gt;</span><br><span class="line">　　　　&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h3 id="5-输入映射ParameterType"><a href="#5-输入映射ParameterType" class="headerlink" title="5. 输入映射ParameterType"></a>5. 输入映射ParameterType</h3><ul><li>指定输入参数的java类型，可以使用别名或者类的全限定名。它可以接收简单类型,POJO对象、HashMap。</li></ul><p>1.简单类型<br><img src="http://video.quejifang.cn/201902161320_737.png" alt=""></p><p>2.传递POJO对象(selectKey可以返回主键)<br><img src="http://video.quejifang.cn/201902161322_319.png" alt=""></p><p>3.传递POJO包装对象</p><ul><li>vo:键值对对象，相对于kv</li><li>po:persist object 持久化对象</li><li>pojo:简单的java对象</li><li>entity:实体<br><img src="http://video.quejifang.cn/201902161325_523.png" alt=""></li></ul><h3 id="6-输出映射-resultType"><a href="#6-输出映射-resultType" class="headerlink" title="6. 输出映射 resultType"></a>6. 输出映射 resultType</h3><p>使用resultType进行结果映射时，查询的列名和映射的pojo属性名完全一致，该列才能映射成功。</p><ul><li>如果查询的列名和映射的pojo属性名全部不一致，则不会创建pojo对象；</li><li>如果查询的列名和映射的pojo属性名有一个一致，就会创建pojo对象</li><li>当输出结果只有一列时，可以使用ResultType指定简单类型作为输出结果类型。</li></ul><p>输出POJO单个对象<br><img src="http://video.quejifang.cn/201902161331_359.png" alt=""><br>输出POJO列表<br><img src="http://video.quejifang.cn/201902161332_285.png" alt=""></p><p><strong>总结：</strong></p><ul><li>输出单个pojo对象和pojo列表时，mapper映射文件中的resultType的类型是一样的，mapper接口的方法返回值不同。</li><li>同样的mapper映射文件，返回单个对象和对象列表时，mapper接口在生成动态代理的时候，会根据返回值的类型，决定调用selectOne方法还是selectList方法。</li></ul><h3 id="7-输出映射-resultMap"><a href="#7-输出映射-resultMap" class="headerlink" title="7. 输出映射 resultMap"></a>7. 输出映射 resultMap</h3><p>如果查询出来的列名和属性名不一致，通过定义一个resultMap将列名和pojo属性名之间作一个映射关系。<br>1、定义resultMap<br>2、使用resultMap作为statement的输出映射类型<br>UserMapper.java<br><img src="http://video.quejifang.cn/201902161333_862.png" alt=""><br>UserMapper.xml<br><img src="http://video.quejifang.cn/201902161333_665.png" alt=""><br>测试<br><img src="http://video.quejifang.cn/201902161335_44.png" alt=""></p><p><strong>总结:</strong><br>parameterType和resultType<br>parameterType指定输入参数的java类型，可以填写别名或Java类的全限定名。<br>resultType指定输出结果的java类型，可以填写别名或Java类的全限定名。</p><p><code>#{}</code>和<code>${}</code><br><code>#{}</code>：相当于预处理中的占位符？。<br><code>#{}</code>里面的参数表示接收java输入参数的名称。<br><code>#{}</code>可以接受HashMap、POJO类型的参数。<br>当接受简单类型的参数时，#{}里面可以是value，也可以是其他。<br><code>#{}</code>可以防止SQL注入。<br><code>${}</code>：相当于拼接SQL串，对传入的值不做任何解释的原样输出。<br><code>${}</code>会引起SQL注入，所以要谨慎使用。<br><code>${}</code>可以接受HashMap、POJO类型的参数。<br>当接受简单类型的参数时，<code>${}</code>里面只能是value。</p><p>selectOne和selectList<br>selectOne：只能查询0或1条记录，大于1条记录的话，会报错：<br>selectList：可以查询0或N条记录<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserByName"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"com.gyf.domain.User"</span>&gt;</span><br><span class="line">SELECT * FROM USER WHERE username like <span class="string">'%$&#123;value&#125;%'</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2018/11/30/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/11/30/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="一-跳转"><a href="#一-跳转" class="headerlink" title="一 . 跳转:"></a>一 . 跳转:</h4><ol><li><p>项目间的跳转: windows下面<br>ctrl + alt + [   和   ctrl + alt + ]</p></li><li><p>help – fing Action<br>ctrl + shift + A</p></li><li><p>文件间的跳转,编辑过的<br>ctrl + E</p><a id="more"></a></li><li><p>跳转到最后一次编辑的地方 navigate下面<br>ctrl + shift + 空格</p></li><li><p>浏览位置跳转    navigate下面<br>ctrl + alt + 左箭头    ctrl + alt + 右箭头</p></li><li><p>利用书签跳转<br>ctrl + f11—f11—ctrl + 数字 跳转</p></li><li><p>收藏类,收藏方法 add to favorites<br>alt +　shift + f</p></li><li><p>插件跳转</p></li></ol><h4 id="二-精准搜索"><a href="#二-精准搜索" class="headerlink" title="二. 精准搜索"></a>二. 精准搜索</h4><ol><li><p>精准查找某个类 (点include 可以搜索jar包里面的)<br>ctrl + n</p></li><li><p>精准查找某个文件<br> ctrl +　shift + n</p></li><li><p>查符号 (包括函数)<br> ctrl + alt + shift + n</p></li><li>查找某个字符串<br> ctrl + shift + f</li><li>查找同一字符串<br> ctrl + shift + f7  再按f3向下,按shift+f3向上<h4 id="三-代码小助手"><a href="#三-代码小助手" class="headerlink" title="三. 代码小助手"></a>三. 代码小助手</h4></li><li>列操作</li></ol><ul><li>ctrl + alt +shift +j  先选中某个相同的符号, 再按快捷键就可开启</li><li>ctrl + w 选中某个单词</li><li>ctrl + shift + u 变换大小写</li><li>ctrl + shift + 右箭头选中后面的</li><li>shift + home  移到某个单词前面</li><li>shift + end  移到某个单词后面</li><li>Shift+Alt+Insert   先选中需要修改的内容再开启 列操作模式</li></ul><ol start="2"><li><p>格式化代码 reformat code<br> ctrl + alt + L</p></li><li><p>live template</p></li></ol><ul><li>postfix  通过点的方式快捷出来<br>for 循环<br>100.fori</li><li>sout输出语句</li><li>field<br>name.field </li><li>return<br>比如  先打要返回的对象再 打点<br>user.re   回车即可  效果就是   return user; </li></ul><ol start="5"><li>nn</li></ol><ul><li>打user.nn  效果<br>if(user !=null){}</li></ul><ol start="6"><li>alt+enter (补全方法等)</li></ol><ul><li>自动创建函数</li><li>list replace(比如把for循环改成for each等)</li><li>字符串format 或者 build</li><li>实现接口</li><li>单词拼写</li><li>导包<h3 id="四-重构"><a href="#四-重构" class="headerlink" title="四. 重构"></a>四. 重构</h3></li><li>重构变量(会批量选中,批量改)<br> shift + F6</li><li>重构方法,(比如增加个参数)<br> ctrl + F6<h3 id="五-抽取"><a href="#五-抽取" class="headerlink" title="五. 抽取"></a>五. 抽取</h3></li><li>抽取方法参数<br> ctrl + alt +p</li><li>抽取方法<br> ctrl + alt + m</li></ul><h3 id="六-其它操作"><a href="#六-其它操作" class="headerlink" title="六. 其它操作"></a>六. 其它操作</h3><ul><li>复制文件   F5</li><li>移动文件  F6 </li><li>复制文件路径  ctrl+shift +c</li></ul><h3 id="七-查看结构图"><a href="#七-查看结构图" class="headerlink" title="七. 查看结构图"></a>七. 查看结构图</h3><ol><li>查看java类方法 ctrl + f12</li><li>查看mave依赖, 类图  ctrl+shift +alt + u,再按ctrl+n 搜索</li><li>另外一种查看类图的方式  ctrl + h</li><li>查看接口的实现类  Ctrl + alt + b</li><li>查看方法的   ctrl + alt + h</li><li>查看当前的方法声明 alt + q</li><li>显示方法的参数信息  ctrl + p</li></ol><h3 id="八-运行"><a href="#八-运行" class="headerlink" title="八. 运行"></a>八. 运行</h3><ol><li>在运行上下文的位置就可以运行  ctrl +shift +f9   </li><li>已经运行过的历史位置运行       alt+shift +f9  shift+f9运行当前的</li><li>编辑当前运行   ctrl +shift +j    </li></ol><h3 id="九-断点调试"><a href="#九-断点调试" class="headerlink" title="九. 断点调试"></a>九. 断点调试</h3><ol><li>添加 断点 ctrl + F8</li><li>运行debug  shift + F9</li><li>单步运行 F8</li><li>跳到下一个断点  F9 ,如果没有断点,就执行完结束</li><li>查看所有断点   ctrl +shift + F8 按两次</li><li>禁止所有断点   就是跳过所有的断点  点击Mute Breakpoints 再按一下F9</li><li>条件断点,  必须满点这个条件 ,这个断点才会生效, 按一次 ctrl+ shift +F8</li><li>表达式求值   alt + F8</li><li>运行到指定行   alt+F9</li><li>set Value  断点停在某一行, 点击下面小窗口, 点击变量按F2设置值 </li></ol><h3 id="九-其它"><a href="#九-其它" class="headerlink" title="九. 其它"></a>九. 其它</h3><ol><li>Alt+Insert，可以生成构造器/Getter/Setter等</li><li>Ctrl+Shift+Space，自动补全代码</li><li>格式化代码：格式化import列表Ctrl+Alt+O，格式化代码Ctrl+Alt+L。 </li><li>运行：Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 5.7.22解压版安装教程,亲测</title>
      <link href="/2017/07/18/mysql%205.7.22%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B,%E4%BA%B2%E6%B5%8B/"/>
      <url>/2017/07/18/mysql%205.7.22%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B,%E4%BA%B2%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>5.7版是ZIP包的形式,搞了半天时间,特意记录一下</p><ol><li>去官网下载5.7.22zip包</li><li>配置环境变量<ul><li>新建 变量名：MYSQL_HOME</li><li>变量值：D:\mysql-5.7.22-winx64</li><li>修改环境变量PATH</li><li>在PATH后面加入%MYSQL_HOME%\bin   </li><li>注：如果前面有值，要用;隔开</li></ul></li><li><p>自己创建一个文本文档my.ini，放在mysql根目录下，内容如下（其中的dir路径按自己的来）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\mysql-5.7.22-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\mysql-5.7.22-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></li><li><p>管理员权限打开cmd，cd到mysql安装目录\bin路径下</p></li><li>mysqld -install (执行安装命令,安装成功后，这时候是无法启动mysql服务的，因为没有data文件夹)</li><li>执行mysqld –initialize-insecure自动生成无密码的root用户</li><li>上面那一步有可能会报错,是因为你之前安装过没有删干净过,请记得删除掉服务,data下的全部文件,还有注册表.</li><li>net start mysql 启动mysql服务(启动服务：net start mysql，停止服务：net stop mysql)</li><li>这时再执行mysql -u root -p ，登陆mysql服务器即可。</li></ol><h2 id="修改登陆密码"><a href="#修改登陆密码" class="headerlink" title="修改登陆密码"></a>修改登陆密码</h2><ol><li>以管理员身份运行cmd进入bin目录下，然后停止服务器，输入</li><li>net stop mysql</li><li>mysqld –skip-grant-tables（回车，启动mysql，意思是告诉mysql不需要登录验证）。</li><li>然后关掉cmd，再重新打开。</li><li>输入mysql -uroot -p 连续按两次回车按钮会直接进入mysql的控制台界面</li><li>update mysql.user set authentication_string=password(‘123’)where user=’root’;flush privileges;  (再按回车)</li><li>打开任务管理器,关掉mysqld.exe进程.</li><li>net start mysql (再重启mysql服务)</li><li>此时mysql -uroot -p (发现设的设的密码已变成123)</li><li>这里就完成了,有问题可发邮件讨论(<a href="mailto:qjiamei@163.com" target="_blank" rel="noopener">qjiamei@163.com</a>)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux软件的安装</title>
      <link href="/2017/07/18/linux%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/07/18/linux%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><ol><li>tar -zxvf XXX.tar.gz</li><li>./configure –prefix=/opt/mlterm (指定安装目录)</li><li>make(编绎)</li><li>make install(正式安装)</li><li>make clean (5 6 两步清除编译过程中产生的临时文件和配置过程中产生的文件)</li><li>make distclean<ol start="2"><li>二进程安装</li></ol><ul><li>rpm -i XXX.i386.rpm</li></ul></li></ol><hr><h2 id="软件的卸载"><a href="#软件的卸载" class="headerlink" title="软件的卸载"></a>软件的卸载</h2><ol><li>rpm -q -a (查看当前系统中安装的所有软件包)</li><li>rpm -e [package name]</li><li>rpm -e [package name] -nodeps  (忽略依赖关系的强行卸载)</li><li>rpm -ql [package name] (查看rpm包安装到哪了)</li></ol><p>源码包卸载</p><ol><li>建议安装到一个统一的目录<blockquote><p>./configure –prefix=/opt/mlterm</p></blockquote>#make<br>#make install</li></ol><p>2.有些软件需执行这条命令  make uninstall </p><hr><h2 id="linux查看程序是否启动-nginx为例"><a href="#linux查看程序是否启动-nginx为例" class="headerlink" title="linux查看程序是否启动(nginx为例)"></a>linux查看程序是否启动(nginx为例)</h2><ol><li>查看进程列表并过滤</li></ol><ul><li>ps -ef |grep nginx</li><li>ps -aux</li></ul><ol start="2"><li>直接查看进程id(推荐使用这种方式)</li></ol><ul><li>ps -C nginx -o pid</li><li>直接返回Nginx的pid</li></ul><ol start="3"><li>使用netstat命令</li></ol><ul><li>netstat -anp |grep :80</li></ul><ol start="4"><li>使用lsof命令</li></ol><ul><li>lsof -i:80 可以查看80端口是否有进程在运行</li></ul><hr><p>安装JDK和tomcat案例</p><ol><li>tar -zxvf jkdXXX</li><li>mkdir /usr/local/java</li><li>mv jdkXXX /usr/local/java</li><li><p>vim /etc/profile(修改配置文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unset i</span><br><span class="line">unset -f pathmunge</span><br><span class="line">export JAVA_HOME=/java/jdk1.8.0_172</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure></li><li><p>:wq!保存并退出</p></li><li>source /etc/profile (使配置生效)</li><li>java -version (测试是否成功)</li></ol><hr><p>安装tomcat</p><ol><li>mkdir /usr/local/tomcat</li><li>mv apache-tomcatXXX /usr/local/tomcat/</li><li>cd XXX/bin/ (进入到bin目录启动下面命令)</li><li>./startup.sh</li><li>netstat -anp |grep :8080 (查看是否启动)</li></ol><p>如果访问不了，有可能是服务器防火墙问题，8080端口被拦截了，于是需要打开8080端口，并保存重启防火墙：</p><blockquote><p>[root@localhost bin]# iptables  -I  INPUT  -p  tcp  –dport  8080  -j  ACCEPT<br>[root@localhost bin]# /etc/init.d/iptables  save<br>[root@localhost bin]# /etc/init.d/iptables  restart</p></blockquote><p>修改tomcat下的配置文件 tomcat-users.xml</p><blockquote><p>[root@localhost ~]# vim /usr/local/tomcat/apache-tomcat-7.0.77/conf/tomcat-users.xml</p></blockquote><p>在前添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;tomcat,manager-gui,admin-gui,admin-script,manager-script&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>注：username 和 password 则是登陆tomcat管理界面需要的账号密码。<br>:wq 保存退出，重启tomcat</p><h2 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h2><ol><li>yum groupinstall “X Window System”</li><li>yum grouplist</li><li>yum groupinstall “GNOME Desktop” (在grouplist中找一个桌面安装)</li><li>startx (进入桌面)</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git使用</title>
      <link href="/2017/07/18/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/07/18/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>git init</li><li>git clone <a href="http://XXX" target="_blank" rel="noopener">http://XXX</a></li><li>git add aa.md</li><li>git commit -m ‘描述’</li><li>git push origin master (推上去)</li></ol><h2 id="sea维护资料使用命令"><a href="#sea维护资料使用命令" class="headerlink" title="sea维护资料使用命令"></a>sea维护资料使用命令</h2><ol><li>git init </li><li>git clone http:XXX</li><li>git checkout -b  0715_master_que (建议大家都使用自己的分支上管理，日期+master+名字)</li><li>git add -A love (可以一次性管理全部文件夹)</li><li>git commit -m ‘改动的描述’</li><li>git checkout master (切换到主分支)</li><li>git pull origin master (使用之前先拉一下)</li><li>git merge 0715_master_que(跟主分支融合)</li><li>git push origin master(推到主分支上)</li></ol><hr><h2 id="在分支上使用一"><a href="#在分支上使用一" class="headerlink" title="在分支上使用一"></a>在分支上使用一</h2><ol><li>使用 git checkout -b 0713bug_master<ul><li>这个命令相当于两个命令</li><li>git branch 0731bug_master (创建分支)</li><li>git checkout 0730bug_master (新建分支)</li></ul></li><li>在新切分支上修改<ul><li>git status (可查看哪些文件被修改)</li><li>git add bb.md (选择本次提交文件,多个路径用空格隔开)</li><li>git commit -m ‘加描述’</li></ul></li><li>假设多次提交后,要merge到主分支上去<ul><li>git status (先查看一下)</li><li>git stash (将这些改动的文件暂存起来)</li><li>git checkout master (切换到主分支上)</li><li>git pull origin master (先拉)</li><li>git merge 0731bug_master (融合)</li><li>git push origin master (推上去吧)</li></ul></li></ol><h2 id="在分支上使用二"><a href="#在分支上使用二" class="headerlink" title="在分支上使用二"></a>在分支上使用二</h2><p>如果主分支有两个,比如一个稳定版,一个开发版,要merge到开发版应该如何操作呢?</p><ol><li>git log (在当前分支0713bug_master找一个commitId,这个commitId是当前所要merge的第一次提交的前一个commitId)</li><li>git checkout develop (切换到开发版分支)</li><li>git pull origin develop</li><li>git checkout 0713bug_master (切换到自己的bug分支)</li><li>git rebase –onto=develop commitId</li><li>git checkout develop (查看是否有冲突,有则解决)</li><li>git push origin develop</li></ol><h2 id="在分支上使用二-通用"><a href="#在分支上使用二-通用" class="headerlink" title="在分支上使用二(通用)"></a>在分支上使用二(通用)</h2><ol><li>git log(在当前分支0713bug_master上，找到要merge的commitId)</li><li>git checkout develop</li><li>git pull origin develop</li><li>git cherry-pick commitId<br>查看是否有冲突,有则解决冲突</li><li>git push origin develop</li></ol><h2 id="关于github上克隆项目的问题"><a href="#关于github上克隆项目的问题" class="headerlink" title="关于github上克隆项目的问题"></a>关于github上克隆项目的问题</h2><ol><li>新电脑需要先把公钥复制到 New SSH key里.<ul><li>ssh key：ssh-keygen -t rsa -C  “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“ (这里要一路回车)</li><li>在用户目录下的.ssh文件夹中有id_rsa(私钥)和id_rsa.pub(公钥)</li><li>git clone git@XXx</li><li>如果报错的话,有可能是网络环境问题,请在clone后+http协议地址.</li><li>git remote show origin (查看某个远程仓库的详细信息)</li></ul></li></ol><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><ol><li>rm aa.md</li><li>git rm aa.md</li><li>git commit -m ‘描述’</li><li>git push origin master</li></ol><h2 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h2><ol><li>it branch (查看本地所有的分支)</li><li>git add -A abc (abc为文件夹，文件夹下所有文档都将add)</li><li>git branch -D 0713bug_master (强制删除0713bug_master分支)</li><li>git reset –hard commitId(回滚到某次commitId状态，git reset –soft HEAD~ )</li><li><p>git reset [–hard|soft|mixed|merge|keep] [commit|HEAD]</p></li><li><p>git remote add kh <a href="https://git.oschina.Net/zgj2016/KHPro.git" target="_blank" rel="noopener">https://git.oschina.Net/zgj2016/KHPro.git</a> （这行命令执行一次就行，是为了给自己仓库的地址起个别名，下次提交不需要执行此行代码）</p></li><li>git mv game.py wordgame.py(在git里重命名需要用到git mv 命令)</li><li>echo *.temp &gt; .gitignore （创建带点的忽略文件夹，并忽略.temp文件）</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>电商秒杀基本思路总结</title>
      <link href="/2017/03/28/%E7%94%B5%E5%95%86%E7%A7%92%E6%9D%80/"/>
      <url>/2017/03/28/%E7%94%B5%E5%95%86%E7%A7%92%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一-设计思路-存在并发问题"><a href="#一-设计思路-存在并发问题" class="headerlink" title="一.设计思路(存在并发问题)"></a>一.设计思路(存在并发问题)</h3><ol><li>先判断库存</li></ol><ul><li>传的参数是goodsId</li><li>去miaosha_goods里查库存是否为0</li></ul><ol start="2"><li>判断用户是否在秒杀订单里,防止重复秒杀 </li></ol><ul><li>传参是user.getId, goodsId</li><li>去miaosha_order里查是否同时满足userId and goodsId的记录</li></ul><ol start="3"><li>减库存,写订单表,写秒杀订单表,保证在一个@Transactional里进行</li></ol><ul><li>在miaosha_Service里进行,添加事物注解</li><li>里面注入两个service,goodsService里更新操作(减库存). orderService向订单表和秒杀订单表里增加记录</li><li>传参数是user,goods</li><li>在orderService里也要添加@Transactional注解.会向两个表增加记录</li><li>goods为秒杀商品表实体类 extends 商品表实体类的组合类</li></ul><ol start="4"><li><strong>解决一个用户秒杀两个商品</strong></li></ol><ul><li>前端登陆保证一个用户只发一个秒杀商品请求</li><li>后端通过唯一索引保证(user_id goods_id)<br><img src="http://video.quejifang.cn/201903011632_373.png" alt=""></li></ul><ol start="5"><li><strong>解决超卖问题</strong></li></ol><ul><li>使用SQL语句加锁的方式解决</li><li><img src="http://video.quejifang.cn/201903011637_58.png" alt=""></li><li>就是加and条件当库存大于0的时候才执行数据操作,相当于加了锁</li></ul><h3 id="二-优化接口-实现高并发"><a href="#二-优化接口-实现高并发" class="headerlink" title="二. 优化接口(实现高并发)"></a>二. 优化接口(实现高并发)</h3><ol><li>在第一步判断库存的时候,先把库存查出来加进redis里面去.</li><li>收到请求,Redis预减库存,库存不足,直接返回,否则进入下一步</li><li>请求入队,立即返回显示排队中</li><li>请求出队,生成订单,减少库存.(生成的订单会写入redis当中,客户端就会知道是否秒杀成功了)</li><li>客户端轮询,是否秒杀成功(跟第四步并发进行的)</li></ol><h3 id="三-表设计"><a href="#三-表设计" class="headerlink" title="三.表设计"></a>三.表设计</h3><p>1.goods(商品表)<br><img src="http://video.quejifang.cn/201901122037_379.png" alt=""></p><ol start="2"><li>miaosha_goods(秒杀商品表)<br><img src="http://video.quejifang.cn/201901122038_196.png" alt=""></li><li>order_info(订单表)<br><img src="http://video.quejifang.cn/201901122040_590.png" alt=""><br>4.miaosha_order(秒杀订单表)<br><img src="http://video.quejifang.cn/201901122041_916.png" alt=""></li></ol><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三.代码实现"></a>三.代码实现</h3><p>1.MiaoshaController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/miaosha"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiaoshaController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GoodsService goodsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderService orderService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MiaoshaService miaoshaService;</span><br><span class="line">     <span class="meta">@RequestMapping</span>(<span class="string">"/do_miaosha"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model, MiaoShaUser user,</span></span></span><br><span class="line"><span class="function"><span class="params">                       @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断库存</span></span><br><span class="line">        GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">        <span class="keyword">int</span> stock = goods.getStockCount();</span><br><span class="line">        <span class="keyword">if</span> (stock &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"errmsg"</span>, CodeMsg.MIAO_SHA_OVER);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"miaosha_fail"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断 是否用户是否存在秒杀订单里</span></span><br><span class="line">        MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);</span><br><span class="line">        <span class="keyword">if</span>(order !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"errmsg"</span>, CodeMsg.REPEATE_MIAOSHA);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"miaosha_fail"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//减库存,下订单,写入秒杀订单</span></span><br><span class="line">        OrderInfo orderInfo = miaoshaService.miaosha(user,goods);</span><br><span class="line">        model.addAttribute(<span class="string">"orderInfo"</span>, orderInfo);</span><br><span class="line">        model.addAttribute(<span class="string">"goods"</span>, goods);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"order_detail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.MiaoshaService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiaoshaService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GoodsService goodsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OrderService orderService;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderInfo <span class="title">miaosha</span><span class="params">(MiaoShaUser user, GoodsVo goods)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//减库存 下订单 写入秒杀订单</span></span><br><span class="line">        goodsService.reduceStock(goods);</span><br><span class="line">        <span class="comment">//order_info miaosha_order</span></span><br><span class="line">        <span class="keyword">return</span> orderService.createOrder(user,goods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.goodsService.reduceStock(goods);<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceStock</span><span class="params">(GoodsVo goods)</span> </span>&#123;</span><br><span class="line">    MiaoshaGoods g = <span class="keyword">new</span> MiaoshaGoods();</span><br><span class="line">    g.setGoodsId(goods.getId());</span><br><span class="line">    goodsDao.reduceStock(g);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.orderService.createOrder(user,goods)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderInfo <span class="title">createOrder</span><span class="params">(MiaoShaUser user, GoodsVo goods)</span> </span>&#123;</span><br><span class="line">    OrderInfo orderInfo = <span class="keyword">new</span> OrderInfo();</span><br><span class="line">    orderInfo.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">    orderInfo.setDeliveryAddrId(<span class="number">0L</span>);</span><br><span class="line">    orderInfo.setGoodsCount(<span class="number">1</span>);</span><br><span class="line">    orderInfo.setGoodsId(goods.getId());</span><br><span class="line">    orderInfo.setGoodsName(goods.getGoodsName());</span><br><span class="line">    orderInfo.setGoodsPrice(goods.getMiaoshaPrice());</span><br><span class="line">    orderInfo.setOrderChannel(<span class="number">1</span>);</span><br><span class="line">    orderInfo.setStatus(<span class="number">0</span>);</span><br><span class="line">    orderInfo.setUserId(user.getId());</span><br><span class="line">    <span class="comment">//写进订单里面</span></span><br><span class="line">    <span class="keyword">long</span> orderId = orderDao.insert(orderInfo);</span><br><span class="line">    MiaoshaOrder miaoshaOrder = <span class="keyword">new</span> MiaoshaOrder();</span><br><span class="line">    miaoshaOrder.setOrderId(orderId);</span><br><span class="line">    miaoshaOrder.setGoodsId(goods.getId());</span><br><span class="line">    miaoshaOrder.setUserId(user.getId());</span><br><span class="line">    <span class="comment">//写进秒杀订单</span></span><br><span class="line">    orderDao.insertMiaoshaOrder(miaoshaOrder);</span><br><span class="line">    <span class="keyword">return</span> orderInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.Dao代码,减库存<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(<span class="string">"update miaosha_goods set stock_count = stock_count -1 where goods_id =#&#123;goodsId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduceStock</span><span class="params">(MiaoshaGoods g)</span></span>;</span><br></pre></td></tr></table></figure></p><p>6.Dao代码,增加两条记录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into order_info(user_id, goods_id, goods_name, goods_count, goods_price, order_channel, status, create_date)values("</span></span><br><span class="line">         + <span class="string">"#&#123;userId&#125;, #&#123;goodsId&#125;, #&#123;goodsName&#125;, #&#123;goodsCount&#125;, #&#123;goodsPrice&#125;, #&#123;orderChannel&#125;,#&#123;status&#125;,#&#123;createDate&#125; )"</span>)</span><br><span class="line"> <span class="meta">@SelectKey</span>(keyColumn=<span class="string">"id"</span>, keyProperty=<span class="string">"id"</span>, resultType=<span class="keyword">long</span>.class, before=<span class="keyword">false</span>, statement=<span class="string">"select last_insert_id()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">insert</span><span class="params">(OrderInfo orderInfo)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Insert</span>(<span class="string">"insert into miaosha_order (user_id, goods_id, order_id)values(#&#123;userId&#125;, #&#123;goodsId&#125;, #&#123;orderId&#125;)"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertMiaoshaOrder</span><span class="params">(MiaoshaOrder miaoshaOrder)</span></span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 秒杀 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring第一天</title>
      <link href="/2016/04/09/spring%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2016/04/09/spring%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h4 id="今日学习重点："><a href="#今日学习重点：" class="headerlink" title="今日学习重点："></a>今日学习重点：</h4><pre><code> Spring的基本介绍、体系结构、优点（理解） IOC（控制反转） DI（依赖注入） SpringBean获取与实例化 ApplicationContext和BeanFactory的区别 bean 实例化的三种方式Bean的作用域 (默认singleton)SpringBean的生命周期（了解） Spring注解开发</code></pre><h4 id="Spring基本介绍："><a href="#Spring基本介绍：" class="headerlink" title="Spring基本介绍："></a>Spring基本介绍：</h4><pre><code>Sping是什么？Spring它是一个一站式的分层轻量级开源框架。Spring的作用有哪些？</code></pre><p>1.致力于提供一种方法管理业务对象<br>2.能够使我们的javaee更加易用，以及促进良好的编程习惯<br>3.提供一种一站式的编程选择，致力于javaEE应用的各层解决方案，而不局限于某一层，能够无缝的与一些主流应用整合（不是直接替代）</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804101527_760.png" alt=""></p><h4 id="Spring-体系结构与优点"><a href="#Spring-体系结构与优点" class="headerlink" title="Spring 体系结构与优点"></a>Spring 体系结构与优点</h4><p>1.Spring 的体系架构<br>        包含了（五大部分）核心容器（core container） 面向切面编程相关（AOP）<br>持久层支持，Web层支持，Test<br>2.Spring优点：<br>      1) 可以令人方便愉快的使用Spring。<br>      2) 应用程序代码并不依赖于Spring API。<br>      3) Spring不和现有的解决方案竞争，而是致力于将它们融合在一起。<br>       当使用spring时，我们可以使用容器提供的众多服务<br> Spring环境搭建<br>        1.导包<br>        在spring开发中，我们要根据不同的情况来导入不同的jar包，当我们只使用IOC和DI的时候         我们需要导的有以下包：<br>        1.beans相关<br>        2.core相关<br>        3.context相关<br>        4.spel相关<br>        5.commons-logging<br>        6.log4j<br>2.编写配置文件：<br>在工程的src目录下面编写applicationContext.xml配置文件<br>注意：applicationContext.xml配置文件的约束信息在spring-framework-4.2.4.RELEASE-dist\spring-framework-4.2.4.RELEASE\docs\spring-framework-reference\html\ xsd-configuration.html里面去找</p><h4 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC:控制反转"></a>IOC:控制反转</h4><p>在程序中所说的IOC其实简单说，就是原来由我们自己实例化的对象交给spring容器来实始化。这时对象的实始化的权利就会反转。</p><pre><code>IOC原理：配置文件 + 反射 + 工厂Spring ioc基本使用步骤：</code></pre><p>1.在applicationContext.xml配置bean<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101727_477.png" alt=""><br>2.在程序中初始化Spring容器<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101728_114.png" alt=""><br>3.可以通过getBean(配置文件中id名称)来获取指定的对象<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101728_632.png" alt=""></p><h4 id="DI基本使用"><a href="#DI基本使用" class="headerlink" title="DI基本使用"></a>DI基本使用</h4><p>1.DI基本概念:dependency injection 依赖注入<br>        在spring框架负责创建Bean对象时，动态将依赖对象注入到Bean组件。<br>被调用者实例的创建由第三方(Spring 容器)完成，然后注入给调用者，移除调用者对被调用者的依赖。它的目的是解除对象与对象的依赖.<br>2.基本使用</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804101730_397.png" alt=""></p><p>3、IoC与DI的区别<br>IOC 控制反转，将对象的创建权,交由Spring管理。<br>DI  依赖注入 ，在Spring创建对象的过程中,把对象依赖的属性注入到类中</p><h4 id="Spring-Bean获取的实例化"><a href="#Spring-Bean获取的实例化" class="headerlink" title="Spring Bean获取的实例化"></a>Spring Bean获取的实例化</h4><ol><li>ApplicationContext和BeanFactory的区别</li></ol><ul><li>ApplicationContext继承了BeanFactory</li><li>BeanFactory它采取延迟加载的方案，只有真正在getBean时才会实例化Bean</li><li>AppliCationContext它会在配置文件加载时，就会初始化Bean,并且ApplicationContext它提供 </li><li>不同的应用层的Context实现。例如在web开发中可以使用WebApplicationContext.<h6 id="常用的两个ApplicationContext的实现类"><a href="#常用的两个ApplicationContext的实现类" class="headerlink" title="常用的两个ApplicationContext的实现类"></a>常用的两个ApplicationContext的实现类</h6>  FileSystemXmlAppliCationContext 根据文件路径获取<br>  ClassPathXmlApplicationContext  根据类路径获取</li></ul><ol start="2"><li>bean 实例化的三种方式：<br>1、 调用构造方法创建bean的实例(默认无参数)。<br><code>&lt;bean id=&quot;bean1&quot; class=&quot;com.spring.demo2.Bean1&quot;&gt;&lt;/bean&gt;</code><br>2、调用静态工厂方法创建 bean 的实例。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bean2&quot; class=&quot;com.spring.demo2.Bean2Factory&quot;</span><br><span class="line">            factory-method=&quot;getBean2&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><p>3、调用实例工厂方法创建 bean 的实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;bean3Factory&quot; class=&quot;com.spring.demo2.Bean3Factory&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;bean3&quot; factory-bean=&quot;bean3Factory&quot; factory-method=&quot;getBean3&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>Bean的作用域【应用】(默认singleton)<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101743_396.png" alt=""></li></ol><p>#Bean的生命周期的11个步骤:</p><ol><li>instantiate bean对象实例化</li><li>populate properties 封装属性</li><li>如果Bean实现BeanNameAware 执行 setBeanName</li><li>如果Bean实现BeanFactoryAware 或者 ApplicationContextAware 设置工厂 setBeanFactory 或者上下文对象 setApplicationContext</li><li>如果存在类实现 BeanPostProcessor（后处理Bean） ，执行<br>postProcessBeforeInitialization</li><li>如果Bean实现InitializingBean 执行 afterPropertiesSet </li><li>调用<bean init-method="init"> 指定初始化方法 init</bean></li><li>如果存在类实现 BeanPostProcessor（处理Bean） ，执行<br>postProcessAfterInitialization</li><li>执行业务处理</li><li>如果Bean实现 DisposableBean 执行 destroy</li><li>调用<bean destroy-method="customerDestroy"> 指定销毁方法 customerDestroy### SpringBean的生命周期</bean></li></ol><p>总结:<br>    对于bean的生命周期，我们需要关注的主要有两个方法:<br>       1.增强bean的功能可以使用后处理Bean, BeanPostProcessor<br>       2.如果需要初始化或销毁操作我们可以使用init-method  destroy-method</p><p>注意:destroy-method只对scope=singleton有效果。</p><h4 id="Spring的注解开发"><a href="#Spring的注解开发" class="headerlink" title="Spring的注解开发"></a>Spring的注解开发</h4><p>1.Bean注册<br>Spring2.5 引入使用注解去定义Bean<br>@Component  描述Spring框架中Bean </p><p>Spring的框架中提供了与@Component注解等效的三个注解:<br>@Repository 用于对DAO实现类进行标注<br>@Service 用于对Service实现类进行标注<br>@Controller 用于对Controller实现类进行标注<br>在spring中使用注解，我们必须在applicationContext.xml文件中添加一个标签<br><a href="context:annotation-config/" target="_blank" rel="noopener">context:annotation-config/</a>作用是让spring中常用的一些注解生效。<br>要使用contex名称空间，必须在applicationContext.xml文件中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans </span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context </span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">&lt;!-- &lt;context:annotation-config /&gt; --&gt;</span><br></pre></td></tr></table></figure></p><pre><code>&lt;!-- 下面的配置作用是指定spring扫描的包,它包含了context:annotation-config的功能，所以在开发中一般就不需要在配置上面的 --&gt;&lt;context:component-scan base-package=&quot;cn.itheima&quot; /&gt;    </code></pre><p><br>Spring注解开发必须要导入一个包<br> spring-aop-4.2.4.RELEASE.jar</p><h4 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h4><p>简单的属性注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101749_827.png" alt=""><br>2.复杂的属性注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101750_611.png" alt=""><br>或者<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101750_570.png" alt=""><br>注意：@Value @Autowired它们可以修饰属性，也可以修饰setter方法，如果写在属性上，就不需要提供setter方法。<br>3.spring注解开发-属性依赖注入指定注入的名称<br>@Autowired它默认是根据类型进行注入。<br>如果与@Qualifier一起使用，就可以根据名称来进行注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101751_528.png" alt=""><br>4.Spring提供@Resource注解<br>因此可以使用下面的方式来根据名称进行属性注入<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804101751_940.png" alt=""><br>5.spring注解开发-其它注解<br>配置Bean的作用范围:<br>@Scope使用注解配置的Bean和<bean>配置的一样，默认作用范围都是singleton<br>注意：对于销毁的方法它只对bean的scope=singleton有效。<br>配置Bean初始化方法和销毁方法:</bean></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring AOP</title>
      <link href="/2015/11/01/springAOP/"/>
      <url>/2015/11/01/springAOP/</url>
      
        <content type="html"><![CDATA[<h3 id="一-AOP概述"><a href="#一-AOP概述" class="headerlink" title="一. AOP概述"></a>一. AOP概述</h3><ul><li>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</li><li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li><li>AOP是一个概念，并没有设定具体语言的实现，它能克服那些只有单继承特性语言的缺点，spring2.0之后整合AspectJ第三方AOP技术。<a id="more"></a></li><li>主要功能<ul><li>日志记录，性能统计，安全控制，事务处理，异常处理等等</li></ul></li><li>主要意图<ul><li>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。<h3 id="二-AOP概述"><a href="#二-AOP概述" class="headerlink" title="二. AOP概述"></a>二. AOP概述</h3></li></ul></li><li>目标对象target<ul><li>指的是需要被增强的对象，由于spring aop是通过代理模式实现，从而这个对象永远是被代理对象</li></ul></li><li>连接点(join point)<ul><li>所谓连接点是指那些被拦截到的点，在spring中这些点指的是方法，因为spring只支持方法类型的连接点</li></ul></li><li>切入点(pointcut)<ul><li>表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方<br>简单说切入点是指我们要对哪些连接点进行拦截的定义</li></ul></li><li>通知(advice)<ul><li>Advice 定义了在 pointcut 里面定义的程序点具体要做的操作</li><li>所谓通知是指拦截到连接点之后所要做的事情就是通知，通知分为前置通知，后置通知，异常通知，最终通知，环绕通知</li></ul></li><li>引介introduction<ul><li>引介是一种特殊的通知，在不修改类代码的前提下，introduction可以在运行期为类动态地添加一些方法或属性</li></ul></li><li>切面aspect<ul><li>是切入点和通知的结合</li></ul></li><li>织入weaving<ul><li>织入是一个过程，是将切面应用到目标对象从而创建出AOP代理对象的过程，织入可以在编译期，类装载期，运行期进行。</li><li>Spring采用动态织入，而aspectj采用静态织入</li></ul></li><li>代理Proxy<ul><li>一个类被AOP织入增强后，就产生一个结果代理类</li></ul></li><li><strong>Spring的AOP为动态AOP，实现的技术为： JDK提供的动态代理技术 和 CGLIB(动态字节码增强技术)</strong> </li></ul><h3 id="三-JDK动态代理"><a href="#三-JDK动态代理" class="headerlink" title="三. JDK动态代理"></a>三. JDK动态代理</h3><ol><li>Jdk动态代理只针对于接口操作</li><li>使用java.lang.reflect下的Proxy,有个静态方法newProxyInstance.</li></ol><p><img src="http://p6hod2vhp.bkt.clouddn.com/201811012328_752.png" alt=""></p><ul><li>第一个参数:目标类的类加载器对象</li><li>第二个参数:目标类的实现接口的Class[]</li><li>第三个参数:InvocationHandler它是一个接口，它的作用是是代理实例的调用处理程序 实现的接口，接口中定义了一个方法,是叫invoke方法<br><img src="http://p6hod2vhp.bkt.clouddn.com/201811012331_33.png" alt=""></li></ul><h3 id="四-JDK动态代理代码实现"><a href="#四-JDK动态代理代码实现" class="headerlink" title="四. JDK动态代理代码实现"></a>四. JDK动态代理代码实现</h3><ul><li><p>目标类接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iuser</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>目标类接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IuserImpl</span> <span class="keyword">implements</span> <span class="title">Iuser</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"登陆方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"注册方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="comment">//带参构造方法 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdkProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理对象 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">creatProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.得到类加载器</span></span><br><span class="line">ClassLoader loader = target.getClass().getClassLoader();</span><br><span class="line"><span class="comment">//2.得到目标对象实现接口的Class[]  </span></span><br><span class="line">Class[] interfaces =target.getClass().getInterfaces();</span><br><span class="line"><span class="comment">//3. 返回代理对象</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(loader, interfaces,<span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">        <span class="comment">//4.匿名内部类在代理实例上处理方法,并返回结果</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"日志操作等功能增强"</span>);</span><br><span class="line"><span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IuserImpl iuserImpl = <span class="keyword">new</span> IuserImpl();</span><br><span class="line"><span class="comment">//有参构造方法</span></span><br><span class="line">JdkProxyFactory jdkProxyFactory = <span class="keyword">new</span> JdkProxyFactory(iuserImpl);</span><br><span class="line"></span><br><span class="line">Iuser creatProxy = (Iuser) jdkProxyFactory.creatProxy();</span><br><span class="line">creatProxy.login();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="五-cglib动态代理"><a href="#五-cglib动态代理" class="headerlink" title="五. cglib动态代理"></a>五. cglib动态代理</h3><ol><li>jdk代理是代理对象和被代理对象是继承的关系, 有接口默认使用jdk动态代理</li><li>cglib代理对象和被代理对象实现是同一接口, 是兄弟关系,对于被有接口的类就使用cglib.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CglibFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 创建enhancer</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">// 2. 传递目标对象的Class</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">// 设置回调操作(相当于invocationhandler)</span></span><br><span class="line"><span class="number">3</span>. enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodPorxy)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"么么操作"</span>);</span><br><span class="line"><span class="comment">//处理结果后返回</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4. enhancer对象创建代理对象并返回</span></span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springAOP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>观察者模式</title>
      <link href="/2015/11/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/11/01/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>观察者模式，又可以称之为发布-订阅模式，观察者，顾名思义，就是一个监听者，类似监听器的存在，一旦被观察/监听的目标发生的情况，就会被监听者发现，这么想来目标发生情况到观察者知道情况，其实是由目标奖情况发送到观察者的。<br>观察者模式多用于实现订阅功能的场景，例如微博的订阅，当我们订阅了某个人的微博账号，当这个人发布了新的消息，就会通知我们。</li><li>现在我们举一个类似的情况，并使用代码来实现，为大家提供一个比较明显的认识。</li><li>警察在找到嫌犯的时候，为了找到幕后主使，一般都会蹲点监察，这里我有三名便衣警察来蹲点监察2名嫌犯，三名便衣分别是：张昊天、石破天、赵日天，两名嫌犯是：大熊与黑狗，详见代码</li><li><p>观察者接口：Observer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br><span class="line">package test.com;</span><br><span class="line">//观察者接口</span><br><span class="line">public interface Observer &#123;</span><br><span class="line">    void update(String message,String name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者实例1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"> <span class="comment">//便衣警察张昊天,观察者实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianyi1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义姓名</span></span><br><span class="line">    <span class="keyword">private</span> String bname = <span class="string">"张昊天"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message,String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">":"</span>+name+<span class="string">"那里有新情况："</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者实例2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianyi2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义姓名</span></span><br><span class="line">    <span class="keyword">private</span> String bname = <span class="string">"石破天"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message,String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">":"</span>+name+<span class="string">"那里有新情况："</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察者实例3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bianyi3</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义姓名</span></span><br><span class="line">    <span class="keyword">private</span> String bname = <span class="string">"赵日天"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message,String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(bname+<span class="string">":"</span>+name+<span class="string">"那里有新情况："</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题接口,也就是被监控的对象 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Huairen</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加便衣观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="comment">//移除便衣观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notice</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="comment">//主题接口</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嫌犯大熊</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XianFan1</span> <span class="keyword">implements</span> <span class="title">Huairen</span> </span>&#123;</span><br><span class="line">    <span class="comment">//别称</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"大熊"</span>;</span><br><span class="line">    <span class="comment">//定义观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">//增加观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!observerList.contains(observer))&#123;</span><br><span class="line">            observerList.add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(observerList.contains(observer))&#123;</span><br><span class="line">            observerList.remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notice</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:observerList)&#123;</span><br><span class="line">            observer.update(message,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嫌犯黑狗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XianFan2</span> <span class="keyword">implements</span> <span class="title">Huairen</span> </span>&#123;</span><br><span class="line">    <span class="comment">//别称</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"黑狗"</span>;</span><br><span class="line">    <span class="comment">//定义观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">//增加观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!observerList.contains(observer))&#123;</span><br><span class="line">            observerList.add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(observerList.contains(observer))&#123;</span><br><span class="line">            observerList.remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notice</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:observerList)&#123;</span><br><span class="line">            observer.update(message,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.com;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clienter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个嫌犯</span></span><br><span class="line">        Huairen xf1 = <span class="keyword">new</span> XianFan1();</span><br><span class="line">        Huairen xf2 = <span class="keyword">new</span> XianFan2();</span><br><span class="line">        <span class="comment">//定义三个观察便衣警察</span></span><br><span class="line">        Observer o1 = <span class="keyword">new</span> Bianyi1();</span><br><span class="line">        Observer o2 = <span class="keyword">new</span> Bianyi2();</span><br><span class="line">        Observer o3 = <span class="keyword">new</span> Bianyi3();</span><br><span class="line">        <span class="comment">//为嫌犯增加观察便衣</span></span><br><span class="line">        xf1.addObserver(o1);</span><br><span class="line">        xf1.addObserver(o2);</span><br><span class="line">        xf2.addObserver(o1);</span><br><span class="line">        xf2.addObserver(o3);</span><br><span class="line">        <span class="comment">//定义嫌犯1的情况</span></span><br><span class="line">        String message1 = <span class="string">"又卖了一批货aaa"</span>;</span><br><span class="line">        String message2 = <span class="string">"老大要下来视察了"</span>;</span><br><span class="line">        xf1.notice(message1);</span><br><span class="line">        xf2.notice(message2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关键点：</p></li></ul><ol><li>针对观察者与被观察者分别定义接口，有利于分别进行扩展。</li><li>重点就在被观察者的实现中：<ul><li>定义观察者集合，并定义针对集合的添加、删除操作，用于增加、删除订阅者（观察者）</li><li>定义通知方法，用于将新情况通知给观察者用户（订阅者用户）</li></ul></li><li>观察者中需要有个接收被观察者通知的方法。</li></ol><ul><li>总结:</li></ul><ol><li>先定义观察者接口</li><li>继承观察者接口,实例观察者和更新方法</li><li>定义主题接口,接口中的抽像方法对观察者的增加和删除和通知等方法.传的参数就是观察者</li><li>实例化主题, 重写增加,删除,通知等方法, 使用一个list&lt;观察者对象&gt;.</li><li>测试的时候,主题增加观察者,都会进list,然后通知方法中就会遍历list,打印消息.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Solr</title>
      <link href="/2015/10/30/solr/"/>
      <url>/2015/10/30/solr/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是Solr"><a href="#一-什么是Solr" class="headerlink" title="一. 什么是Solr"></a>一. 什么是Solr</h3><ol><li>Solr是一个开源搜索平台，用于构建搜索应用程序。 它建立在Lucene(全文搜索引擎)之上。 Solr是企业级的，快速的和高度可扩展的。 使用Solr构建的应用程序非常复杂，可提供高性能。</li><li>Solr可以和Hadoop一起使用。由于Hadoop处理大量数据，Solr帮助我们从这么大的源中找到所需的信息。不仅限于搜索，Solr也可以用于存储目的。像其他NoSQL数据库一样，它是一种非关系数据存储和处理技术。总之，Solr是一个可扩展的，可部署，搜索/存储引擎，优化搜索大量以文本为中心的数据。<a id="more"></a><h3 id="二-Solr安装"><a href="#二-Solr安装" class="headerlink" title="二. Solr安装"></a>二. Solr安装</h3></li><li>安装 Tomcat，解压缩即可。</li><li>解压 solr。</li><li>把 solr 下的dist目录solr-4.10.3.war部署到 Tomcat\webapps下(去掉版本号)。</li><li>启动 Tomcat解压缩 war 包</li><li>把solr下example/lib/ext 目录下的所有的 jar 包，添加到 solr 的工程中(\WEB-INF\lib目录下)。</li><li>创建一个 solrhome 。solr 下的/example/solr 目录就是一个 solrhome。复制此目录到D盘改名为solrhome  </li><li>关联 solr 及 solrhome。需要修改 solr 工程的 web.xml 文件。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;env-entry&gt;</span><br><span class="line">   &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class="line">   &lt;env-entry-value&gt;d:\solrhome&lt;/env-entry-value&gt;</span><br><span class="line">   &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class="line">&lt;/env-entry&gt;</span><br></pre></td></tr></table></figure></li></ol><p>启动 Tomcat<br><a href="http://IP:8080/solr/" target="_blank" rel="noopener">http://IP:8080/solr/</a><br><img src="http://p6hod2vhp.bkt.clouddn.com/201810302130_469.png" alt=""></p><h3 id="三-中文分析器IK-Analyzer"><a href="#三-中文分析器IK-Analyzer" class="headerlink" title="三. 中文分析器IK Analyzer"></a>三. 中文分析器IK Analyzer</h3><ul><li>IK Analyzer 是一个开源的，基亍 java 语言开发的轻量级的中文分词工具包。从 2006年 12 月推出 1.0 版开始， IKAnalyzer 已经推出了 4 个大版本。最初，它是以开源项目Luence 为应用主体的，结合词典分词和文法分析算法的中文分词组件。从 3.0 版本开始，IK 发展为面向 Java 的公用分词组件，独立亍 Lucene 项目，同时提供了对 Lucene 的默认优化实现。在 2012 版本中，IK 实现了简单的分词歧义排除算法，标志着 IK 分词器从单纯的词典分词向模拟语义分词衍化。</li></ul><h3 id="四-IK-Analyzer配置"><a href="#四-IK-Analyzer配置" class="headerlink" title="四. IK Analyzer配置"></a>四. IK Analyzer配置</h3><ol><li>把IKAnalyzer2012FF_u1.jar 添加到 solr 工程的 lib 目录下</li><li>创建WEB-INF/classes文件夹  把扩展词典、停用词词典、配置文件放到 solr 工程的 WEB-INF/classes 目录下。</li><li>修改 Solrhome 的 schema.xml 文件，配置一个 FieldType，使用 IKAnalyzer,下面相当于配置了一个bean<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=<span class="string">"text_ik"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"solr.TextField"</span>&gt;</span><br><span class="line">     &lt;analyzer <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="五-配置域"><a href="#五-配置域" class="headerlink" title="五. 配置域"></a>五. 配置域</h3><ul><li>域相当于数据库的表字段，用户存放数据，因此用户根据业务需要去定义相关的Field（域），一般来说，每一种对应着一种数据，用户对同一种数据进行相同的操作。<br>域的常用属性：<br>| 属性     |   含义 |<br>| :——– |——–:|<br>|name| 指定域的名称|<br>|type|指定域的类型|<br>|indexed|是否索引|<br>|stored|是否存储|<br>|required|是否必须|<br>|multiValued|是否多值|</li></ul><ul><li>修改solrhome的schema.xml 文件  设置业务系统 Field<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=<span class="string">"item_goodsid"</span> type=<span class="string">"long"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_title"</span> type=<span class="string">"text_ik"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_price"</span> type=<span class="string">"double"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_image"</span> type=<span class="string">"string"</span> indexed=<span class="string">"false"</span> stored=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_category"</span> type=<span class="string">"string"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_seller"</span> type=<span class="string">"text_ik"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;field name=<span class="string">"item_brand"</span> type=<span class="string">"string"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="六-复制域"><a href="#六-复制域" class="headerlink" title="六. 复制域"></a>六. 复制域</h3><ul><li>复制域的作用在于将某一个Field中的数据复制到另一个域中</li><li>他是不需要存储的,逻辑组合起来基它域信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=<span class="string">"item_keywords"</span> type=<span class="string">"text_ik"</span> indexed=<span class="string">"true"</span> stored=<span class="string">"false"</span> multiValued=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_title"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_category"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_seller"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br><span class="line">&lt;copyField source=<span class="string">"item_brand"</span> dest=<span class="string">"item_keywords"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="七-动态域"><a href="#七-动态域" class="headerlink" title="七. 动态域"></a>七. 动态域</h3><ul><li>当我们需要动态扩充字段时，我们需要使用动态域。比如规格的值是不确定的，所以我们需要使用动态域来实现。需要实现的效果如下：使用一个map来实现.<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810302142_233.png" alt=""></li><li><code>&lt;dynamicField name=&quot;item_spec_*&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</code></li></ul><h3 id="八-Spring-Data-Solr简介"><a href="#八-Spring-Data-Solr简介" class="headerlink" title="八. Spring Data Solr简介"></a>八. Spring Data Solr简介</h3><p> Solr就是为了方便Solr的开发所研制的一个框架，其底层是对SolrJ（官方API）的封装。      </p><ol><li>创建maven工程SpringDataSolrDemo，pom.xml中引入依赖<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-solr&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-在src-main-resources下创建-applicationContext-solr-xml"><a href="#2-在src-main-resources下创建-applicationContext-solr-xml" class="headerlink" title="2. 在src/main/resources下创建  applicationContext-solr.xml"></a>2. 在src/main/resources下创建  applicationContext-solr.xml</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- solr服务器地址 --&gt;</span><br><span class="line">&lt;solr:solr-server id=<span class="string">"solrServer"</span> url=<span class="string">"http://127.0.0.1:8080/solr"</span> /&gt;</span><br><span class="line">&lt;!-- solr模板，使用solr模板可对索引库进行CRUD的操作 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"solrTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.data.solr.core.SolrTemplate"</span>&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">"solrServer"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="八-Field-注解"><a href="#八-Field-注解" class="headerlink" title="八. @Field 注解"></a>八. @Field 注解</h3><p>TbItem实体类,属性使用@Field注解标识。如果属性与配置文件定义的域名称不一致，需要在注解中指定域名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_price"</span>)</span><br><span class="line"><span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_image"</span>)</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_goodsid"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long goodsId;</span><br></pre></td></tr></table></figure></p><h3 id="九-增加（修改）"><a href="#九-增加（修改）" class="headerlink" title="九. 增加（修改）"></a>九. 增加（修改）</h3><ul><li>修改是先删除再增加<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=<span class="string">"classpath:applicationContext-solr.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTemplate</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SolrTemplate solrTemplate;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItem item=<span class="keyword">new</span> TbItem();</span><br><span class="line">item.setId(<span class="number">1L</span>);</span><br><span class="line">item.setBrand(<span class="string">"华为"</span>);</span><br><span class="line">item.setCategory(<span class="string">"手机"</span>);</span><br><span class="line">item.setGoodsId(<span class="number">1L</span>);</span><br><span class="line">item.setSeller(<span class="string">"华为2号专卖店"</span>);</span><br><span class="line">item.setTitle(<span class="string">"华为Mate9"</span>);</span><br><span class="line">item.setPrice(<span class="keyword">new</span> BigDecimal(<span class="number">2000</span>));</span><br><span class="line">solrTemplate.saveBean(item);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十-按主键查询"><a href="#十-按主键查询" class="headerlink" title="十. 按主键查询"></a>十. 按主键查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItem item = solrTemplate.getById(<span class="number">1</span>, TbItem.class);</span><br><span class="line">System.out.println(item.getTitle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一-按主键删除"><a href="#十一-按主键删除" class="headerlink" title="十一. 按主键删除"></a>十一. 按主键删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">solrTemplate.deleteById(<span class="string">"1"</span>);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十二-分页查询"><a href="#十二-分页查询" class="headerlink" title="十二. 分页查询"></a>十二. 分页查询</h3><ul><li>批量添加使用如下方法<br><code>solrTemplate.saveBeans(list);</code></li><li>编写分页查询测试代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">Query query=<span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">query.setOffset(<span class="number">20</span>);<span class="comment">//开始索引（默认0）</span></span><br><span class="line">query.setRows(<span class="number">20</span>);<span class="comment">//每页记录数(默认10)</span></span><br><span class="line">ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span><br><span class="line">System.out.println(<span class="string">"总记录数："</span>+page.getTotalElements());</span><br><span class="line">List&lt;TbItem&gt; list = page.getContent();</span><br><span class="line">showList(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示记录数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showList</span><span class="params">(List&lt;TbItem&gt; list)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(TbItem item:list)&#123;</span><br><span class="line">System.out.println(item.getTitle() +item.getPrice());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十三-条件查询"><a href="#十三-条件查询" class="headerlink" title="十三. 条件查询"></a>十三. 条件查询</h3><ul><li>Criteria 用于对条件的封装：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageQueryMutil</span><span class="params">()</span></span>&#123;</span><br><span class="line">Query query=<span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">Criteria criteria=<span class="keyword">new</span> Criteria(<span class="string">"item_title"</span>).contains(<span class="string">"2"</span>);</span><br><span class="line">criteria=criteria.and(<span class="string">"item_title"</span>).contains(<span class="string">"5"</span>);</span><br><span class="line">query.addCriteria(criteria);</span><br><span class="line"><span class="comment">//query.setOffset(20);//开始索引（默认0）</span></span><br><span class="line"><span class="comment">//query.setRows(20);//每页记录数(默认10)</span></span><br><span class="line">ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span><br><span class="line">System.out.println(<span class="string">"总记录数："</span>+page.getTotalElements());</span><br><span class="line">List&lt;TbItem&gt; list = page.getContent();</span><br><span class="line">showList(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十四-删除全部数据"><a href="#十四-删除全部数据" class="headerlink" title="十四. 删除全部数据"></a>十四. 删除全部数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">Query query=<span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">solrTemplate.delete(query);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十五-项目中运用"><a href="#十五-项目中运用" class="headerlink" title="十五.项目中运用"></a>十五.项目中运用</h3><h6 id="1-两种导入方法-第一种使用dataimpor-第二种使用工具类进行导入"><a href="#1-两种导入方法-第一种使用dataimpor-第二种使用工具类进行导入" class="headerlink" title="1. 两种导入方法,第一种使用dataimpor,第二种使用工具类进行导入"></a>1. 两种导入方法,第一种使用dataimpor,第二种使用工具类进行导入</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrUtil</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TbItemMapper itemMapper;</span><br><span class="line"><span class="comment">//导入商品数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importItemData</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItemExample example=<span class="keyword">new</span> TbItemExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">//已审核</span></span><br><span class="line">List&lt;TbItem&gt; itemList = itemMapper.selectByExample(example);</span><br><span class="line">System.out.println(<span class="string">"===商品列表==="</span>);</span><br><span class="line"><span class="keyword">for</span>(TbItem item:itemList)&#123;</span><br><span class="line">System.out.println(item.getTitle());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"===结束==="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath*:spring/applicationContext*.xml"</span>);</span><br><span class="line">SolrUtil solrUtil=  (SolrUtil) context.getBean(<span class="string">"solrUtil"</span>);</span><br><span class="line">solrUtil.importItemData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-数据导入Solr索引库"><a href="#2-数据导入Solr索引库" class="headerlink" title="2. 数据导入Solr索引库"></a>2. 数据导入Solr索引库</h6><ol><li>实体类<br>（1）将demo工程中添加了@Field注解的实体类拷贝到pinyougou-pojo中<br>（2）在pojo中引入spring-data-solr依赖<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-data-solr&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-添加Solr配置文件"><a href="#3-添加Solr配置文件" class="headerlink" title="3. 添加Solr配置文件"></a>3. 添加Solr配置文件</h5><ul><li>添加applicationContext-solr.xml到spring目录<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- solr服务器地址 --&gt;</span><br><span class="line">&lt;solr:solr-server id=<span class="string">"solrServer"</span> url=<span class="string">"http://127.0.0.1:8080/solr"</span> /&gt;</span><br><span class="line">&lt;!-- solr模板，使用solr模板可对索引库进行CRUD的操作 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"solrTemplate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.data.solr.core.SolrTemplate"</span>&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">"solrServer"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-调用模板类导入solr"><a href="#4-调用模板类导入solr" class="headerlink" title="4. 调用模板类导入solr"></a>4. 调用模板类导入solr</h5><h5 id="5-规格导入动态域"><a href="#5-规格导入动态域" class="headerlink" title="5. 规格导入动态域"></a>5. 规格导入动态域</h5><ol><li>@Dynamic注解,修改TbItem.java ，添加动态域属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dynamic</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"item_spec_*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; specMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getSpecMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> specMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpecMap</span><span class="params">(Map&lt;String, String&gt; specMap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.specMap = specMap;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">##### 6. 修改导入工具</span><br><span class="line">- SolrUtil.java,引入fastJSON依赖</span><br><span class="line">```java</span><br><span class="line"><span class="comment">//导入商品数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importItemData</span><span class="params">()</span></span>&#123;</span><br><span class="line">TbItemExample example=<span class="keyword">new</span> TbItemExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">//已审核</span></span><br><span class="line">List&lt;TbItem&gt; itemList = itemMapper.selectByExample(example);</span><br><span class="line">System.out.println(<span class="string">"===商品列表==="</span>);</span><br><span class="line"><span class="keyword">for</span>(TbItem item:itemList)&#123;</span><br><span class="line">Map specMap= JSON.parseObject(item.getSpec());<span class="comment">//将spec字段中的json字符串转换为map</span></span><br><span class="line">item.setSpecMap(specMap);<span class="comment">//给带注解的字段赋值</span></span><br><span class="line">System.out.println(item.getTitle());</span><br><span class="line">&#125;</span><br><span class="line">solrTemplate.saveBeans(itemList);</span><br><span class="line">solrTemplate.commit();</span><br><span class="line">System.out.println(<span class="string">"===结束==="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solr </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之三(dao配置2)</title>
      <link href="/2015/10/28/web%20xml%E4%B9%8B%E5%9B%9B(dao%20%E4%BA%8C)/"/>
      <url>/2015/10/28/web%20xml%E4%B9%8B%E5%9B%9B(dao%20%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h3 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h3><ol><li>resultMap可以实现将查询结果映射为复杂类型的pojo，比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。</li></ol><ul><li>使用association完成一对一映射需要配置一个resultMap，过程有点复杂，如果要实现延迟加载就只能用resultMap实现 ，如果为了方便对关联信息进行解析，也可以用association将关联信息映射到pojo中方便解析。</li></ul><ol start="2"><li>resultType可以指定pojo将查询结果映射为pojo，但需要pojo的属性名和sql查询的列名一致方可映射成功。<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810280948_292.png" alt=""></li></ol><ul><li><code>&lt;id /&gt;</code>：此属性表示查询结果集的唯一标识，非常重要。如果是多个字段为复合唯一约束则定义多个<code>&lt;id /&gt;</code>。</li><li>Property：表示User类的属性。</li><li>Column：表示sql查询出来的字段名。</li><li>Column和property放在一块儿表示将sql查询出来的字段映射到指定的pojo类属性上。</li><li><code>&lt;result /&gt;</code>：普通结果，即pojo的属性。<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><h4 id="1-if"><a href="#1-if" class="headerlink" title="1. if"></a>1. if</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递pojo综合查询用户信息 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findUserList"</span> parameterType=<span class="string">"user"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">select * from user </span><br><span class="line">where <span class="number">1</span>=<span class="number">1</span> </span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"id!=null"</span>&gt;</span><br><span class="line">and id=#&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span>&gt;</span><br><span class="line">and username like <span class="string">'%$&#123;username&#125;%'</span></span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-where"><a href="#2-where" class="headerlink" title="2. where"></a>2. where</h4><p><code>&lt;where /&gt;</code>可以自动处理第一个and。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserList"</span> parameterType=<span class="string">"user"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">select * from user </span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"id!=null and id!=''"</span>&gt;</span><br><span class="line">and id=#&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span>&gt;</span><br><span class="line">and username like <span class="string">'%$&#123;username&#125;%'</span></span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-foreach"><a href="#3-foreach" class="headerlink" title="3. foreach"></a>3. foreach</h3><ul><li>传入多个id查询用户信息，用下边两个sql实现：</li></ul><p><code>SELECT * FROM USERS WHERE username LIKE &#39;%张%&#39; AND (id =10 OR id =89 OR id=16)</code><br><code>SELECT * FROM USERS WHERE username LIKE &#39;%张%&#39;  id IN (10,89,16)</code></p><ul><li>pojo类</li><li><p>在pojo中定义list属性ids存储多个用户id，并添加getter/setter方法<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810280958_785.png" alt=""></p></li><li><p>mapper.xml写法</p></li><li>collection  循环部分</li><li>item 循环单元</li><li>open 循环开始添加的</li><li>close 循环结束添加的</li><li>separator 现个循环单元间添加的,比如逗号</li><li><img src="http://p6hod2vhp.bkt.clouddn.com/201810281004_496.png" alt=""></li></ul><h3 id="4-SQL片断"><a href="#4-SQL片断" class="headerlink" title="4. SQL片断"></a>4. SQL片断</h3><ul><li>Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的</li><li><p>将where条件抽取出来：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id=<span class="string">"query_user_where"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"id!=null and id!=''"</span>&gt;</span><br><span class="line">and id=#&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"username!=null and username!=''"</span>&gt;</span><br><span class="line">and username like <span class="string">'%$&#123;username&#125;%'</span></span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用include引用，注意：如果引用其它mapper.xml的sql片段，则在引用时需要加上namespace</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserList"</span> parameterType=<span class="string">"user"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">select * from user </span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;include refid=<span class="string">"query_user_where"</span>/&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-一对一关联映射"><a href="#5-一对一关联映射" class="headerlink" title="5.一对一关联映射"></a>5.一对一关联映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  orders.*,</span><br><span class="line">  user.username,</span><br><span class="line">  user.address</span><br><span class="line">FROM</span><br><span class="line">  orders,</span><br><span class="line">  user </span><br><span class="line">WHERE orders.user_id = user.id</span><br></pre></td></tr></table></figure><ul><li><p>ResultType(方法一)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 查询所有订单信息 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findOrdersList"</span> resultType=<span class="string">"cn.itheima.mybatis.po.OrdersCustom"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">orders.*,</span><br><span class="line">user.username,</span><br><span class="line">user.address</span><br><span class="line">FROM</span><br><span class="line">orders,user</span><br><span class="line">WHERE orders.user_id = user.id </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p>ResultMap(方法二)</p></li><li>这里resultMap指定orderUserResultMap。</li><li>association：表示进行关联查询单条记录</li><li>property：表示关联查询的结果存储在cn.itheima.mybatis.po.Orders的user属性中</li><li>javaType：表示关联查询的结果类型</li><li><code>&lt;id property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</code>：查询结果的user_id列对应关联对象的id属性，这里是<code>&lt;id /&gt;</code>表示user_id是关联查询对象的唯一标识。</li><li><code>&lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</code>：查询结果的username列对应关联对象的username属性。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 查询订单关联用户信息使用resultmap --&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">"Orders"</span> id=<span class="string">"orderUserResultMap"</span>&gt;</span><br><span class="line">&lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"user_id"</span> property=<span class="string">"userId"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"number"</span> property=<span class="string">"number"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"createtime"</span> property=<span class="string">"createtime"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"note"</span> property=<span class="string">"note"</span>/&gt;</span><br><span class="line">&lt;!-- 一对一关联映射 --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">property:Orders对象的user属性</span><br><span class="line">javaType：user属性对应 的类型</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;association property=<span class="string">"user"</span> javaType=<span class="string">"cn.itheima.po.User"</span>&gt;</span><br><span class="line">&lt;!-- column:user表的主键对应的列  property：user对象中id属性--&gt;</span><br><span class="line">&lt;id column=<span class="string">"user_id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"username"</span> property=<span class="string">"username"</span>/&gt;</span><br><span class="line">&lt;result column=<span class="string">"address"</span> property=<span class="string">"address"</span>/&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">"findOrdersWithUserResultMap"</span> resultMap=<span class="string">"orderUserResultMap"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">o.id,</span><br><span class="line">o.user_id,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note,</span><br><span class="line">u.username,</span><br><span class="line">u.address</span><br><span class="line">FROM</span><br><span class="line">orders o</span><br><span class="line">JOIN `user` u ON u.id = o.user_id</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-一对多关联映射"><a href="#6-一对多关联映射" class="headerlink" title="6.一对多关联映射"></a>6.一对多关联映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">u.*, o.id oid,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note</span><br><span class="line">FROM</span><br><span class="line">`user` u</span><br><span class="line">LEFT JOIN orders o ON u.id = o.user_id</span><br></pre></td></tr></table></figure><p>mapper.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"user"</span> id=<span class="string">"userOrderResultMap"</span>&gt;</span><br><span class="line">&lt;!-- 用户信息映射 --&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"birthday"</span> column=<span class="string">"birthday"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"sex"</span> column=<span class="string">"sex"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"address"</span> column=<span class="string">"address"</span>/&gt;</span><br><span class="line">&lt;!-- 一对多关联映射 --&gt;</span><br><span class="line">&lt;collection property=<span class="string">"orders"</span> ofType=<span class="string">"orders"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"oid"</span>/&gt;</span><br><span class="line">      &lt;!--用户id已经在user对象中存在，此处可以不设置--&gt;</span><br><span class="line">&lt;!-- &lt;result property=<span class="string">"userId"</span> column=<span class="string">"id"</span>/&gt; --&gt;</span><br><span class="line">&lt;result property=<span class="string">"number"</span> column=<span class="string">"number"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"createtime"</span> column=<span class="string">"createtime"</span>/&gt;</span><br><span class="line">&lt;result property=<span class="string">"note"</span> column=<span class="string">"note"</span>/&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">"getUserOrderList"</span> resultMap=<span class="string">"userOrderResultMap"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">u.*, o.id oid,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note</span><br><span class="line">FROM</span><br><span class="line">`user` u</span><br><span class="line">LEFT JOIN orders o ON u.id = o.user_id</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><ul><li>collection部分定义了用户关联的订单信息。表示关联查询结果集</li><li>property=”orders”：关联查询的结果集存储在User对象的上哪个属性。</li><li>ofType=”orders”：指定关联查询的结果集中的对象类型即List中的对象类型。此处可以使用别名，也可以使用全限定名。</li><li><code>&lt;id /&gt;</code>及<code>&lt;result/&gt;</code>的意义同一对一查询。<h3 id="7-mybatis一级缓存和二级缓存"><a href="#7-mybatis一级缓存和二级缓存" class="headerlink" title="7. mybatis一级缓存和二级缓存"></a>7. mybatis一级缓存和二级缓存</h3></li><li>mybatis一级缓存是一个SqlSession级别，sqlsession只能访问自己的一级缓存的数据，二级缓存是跨sqlSession，是mapper级别的缓存，对于mapper级别的缓存不同的sqlsession是可以共享的。<h3 id="8-应用场景resultType、resultMap"><a href="#8-应用场景resultType、resultMap" class="headerlink" title="8.应用场景resultType、resultMap"></a>8.应用场景resultType、resultMap</h3></li></ul><ol><li>使用association和collection完成一对一和一对多高级映射。</li></ol><ul><li>association：<br>作用：将关联查询信息映射到一个pojo类中。<br>场合：为了方便获取关联信息可以使用association将关联订单映射为pojo，比如：查询订单及关联用户信息。</li><li>collection：<br>作用：将关联查询信息映射到一个list集合中。<br>场合：为了方便获取关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块和功能，可使用collection将模块和功能列表映射到list中。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dao.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之三(dao配置)</title>
      <link href="/2015/10/27/web%20xml%E4%B9%8B%E5%9B%9B(dao)/"/>
      <url>/2015/10/27/web%20xml%E4%B9%8B%E5%9B%9B(dao)/</url>
      
        <content type="html"><![CDATA[<h3 id="1-mybatis介绍"><a href="#1-mybatis介绍" class="headerlink" title="1. mybatis介绍"></a>1. mybatis介绍</h3><ul><li>MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</li><li>Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</li></ul><h3 id="2-解决jdbc开发存在的诸多问题"><a href="#2-解决jdbc开发存在的诸多问题" class="headerlink" title="2. 解决jdbc开发存在的诸多问题"></a>2. 解决jdbc开发存在的诸多问题</h3><ol><li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li></ol><ul><li>解决：在SqlMapConfig.xml中配置数据链接池，使用连接池管理数据库链接。</li></ul><ol start="2"><li>Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</li></ol><ul><li>解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。</li></ul><ol start="3"><li>向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。</li></ol><ul><li>解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型.</li></ul><ol start="4"><li>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。</li></ol><ul><li>解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型。</li></ul><ol start="5"><li>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。</li></ol><ul><li>解决：Mybatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。</li></ul><h3 id="3-JDBC开发步骤"><a href="#3-JDBC开发步骤" class="headerlink" title="3. JDBC开发步骤"></a>3. JDBC开发步骤</h3><p>1、加载数据库驱动<br>2、创建并获取数据库链接<br>3、创建jdbc statement对象<br>4、设置sql语句<br>5、设置sql语句中的参数(使用preparedStatement)<br>6、通过statement执行sql并获取结果<br>7、对sql执行结果进行解析处理<br>8、释放资源(resultSet、preparedstatement、connection)</p><ul><li>代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//加载数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">connection =  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//定义sql语句 ?表示占位符</span></span><br><span class="line">String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line"><span class="comment">//获取预处理statement</span></span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line"><span class="comment">//向数据库发出sql执行查询，查询出结果集</span></span><br><span class="line">resultSet =  preparedStatement.executeQuery();</span><br><span class="line"><span class="comment">//遍历查询结果集</span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"  "</span>+resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">resultSet.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preparedStatement.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-mybatis架构"><a href="#4-mybatis架构" class="headerlink" title="4. mybatis架构"></a>4. mybatis架构</h3><ol><li><p>mybatis配置<br>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。<br>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</p></li><li><p>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</p></li><li>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</li><li>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</li><li>Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</li><li>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</li><li>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810272200_223.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201810272203_277.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201810272206_215.png" alt=""><h3 id="5-与spring整合后的配置文件"><a href="#5-与spring整合后的配置文件" class="headerlink" title="5. 与spring整合后的配置文件"></a>5. 与spring整合后的配置文件</h3></li></ol><ul><li>SqlMapConfig.xml中配置的内容和顺序如下：</li></ul><ol><li>properties（属性）</li><li>settings（全局配置参数）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境集合属性对象）</li><li>environment（环境子属性对象）</li><li>transactionManager（事务管理）</li><li>dataSource（数据源）</li><li>mappers（映射器）</li></ol><ul><li>mybatis支持别名：<br>| 别名     |    映射的类型 |<br>| :——– | ——–:|<br>| _byte  | byte  |<br>|_long     |long |<br>|_short     |short |<br>|_int     |int |<br>|_integer |    int |<br>|_double |    double |<br>|_float |    float ||<br>|_boolean |    boolean |<br>|string |    String |<br>|byte     |Byte |<br>|long |    Long |<br>|short |    Short |<br>|int |    Integer |<br>|integer |    Integer |<br>|double |    Double |<br>|float |    Float |<br>|boolean |    Boolean |<br>|date |    Date |<br>|decimal |    BigDecimal |<br>|bigdecimal |    BigDecimal |<br>|map|    Map|</li></ul><p>自定义别名：在SqlMapConfig.xml中配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">&lt;!-- 单个别名定义 --&gt;</span><br><span class="line">&lt;typeAlias alias=<span class="string">"user"</span> type=<span class="string">"cn.itcast.mybatis.po.User"</span>/&gt;</span><br><span class="line">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"cn.itcast.mybatis.po"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"其它包"</span>/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure></p><ul><li>Mapper配置的几种方法：<ul><li>使用相对于类路径的资源<br>如：<code>&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;</code></li><li>使用mapper接口类路径<br>如：<code>&lt;mapper class=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;/&gt;</code></li><li>注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。</li></ul></li><li>注册指定包下的所有mapper接口<ul><li>如：<code>&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code></li><li>注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。有下面两个要求</li><li>1、mapper映射文件和接口在同一个目录下</li><li>2、mapper映射文件的名称和接口名称一致。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 加载配置文件 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span><br><span class="line">destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"10"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"5"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- mapper配置 --&gt;</span><br><span class="line">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis/SqlMapConfig.xml"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置Mapper扫描器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.que.springmvc.mapper"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-未与spring整合开发步骤"><a href="#5-未与spring整合开发步骤" class="headerlink" title="5. 未与spring整合开发步骤"></a>5. 未与spring整合开发步骤</h3><ol><li>SqlMapConfig.xml文件</li></ol><ul><li>SqlMapConfig.xml是mybatis核心配置文件，配置内容为数据源、事务管理。</li></ul><ol start="2"><li>po类</li></ol><ul><li>Po类作为mybatis进行sql映射使用，po类通常与数据库表对应</li></ul><ol start="3"><li>sql映射文件</li></ol><ul><li>在classpath下的sqlmap目录下创建sql映射文件Users.xml<code>&lt;mapper namespace=&quot;test&quot;&gt;&lt;/mapper&gt;</code></li><li>namespace ：命名空间，用于隔离sql语句，后面会讲另一层非常重要的作用(sql片段)。</li></ul><ol start="4"><li>加载映射文件</li></ol><ul><li>mybatis框架需要加载映射文件，将Users.xml添加在SqlMapConfig.xml，如下：<br><code>&lt;mappers&gt; &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt; &lt;/mappers&gt;</code></li></ul><ol start="5"><li>在映射文件中写SQL语句</li></ol><ul><li>比如在user.xml中</li><li><p>parameterType：定义输入到sql中的映射类型，#{id}表示使用preparedstatement设置占位符号并将输入变量id传到sql。<br>resultType：定义结果映射类型。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 根据id获取用户信息 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findUserById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"cn.itheima.mybatis.po.User"</span>&gt;</span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>${}</code>表示拼接sql串，通过<code>${}</code>可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换， ${}可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，<strong><code>${}</code>括号中只能是value</strong>。对于多参数, 需要使用pojo来封装参数。</p></li><li>比如<code>select * from user where username like &#39;%${value}%&#39;</code></li><li><code>#{}</code>表示一个占位符号，通过<code>#{}</code>可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，<code>#{}</code>可以有效防止sql注入。 <code>#{}</code>可以接收简单类型值或pojo属性值。 如果parameterType传输单个简单类型值，<code>#{}</code>括号中可以是value或其它名称</li><li>parameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。</li><li>resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。</li><li>测试代码</li></ul><ol><li>创建一个SQLSessionFactoryBuilder对象。</li><li>加载配置文件。</li><li>创建SQLSessionFactory对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 第一步：创建一个SQLSessionFactoryBuilder对象。</span></span><br><span class="line">SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">// 第二步：加载配置文件。</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"><span class="comment">// 第三步：创建SQLSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-主键返回"><a href="#6-主键返回" class="headerlink" title="6. 主键返回"></a>6. 主键返回</h3><ul><li>mapper代理的开发规则：<ol><li>namespace必须时候接口的全限定名</li><li>Statementid必须和接口的方法名称一致</li><li>接口方法的参数类型要和parameterType要一致</li><li>接口方法的返回值类型要和resultType一致</li></ol></li><li>添加selectKey实现将主键返回</li><li>keyProperty:返回的主键存储在pojo中的哪个属性</li><li>order：selectKey的执行顺序，是相对与insert语句来说，由于mysql的自增原理执行完insert语句之后才将主键生成，所以这里selectKey的执行顺序为after</li><li>resultType:返回的主键是什么类型</li><li>LAST_INSERT_ID():是mysql的函数，是线程安全的, 在当前事务中查找, 返回auto_increment自增列新记录id值。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insertUser"</span> parameterType=<span class="string">"cn.itheima.mybatis.po.User"</span>&gt;</span><br><span class="line">&lt;!-- selectKey将主键返回，需要再返回 --&gt;</span><br><span class="line">&lt;selectKey keyProperty=<span class="string">"id"</span> order=<span class="string">"AFTER"</span> resultType=<span class="string">"java.lang.Integer"</span>&gt;</span><br><span class="line"><span class="function">select <span class="title">LAST_INSERT_ID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">   insert into <span class="title">user</span><span class="params">(username,birthday,sex,address)</span></span></span><br><span class="line"><span class="function">    <span class="title">values</span><span class="params">(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span></span>;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-生产环境代码"><a href="#7-生产环境代码" class="headerlink" title="7. 生产环境代码"></a>7. 生产环境代码</h3><ul><li><p>applicationContext-dao</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span> xmlns:jdbc=<span class="string">"http://www.springframework.org/schema/jdbc"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开启AOP监听 只对当前配置文件有效 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy expose-proxy=<span class="string">"true"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 参考：https:<span class="comment">//github.com/alibaba/druid/wiki/DruidDataSource配置属性列表， https://github.com/alibaba/druid/wiki/连接泄露检测， </span></span><br><span class="line">https:<span class="comment">//github.com/alibaba/druid/wiki/常见问题 --&gt;</span></span><br><span class="line">&lt;bean name=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span><br><span class="line">init-method=<span class="string">"init"</span> destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- initialSize默认<span class="number">0</span>：初始化时建立物理连接的个数 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"initialSize"</span> value=<span class="string">"$&#123;druid.initialSize&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- maxActive默认<span class="number">8</span>：最大连接池数量 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"$&#123;druid.maxActive&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- minIdle默认<span class="number">8</span>：最小连接池数量 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"minIdle"</span> value=<span class="string">"$&#123;druid.minIdle&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- maxWait：获取连接时最大等待时间，单位毫秒。 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为<span class="keyword">true</span>使用非公平锁。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxWait"</span> value=<span class="string">"$&#123;druid.maxWait&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"validationQuery"</span> value=<span class="string">"$&#123;jdbc.validationQuery&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- testOnBorrow默认<span class="keyword">true</span>：申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"testOnBorrow"</span> value=<span class="string">"$&#123;druid.testOnBorrow&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- testOnReturn默认<span class="keyword">false</span>：归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"testOnReturn"</span> value=<span class="string">"$&#123;druid.testOnReturn&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- testWhileIdle默认<span class="keyword">false</span>：建议配置为<span class="keyword">true</span>，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"testWhileIdle"</span> value=<span class="string">"$&#123;druid.testWhileIdle&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- timeBetweenEvictionRunsMillis：配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"timeBetweenEvictionRunsMillis"</span> value=<span class="string">"$&#123;druid.timeBetweenEvictionRunsMillis&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- minEvictableIdleTimeMillis：配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"minEvictableIdleTimeMillis"</span> value=<span class="string">"$&#123;druid.minEvictableIdleTimeMillis&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- 当发生连接泄漏时，使用RemoveAbandanded相关配置，用来关闭长时间不使用的连接。 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"removeAbandoned"</span> value=<span class="string">"$&#123;druid.removeAbandoned&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- removeAbandonedTimeout：单位秒 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"removeAbandonedTimeout"</span> value=<span class="string">"$&#123;druid.removeAbandonedTimeout&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"logAbandoned"</span> value=<span class="string">"$&#123;druid.logAbandoned&#125;"</span> /&gt;</span><br><span class="line">&lt;!-- 配置监控统计拦截的filters，属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall --&gt;</span><br><span class="line">&lt;property name=<span class="string">"filters"</span> value=<span class="string">"$&#123;druid.filters&#125;"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;property name="configLocation" value="classpath:config/dev/mybatis-config.xml"&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class="line">&lt;property name="mapperLocations" value="classpath*:/mybatis/**/*Mapper.xml"&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">3.3</span>.0版本可用 - reasonable分页参数合理化，默认<span class="keyword">false</span>禁用 启用合理化时，如果pageNum&lt;<span class="number">1</span>会查询第一页，如果pageNum&gt;pages会查询最后一页 </span><br><span class="line">禁用合理化时，如果pageNum&lt;<span class="number">1</span>或pageNum&gt;pages会返回空数据 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"plugins"</span>&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"properties"</span>&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">dialect=oracle</span><br><span class="line">reasonable=<span class="keyword">false</span></span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.elsteel.dao"</span> /&gt;</span><br><span class="line">&lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- (事务管理)transaction manager --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用annotation定义事务 开启AOP监听 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span> proxy-target-<span class="class"><span class="keyword">class</span></span>=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>数据库连接配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=oracle.jdbc.driver.OracleDriver</span><br><span class="line">jdbc.url= jdbc\:oracle\:thin\:<span class="meta">@localhost</span>\:<span class="number">1521</span>\:xe</span><br><span class="line">jdbc.username=ylwlcs</span><br><span class="line">jdbc.password=ylwlcs</span><br><span class="line"></span><br><span class="line">jdbc.validationQuery=SELECT <span class="number">1</span></span><br><span class="line"></span><br><span class="line">druid.initialSize=<span class="number">1</span></span><br><span class="line">druid.maxActive=<span class="number">20</span></span><br><span class="line">druid.minIdle=<span class="number">1</span></span><br><span class="line">druid.maxWait=<span class="number">60000</span></span><br><span class="line">druid.testOnBorrow=<span class="keyword">false</span></span><br><span class="line">druid.testOnReturn=<span class="keyword">false</span></span><br><span class="line">druid.testWhileIdle=<span class="keyword">true</span></span><br><span class="line">druid.timeBetweenEvictionRunsMillis=<span class="number">60000</span></span><br><span class="line">druid.minEvictableIdleTimeMillis=<span class="number">25200000</span></span><br><span class="line">druid.removeAbandoned=<span class="keyword">true</span></span><br><span class="line">druid.removeAbandonedTimeout=<span class="number">1800</span></span><br><span class="line">druid.logAbandoned=<span class="keyword">true</span></span><br><span class="line">#wall</span><br><span class="line">druid.filters=stat</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dao.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之三(service配置)</title>
      <link href="/2015/10/26/web%20xml%E4%B9%8B%E4%B8%89(service)/"/>
      <url>/2015/10/26/web%20xml%E4%B9%8B%E4%B8%89(service)/</url>
      
        <content type="html"><![CDATA[<h3 id="applicationContext-service-xml"><a href="#applicationContext-service-xml" class="headerlink" title="applicationContext-service.xml"></a>applicationContext-service.xml</h3><ol><li>配置包扫描<br><code>&lt;context:component-scan base-package=&quot;com.que.springmvc.service&quot;/&gt;</code> </li><li>完整配置代码<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置包扫描器 --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.que.springmvc.service"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="applicationContext-trans-xml"><a href="#applicationContext-trans-xml" class="headerlink" title="applicationContext-trans.xml"></a>applicationContext-trans.xml</h3><h4 id="1-配置事物管理器"><a href="#1-配置事物管理器" class="headerlink" title="1. 配置事物管理器"></a>1. 配置事物管理器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;!-- 数据源 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="2-配置通知"><a href="#2-配置通知" class="headerlink" title="2. 配置通知"></a>2. 配置通知</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通知 --&gt;</span><br><span class="line">&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;!-- 传播行为 --&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"save*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"insert*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"delete*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"update*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"find*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"get*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><h4 id="3-配置切面"><a href="#3-配置切面" class="headerlink" title="3. 配置切面"></a>3. 配置切面</h4><ul><li><p>关于execution语法常用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. execution(public * *()) 所有的public的方法</span><br><span class="line">2. execution(* cn.que.aop.*(..)) 所有的aop包下的所有类的方法(不包含子包)</span><br><span class="line">3. execution(* cn.que.aop..*(..)) 所有的aop包及其子包下的所有类的方法 </span><br><span class="line">4. execution(* cn.que.aop.IOrderService.*(..)) IOrderService接口中定义的所有方法</span><br><span class="line">5. execution(* cn.que.aop.IOrderService+.*(..)) 匹配实现特定接口所有类的方法</span><br><span class="line">6. execution(* save*(..)) 区配所有的以save开头的方法</span><br><span class="line">7. *空格+方法路径\*+(..)这是加方法参数</span><br></pre></td></tr></table></figure></li><li><p>配置切面代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span></span><br><span class="line">pointcut=<span class="string">"execution(* com.que.springmvc.service.*.*(..))"</span> /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> service.xml trans.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之二(mvc配置)</title>
      <link href="/2015/10/26/web%20xml%E4%B9%8B%E4%BA%8C/"/>
      <url>/2015/10/26/web%20xml%E4%B9%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="一-配置文件详解"><a href="#一-配置文件详解" class="headerlink" title="一. 配置文件详解"></a>一. 配置文件详解</h3><ol><li>@RequestBody</li></ol><ul><li>该注解用于读取http请求的内容(字符串)，通过springmvc提供的HttpMessageConverter接口将读到的内容转换为json、xml等格式的数据并绑定到controller方法的参数上。</li><li>@RequestBody注解实现接收http请求的json数据，将json数据转换为java对象</li></ul><ol start="2"><li>@ResponseBody</li></ol><ul><li>响应json数据，把java对象转换成json并响应</li></ul><h4 id="1-配置包扫描"><a href="#1-配置包扫描" class="headerlink" title="1. 配置包扫描"></a>1. 配置包扫描</h4><p><code>&lt;context:component-scan base-package=&quot;com.que.springmvc.controller&quot;/&gt;</code></p><h4 id="2-配置注解驱动"><a href="#2-配置注解驱动" class="headerlink" title="2. 配置注解驱动"></a>2. 配置注解驱动</h4><p>如果配置此标签可以不用配置处理器映射器和适配器<br><code>&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</code></p><h4 id="3-转换器配置"><a href="#3-转换器配置" class="headerlink" title="3. 转换器配置"></a>3. 转换器配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 转换器的配置 --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"conversionService"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.converter.DateConverter"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="4-配置视图解析器"><a href="#4-配置视图解析器" class="headerlink" title="4. 配置视图解析器"></a>4. 配置视图解析器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="5-全局异常处理器"><a href="#5-全局异常处理器" class="headerlink" title="5. 全局异常处理器"></a>5. 全局异常处理器</h4><p><code>&lt;bean class=&quot;com.que.springmvc.exception.GlobalExceptionResolver&quot;/&gt;</code></p><h4 id="6-配置多媒体文件解析器-文件上传"><a href="#6-配置多媒体文件解析器-文件上传" class="headerlink" title="6. 配置多媒体文件解析器(文件上传)"></a>6. 配置多媒体文件解析器(文件上传)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"multipartResolver"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br><span class="line">&lt;!-- 设置上传文件的最大尺寸为<span class="number">5</span>MB --&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxUploadSize"</span>&gt;</span><br><span class="line">&lt;value&gt;5242880&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="7-配置静态资源映射器"><a href="#7-配置静态资源映射器" class="headerlink" title="7.配置静态资源映射器"></a>7.配置静态资源映射器</h4><ul><li>如果在DispatcherServlet中设置url-pattern为 /则必须对静态资源进行访问处理。<br>spring mvc 的&lt;mvc:resources mapping=”” location=””&gt;实现对静态资源进行映射访问。<br>如下是对js文件访问配置：<br><code>&lt;mvc:resources location=&quot;/js/&quot; mapping=&quot;/js/**&quot;/&gt;</code></li><li>另外一种方法:<br>容器默认DefaultServletHandler处理所有静态内容和无RequestMapping处理的URL配置了下面这个, 上面的放行静态资源就不需要了<br><code>&lt;mvc:default-servlet-handler /&gt;</code></li></ul><h4 id="8-配置拦截器"><a href="#8-配置拦截器" class="headerlink" title="8.配置拦截器"></a>8.配置拦截器</h4><ul><li><p>. 针对某种bean配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"interceptors"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor2"</span>/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor2"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>. 针对全局配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  &lt;mvc:interceptors&gt;</span><br><span class="line">按照配置的顺序执行</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.interceptor.Interceptor1"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.interceptor.Interceptor2"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="com.que.springmvc.interceptor.LoginInterceptor"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-配置拦截器-java类"><a href="#9-配置拦截器-java类" class="headerlink" title="9. 配置拦截器(java类)"></a>9. 配置拦截器(java类)</h4><h5 id="1-实现HandlerInterceptor接口"><a href="#1-实现HandlerInterceptor接口" class="headerlink" title="1. 实现HandlerInterceptor接口"></a>1. 实现HandlerInterceptor接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.que.springmvc.interceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String uri = request.getRequestURL().toString();</span><br><span class="line"><span class="keyword">if</span> (uri.contains(<span class="string">"login"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a)拦截用户请求，判断用户是否登录</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">Object username = session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// b)如果用户已经登录。放行</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// c)如果用户未登录，跳转到登录页面。</span></span><br><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/user/showlogin"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//handle执行之后，返回ModelAndView之前。</span></span><br><span class="line">System.out.println(<span class="string">"Interceptor1 postHandle......"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 返回ModelAndView之后。</span></span><br><span class="line"><span class="comment">//可以在此处理异常</span></span><br><span class="line">System.out.println(<span class="string">"Interceptor1 afterCompletion......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>方法preHandle: 顾名思义，该方法将在请求处理之前进行调用。SpringMVC 中的Interceptor 是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。每个Interceptor 的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor 中的preHandle 方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。<strong>该方法的返回值是布尔值Boolean类型的，当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法。</strong></li><li>方法postHandle:<br>由preHandle 方法的解释我们知道这个方法包括后面要说到的afterCompletion 方法都只能是在当前所属的Interceptor 的preHandle 方法的返回值为true 时才能被调用。postHandle 方法，顾名思义就是在当前请求进行处理之后，<strong>也就是Controller 方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。postHandle 方法被调用的方向跟preHandle 是相反的，也就是说先声明的Interceptor 的postHandle 方法反而会后执行</strong>，这和Struts2 里面的Interceptor 的执行过程有点类型。Struts2 里面的Interceptor 的执行过程也是链式的，只是在Struts2 里面需要手动调用ActionInvocation 的invoke 方法来触发对下一个Interceptor 或者是Action 的调用，然后每一个Interceptor 中在invoke 方法调用之前的内容都是按照声明顺序执行的，而invoke 方法之后的内容就是反向的。</li><li>方法afterCompletion<br>该方法也是需要当前对应的Interceptor 的preHandle 方法的返回值为true 时才会执行。顾名思义，该方法将在整个请求结束之后，<strong>也就是在DispatcherServlet 渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的</strong>。</li></ol><hr><h5 id="2-实现WebRequestInterceptor接口"><a href="#2-实现WebRequestInterceptor接口" class="headerlink" title="2. 实现WebRequestInterceptor接口"></a>2. 实现WebRequestInterceptor接口</h5><p>WebRequestInterceptor 中也定义了三个方法，我们也是通过这三个方法来实现拦截的。这三个方法都传递了同一个参数WebRequest ，那么这个WebRequest 是什么呢？这个WebRequest 是Spring 定义的一个接口，它里面的方法定义都基本跟HttpServletRequest 一样，在WebRequestInterceptor 中对WebRequest 进行的所有操作都将同步到HttpServletRequest 中，然后在当前请求中一直传递。</p><ul><li><p>方法preHandle:方法将在请求处理之前进行调用，也就是说会在Controller 方法调用之前被调用。<strong>这个方法跟HandlerInterceptor 中的preHandle 是不同的，主要区别在于该方法的返回值是void ，也就是没有返回值，所以我们一般主要用它来进行资源的准备工作</strong>，比如我们在使用Hibernate 的时候可以在这个方法中准备一个Hibernate 的Session 对象，然后利用WebRequest 的setAttribute(name, value, scope) 把它放到WebRequest 的属性中。这里可以说说这个setAttribute 方法的第三个参数scope ，该参数是一个Integer 类型的。在WebRequest 的父层接口RequestAttributes 中对它定义了三个常量：<br>SCOPE_REQUEST ：它的值是0 ，代表只有在request 中可以访问。<br>SCOPE_SESSION ：它的值是1 ，如果环境允许的话它代表的是一个局部的隔离的session，否则就代表普通的session，并且在该session范围内可以访问。<br>SCOPE_GLOBAL_SESSION ：它的值是2 ，如果环境允许的话，它代表的是一个全局共享的session，否则就代表普通的session，并且在该session 范围内可以访问</p></li><li><p><strong>方法postHandle:该方法将在请求处理之后，也就是在Controller 方法调用之后被调用，但是会在视图返回被渲染之前被调用，所以可以在这个方法里面通过改变数据模型ModelMap 来改变数据的展示</strong>。该方法有两个参数，WebRequest 对象是用于传递整个请求数据的，比如在preHandle 中准备的数据都可以通过WebRequest 来传递和访问；ModelMap 就是Controller 处理之后返回的Model 对象，我们可以通过改变它的属性来改变返回的Model 模型。</p></li><li><p>方法afterCompletion:该方法会在整个请求处理完成<strong>，也就是在视图返回并被渲染之后执行。所以在该方法中可以进行资源的释放操作</strong>。而WebRequest 参数就可以把我们在preHandle 中准备的资源传递到这里进行释放。Exception 参数表示的是当前请求的异常对象，如果在Controller 中抛出的异常已经被Spring 的异常处理器给处理了的话，那么这个异常对象就是是null 。</p></li><li><p>WebRequestInterceptor接口代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequestInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllInterceptor</span> <span class="keyword">implements</span> <span class="title">WebRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在请求处理之前执行，该方法主要是用于准备资源数据的，然后可以把它们当做请求属性放到WebRequest中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preHandle</span><span class="params">(WebRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"AllInterceptor..............................."</span>);</span><br><span class="line">        request.setAttribute(<span class="string">"request"</span>, <span class="string">"request"</span>, WebRequest.SCOPE_REQUEST);<span class="comment">//这个是放到request范围内的，所以只能在当前请求中的request中获取到</span></span><br><span class="line">        request.setAttribute(<span class="string">"session"</span>, <span class="string">"session"</span>, WebRequest.SCOPE_SESSION);<span class="comment">//这个是放到session范围内的，如果环境允许的话它只能在局部的隔离的会话中访问，否则就是在普通的当前会话中可以访问</span></span><br><span class="line">        request.setAttribute(<span class="string">"globalSession"</span>, <span class="string">"globalSession"</span>, WebRequest.SCOPE_GLOBAL_SESSION);<span class="comment">//如果环境允许的话，它能在全局共享的会话中访问，否则就是在普通的当前会话中访问</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法将在Controller执行之后，返回视图之前执行，ModelMap表示请求Controller处理之后返回的Model对象，所以可以在</span></span><br><span class="line"><span class="comment">     * 这个方法中修改ModelMap的属性，从而达到改变返回的模型的效果。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(WebRequest request, ModelMap map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">for</span> (String key:map.keySet())</span><br><span class="line">            System.out.println(key + <span class="string">"-------------------------"</span>);;</span><br><span class="line">        map.put(<span class="string">"name3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">        map.put(<span class="string">"name1"</span>, <span class="string">"name1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法将在整个请求完成之后，也就是说在视图渲染之后进行调用，主要用于进行一些资源的释放</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(WebRequest request, Exception exception)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(exception + <span class="string">"-=-=--=--=-=-=-=-=-=-=-=-==-=--=-=-=-="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>拦截器总结:<br>由上面的示例可以看出可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。<br>在mvc:interceptors标签下声明interceptor主要有两种方式：<br>（1）直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。<br>（2）使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。<br>经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了。</p><h4 id="9-配置转换器-java类"><a href="#9-配置转换器-java类" class="headerlink" title="9. 配置转换器(java类)"></a>9. 配置转换器(java类)</h4><p>DateConverter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * springmvc转换器</span></span><br><span class="line"><span class="comment"> * Converter&lt;S, T&gt; S：source源数据类型 T：target 目标数据类型</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Title: DateConverter&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Company: www.itcast.cn&lt;/p&gt; </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date date = simpleDateFormat.parse(source);</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10-异常处理器-java类"><a href="#10-异常处理器-java类" class="headerlink" title="10. 异常处理器(java类)"></a>10. 异常处理器(java类)</h4><h5 id="1-异常处理思路"><a href="#1-异常处理思路" class="headerlink" title="1. 异常处理思路"></a><strong>1. 异常处理思路</strong></h5><ul><li>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</li><li>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</li><li>Springmvc DispatcherServlet –&gt;HandlerExceptionResolver</li></ul><ol start="2"><li>自定义异常类</li></ol><ul><li>为了区别不同的异常通常根据异常类型自定义异常类，这里我们创建一个自定义系统异常，如果controller、service、dao抛出此类异常说明是系统预期处理的异常信息。这些异常类型通常继承于Exception。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义异常实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> String expMessage;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.expMessage = msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getExpMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> expMessage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpMessage</span><span class="params">(String expMessage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.expMessage = expMessage;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-自定义异常处理器"><a href="#2-自定义异常处理器" class="headerlink" title="2. 自定义异常处理器"></a><strong>2. 自定义异常处理器</strong></h5><ul><li>前端控制器DispatcherServlet在进行HandlerMapping、调用HandlerAdapter执行Handler过程中，如果遇到异常，进行异常处理。</li></ul><p>异常代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.que.springmvc.exception;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">Exception exception)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//判断异常的类</span></span><br><span class="line">String msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(exception <span class="keyword">instanceof</span> CustomerException)&#123;</span><br><span class="line">CustomerException customerException = (CustomerException)exception;</span><br><span class="line">msg = customerException.getExpMessage();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果是自定义异常,取错误 消息</span></span><br><span class="line"><span class="comment">//如果是运行时异常,取错误堆栈</span></span><br><span class="line">exception.printStackTrace();</span><br><span class="line">StringWriter s = <span class="keyword">new</span> StringWriter();</span><br><span class="line">PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(s);</span><br><span class="line">exception.printStackTrace(printWriter);</span><br><span class="line">msg = s.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个错误 页面,显示错误消息</span></span><br><span class="line">ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">modelAndView.addObject(<span class="string">"msg"</span>,msg);</span><br><span class="line">modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mvc.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssm整合之一(web.xml配置)</title>
      <link href="/2015/10/26/web%20xml/"/>
      <url>/2015/10/26/web%20xml/</url>
      
        <content type="html"><![CDATA[<h3 id="一-ssm整合"><a href="#一-ssm整合" class="headerlink" title="一. ssm整合"></a>一. ssm整合</h3><ol><li>整合思路<br>Dao层：</li></ol><ul><li>SqlMapConfig.xml，空文件即可。需要文件头。</li><li>applicationContext-dao.xml。<br>a. 数据库连接池<br>b. SqlSessionFactory对象，需要spring和mybatis整合包下的。<br>c. 配置mapper文件扫描器。</li></ul><ol start="2"><li>Service层：</li></ol><ul><li>applicationContext-service.xml包扫描器，扫描@service注解的类。</li><li>applicationContext-trans.xml配置事务。</li></ul><ol start="3"><li><p>表现层：<br>Springmvc.xml</p><ul><li>包扫描器，扫描@Controller注解的类。</li><li>配置注解驱动。</li><li>视图解析器 </li></ul><p>Web.xml</p><ul><li>配置前端控制器。</li></ul></li></ol><h3 id="二-sqlMapConfig-xml"><a href="#二-sqlMapConfig-xml" class="headerlink" title="二. sqlMapConfig.xml"></a>二. sqlMapConfig.xml</h3><p>在classpath下创建mybatis/sqlMapConfig.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h3 id="三-applicationContext-dao-xml"><a href="#三-applicationContext-dao-xml" class="headerlink" title="三. applicationContext-dao.xml"></a>三. applicationContext-dao.xml</h3><p>配置数据源、配置SqlSessionFactory、mapper扫描器。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line">&lt;!-- 加载配置文件 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=<span class="string">"classpath:db.properties"</span> /&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span><br><span class="line">destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"10"</span> /&gt;</span><br><span class="line">&lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"5"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- mapper配置 --&gt;</span><br><span class="line">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis/SqlMapConfig.xml"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置Mapper扫描器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"com.itheima.springmvc.mapper"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>db.properties<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql:<span class="comment">//localhost:3306/springmvc?characterEncoding=utf-8</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure></p><h3 id="四-applicationContext-service-xml"><a href="#四-applicationContext-service-xml" class="headerlink" title="四. applicationContext-service.xml"></a>四. applicationContext-service.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.itheima.springmvc.service"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="五-applicationContext-transaction-xml"><a href="#五-applicationContext-transaction-xml" class="headerlink" title="五.applicationContext-transaction.xml"></a>五.applicationContext-transaction.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span> xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span><br><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;!-- 数据源 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 通知 --&gt;</span><br><span class="line">&lt;tx:advice id=<span class="string">"txAdvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;!-- 传播行为 --&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"save*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"insert*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"delete*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"update*"</span> propagation=<span class="string">"REQUIRED"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"find*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"get*"</span> propagation=<span class="string">"SUPPORTS"</span> read-only=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;!-- 切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span></span><br><span class="line">pointcut=<span class="string">"execution(* com.itheima.springmvc.service.*.*(..))"</span> /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="六-springmvc-xml"><a href="#六-springmvc-xml" class="headerlink" title="六. springmvc.xml"></a>六. springmvc.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">xmlns:dubbo=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span> xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span><br><span class="line"><span class="string">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 扫描带Controller注解的类 --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.itheima.springmvc.controller"</span> /&gt;</span><br><span class="line">&lt;!-- 加载注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"viewClass"</span></span><br><span class="line">value=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span><br><span class="line">&lt;!-- jsp前缀 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span><br><span class="line">&lt;!-- jsp后缀 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="七-web-xml"><a href="#七-web-xml" class="headerlink" title="七. web.xml"></a>七. web.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span><br><span class="line">id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</span><br><span class="line">&lt;display-name&gt;springmvc-web&lt;/display-name&gt;</span><br><span class="line">&lt;welcome-file-list&gt;</span><br><span class="line">&lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</span><br><span class="line">&lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</span><br><span class="line">&lt;/welcome-file-list&gt;</span><br><span class="line">&lt;!-- 加载spring容器 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- 加载<span class="title">springmvc</span>容器 --&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">&lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h3 id="八-总结"><a href="#八-总结" class="headerlink" title="八. 总结"></a>八. 总结</h3><h3 id="1-web-xml中配置"><a href="#1-web-xml中配置" class="headerlink" title="1. web.xml中配置"></a>1. web.xml中配置</h3><ul><li><code>&lt;display-name&gt;</code></li><li><p><code>&lt;welcome-file-list&gt;</code></p><h4 id="A-context-param标签"><a href="#A-context-param标签" class="headerlink" title="A. context-param标签"></a>A. context-param标签</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath*:spring/applicationContext-*.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br></pre></td></tr></table></figure></li><li><p>这里是加载spring/applicationContext-*.xml的xml文件,也就是加载了这些XML文件.<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810261554_59.png" alt=""></p><h4 id="B-listener标签"><a href="#B-listener标签" class="headerlink" title="B. listener标签"></a>B. listener标签</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext.xml的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。</p></blockquote><p>ApplicationContext.xml这个配置文件部一般默认放置在。applicationContext的默认的路径是”/WEB-INF/applicationContext.xml。也可以在web.xml中配置该文件的其他位置。</p><h4 id="C-servlet标签"><a href="#C-servlet标签" class="headerlink" title="C. servlet标签"></a>C. servlet标签</h4><ul><li>指定spring路径下面的springmvc.xml文件<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">    &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="D-servlet-mapping"><a href="#D-servlet-mapping" class="headerlink" title="D. servlet-mapping"></a>D. servlet-mapping</h4><p>用在Servlet和URL样式之间定义一个映射。name为上面声明过的<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><h4 id="D-filter标签"><a href="#D-filter标签" class="headerlink" title="D. filter标签"></a>D. filter标签</h4><ul><li>通过类org.springframework.web.filter.CharacterEncodingFilter，定义request和response的编码</li><li>CharacterEncodingFilter类具有encoding和forceEncoding两个属性，其中encoding是表示设置request的编码，forceEncoding表示是否同时设置response的编码。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">   &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">   &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">     &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">     &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">utf</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="E-web-xml全部配置"><a href="#E-web-xml全部配置" class="headerlink" title="E. web.xml全部配置"></a>E. web.xml全部配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</span><br><span class="line">  &lt;display-name&gt;springmvc-first&lt;/display-name&gt;</span><br><span class="line">  &lt;welcome-file-list&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</span><br><span class="line">    &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</span><br><span class="line">  &lt;/welcome-file-list&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath*:spring/applicationContext-*.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">springmvc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">      &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">utf</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web.xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring mvc 总结</title>
      <link href="/2015/10/26/spring%20mvc/"/>
      <url>/2015/10/26/spring%20mvc/</url>
      
        <content type="html"><![CDATA[<h3 id="1-spring知识体系"><a href="#1-spring知识体系" class="headerlink" title="1. spring知识体系"></a>1. spring知识体系</h3><ol><li>Springmvc介绍</li><li>入门程序</li><li>Springmvc架构讲解<br>a)框架结构<br>b)组件说明</li><li>Springmvc整合mybatis</li><li>参数绑定<br>a)Springmvc默认支持的类型<br>b)简单数据类型<br>c)Pojo类型<br>d)Pojo包装类型<br>e)自定义参数绑定</li><li><p>Springmvc和struts2的区别</p></li><li><p>高级参数绑定<br>a)数组类型的参数绑定<br>b)List类型的绑定</p></li><li>@RequestMapping注解的使用</li><li>Controller方法返回值</li><li>Springmvc中异常处理</li><li>图片上传处理</li><li>Json数据交互</li><li>拦截器</li></ol><h3 id="2-Spring-web-mvc介绍"><a href="#2-Spring-web-mvc介绍" class="headerlink" title="2. Spring web mvc介绍"></a>2. Spring web mvc介绍</h3><p>2.1 Springmvc是什么？<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810261027_537.png" alt=""></p><p>2.2 SpringMVC处理流程<br><img src="http://p6hod2vhp.bkt.clouddn.com/201810261033_418.png" alt=""></p><h3 id="3-Springmvc架构"><a href="#3-Springmvc架构" class="headerlink" title="3. Springmvc架构"></a>3. Springmvc架构</h3><p><img src="http://p6hod2vhp.bkt.clouddn.com/201810261036_41.png" alt=""></p><h3 id="4-架构流程"><a href="#4-架构流程" class="headerlink" title="4. 架构流程"></a>4. 架构流程</h3><ol><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li><li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</li><li>执行处理器(Controller，也叫后端控制器)。</li><li>Controller执行完成返回ModelAndView</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li><li>ViewReslover解析后返回具体View</li><li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户</li></ol><h3 id="5-组件说明-以下组件通常使用框架提供实现"><a href="#5-组件说明-以下组件通常使用框架提供实现" class="headerlink" title="5. 组件说明(以下组件通常使用框架提供实现)"></a>5. 组件说明(以下组件通常使用框架提供实现)</h3><ol><li>ispatcherServlet：前端控制器(作用接收请求，响应结果，相当于转发器，中央处理器。)用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</li><li>HandlerMapping：处理器映射器(不需要程序员开发)<br>HandlerMapping负责根据用户请求的url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</li><li>Handler：处理器(需要程序员开发)</li><li>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。<br>==由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。<br>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler==</li><li>HandlAdapter：处理器适配器<br>通过HandlerAdapter的特定规则对处理器Handler进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</li><li>View Resolver：视图解析器<br>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）<br>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 </li><li>View：视图(需要程序员开发jsp)<br>springmvc框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。<br>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。<br><strong>说明：在springmvc的各个组件中，处理器映射器、处理器适配器、视图解析器称为springmvc的三大组件。<br>需要用户开发的组件有handler、view</strong></li></ol><h3 id="6-springmvc的配置文件"><a href="#6-springmvc的配置文件" class="headerlink" title="6. springmvc的配置文件"></a>6. springmvc的配置文件</h3><h4 id="1-组件扫描器"><a href="#1-组件扫描器" class="headerlink" title="1. 组件扫描器"></a>1. 组件扫描器</h4><p>使用组件扫描器省去在spring容器配置每个controller类的繁琐。使用<a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>自动扫描标记@controller的控制器类，配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 扫描controller注解,多个包中间使用半角逗号分隔 --&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"cn.que.springmvc.controller.first"</span>/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2-RequestMappingHandlerMapping"><a href="#2-RequestMappingHandlerMapping" class="headerlink" title="2. RequestMappingHandlerMapping"></a>2. RequestMappingHandlerMapping</h4><p>   注解式处理器映射器，对类中标记@ResquestMapping的方法进行映射，根据ResquestMapping定义的url匹配ResquestMapping标记的方法，匹配成功返回HandlerMethod对象给前端控制器，HandlerMethod对象中封装url对应的方法Method。<br>   xml配置如下<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!--注解处理器映射器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>   注解描述：<br>@RequestMapping：定义请求url到处理器功能方法的映射</p><h4 id="3-RequestMappingHandlerAdapter"><a href="#3-RequestMappingHandlerAdapter" class="headerlink" title="3. RequestMappingHandlerAdapter"></a>3. RequestMappingHandlerAdapter</h4><p>注解式处理器适配器，对标记@ResquestMapping的方法进行适配。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注解处理器适配器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="4-lt-mvc-annotation-driven-gt"><a href="#4-lt-mvc-annotation-driven-gt" class="headerlink" title="4. &lt;mvc:annotation-driven&gt;"></a>4. <code>&lt;mvc:annotation-driven&gt;</code></h4><p>springmvc使用<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>自动加载RequestMappingHandlerMapping和RequestMappingHandlerAdapter，可用在springmvc.xml配置文件中使用<a href="mvc:annotation-driven" target="_blank" rel="noopener">mvc:annotation-driven</a>替代注解处理器和适配器的配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置注解驱动, 如果配置了此标签, 可以不用配置映射器和适配器 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure></p><h4 id="5-视图解析器"><a href="#5-视图解析器" class="headerlink" title="5. 视图解析器"></a>5. 视图解析器</h4><p>在springmvc.xml文件配置如下：</p><pre><code class="java">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;        &lt;property name=<span class="string">"viewClass"</span>            value=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;        &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span> /&gt;        &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span> /&gt;    &lt;/bean&gt;</code></pre><ul><li><p>InternalResourceViewResolver：支持JSP视图解析<br>viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，所以classpath中必须包含jstl的相关jar 包。此属性可以不设置，默认为JstlView。</p></li><li><p>prefix 和suffix：查找视图页面的前缀和后缀，最终视图的址为：前缀+逻辑视图名+后缀，逻辑视图名需要在controller中返回ModelAndView指定，比如逻辑视图名为hello，则最终返回的jsp视图地址 “WEB-INF/jsp/hello.jsp”</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows中不同版本JDK环境的切换</title>
      <link href="/2015/06/09/windows%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACJDK%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%87%E6%8D%A2/"/>
      <url>/2015/06/09/windows%E4%B8%AD%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACJDK%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="windows中不同版本JDK环境的切换"><a href="#windows中不同版本JDK环境的切换" class="headerlink" title="windows中不同版本JDK环境的切换"></a>windows中不同版本JDK环境的切换</h4><p>我们发现之前修改JAVA_HOME的操作并没有什么卵用！</p><p>因为在Windows环境中的变量的优先级高于JAVA_HOME变量的优先级，直接修改变量值是没有用的。<br><a id="more"></a></p><p>解决方法： </p><ol><li>当使用安装版本的JDK程序时（JDK1.7以上），在安装结束后安装程序会自动将java.exe、javaw.exe、javaws.exe三个可执行文件复制到C:\Windows\System32目录，删除C:\Windows\System32目录下java.exe、javaw.exe、javaws.exe三个文件。</li><li><p>把Path最前面的C:\ProgramData\Oracle\Java\javapath;删除</p></li><li><p>进入此电脑，在查看中将“隐藏的项目”打勾，然后进入<br>C:\ProgramData\Oracle\Java，将Java文件直接删除，然后删除Path中C:\ProgramData\Oracle\Java\javapath配置。</p></li><li><p>新建变量JAVA_HOME，填写jdk的安装路径，我的是：C:\Program Files\Java\jdk1.7.0_75</p></li><li>新建变量CLASSPATH，写“.;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\dt.jar;”</li><li>PATH属性填写“C:\Program Files\Java\jdk1.7.0_75\bin”，要注意，加上这句话之前PATH原有的内容不要随便删除，都是非常重要的配置，在原有内容的后面加上英文分号“;”，再添上这句话。</li></ol><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804111802_751.png" alt=""></p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804111802_908.png" alt=""></p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804111803_863.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>svn相关</title>
      <link href="/2015/04/09/svn%E7%9B%B8%E5%85%B3/"/>
      <url>/2015/04/09/svn%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="svn上下载maven项目的一种正确方法"><a href="#svn上下载maven项目的一种正确方法" class="headerlink" title="svn上下载maven项目的一种正确方法"></a>svn上下载maven项目的一种正确方法</h2><p>  第一步：新建一个空文件夹</p><p>  第二步：在文件夹上右键点SVNcheckOut</p><p>  第三步：在Eclipse中工程栏的空白位置右键Import</p><p>  第四步：填maven-&gt;Excist Maven Project</p><p>  第五步：选中项目中的pom.xml</p><p>  第六步：完成</p><p>错误的方法：在Eclipse中工程拦的空白位置右键，svn 从svn中检出项目，选择项目的网址，找到对应的文件夹导出。</p><h2 id="svn导入项目后如何转成maven项目"><a href="#svn导入项目后如何转成maven项目" class="headerlink" title="svn导入项目后如何转成maven项目"></a>svn导入项目后如何转成maven项目</h2><p>刚从svn上导出的maven工程是个普通的文件夹，并且也没有编译。从网上找了很多办法，都没有解决问题。最后还是自己琢磨着把问题解决了。<br>1.如果导出的项目没有自动变成maven项目并且也不是普通的Java工程，网上说通过右键点击工程-&gt;Configure-&gt;convert into maven project解决。但是我按照上面试了一下，结果没有发现configure下有convert into maven project选项。如果你和我一样，不妨试下点击convert into faceted form。这时，你的工程应该变成了普通的Java工程（并且报错）。这时，再右键该工程-&gt;maven-&gt;enabled dependency management，这样，你的工程就变成了maven工程。<br>2.如果这时你的工程仍然报错，展开项目，看看项目中是不是缺少 Maven Dependencies 项，如果是这样的话，就右键项目-&gt;maven-&gt;update project Configuration，然后你再看看工程是不是不报错了。（或者右键项目-&gt;maven-&gt;disable Dependency Management-&gt;右键项目-&gt;maven-&gt;enable Dependency Management）</p><p>参考：<a href="http://chenzhou123520.iteye.com/blog/1811340" target="_blank" rel="noopener">http://chenzhou123520.iteye.com/blog/1811340</a></p><h2 id="Maven工程下使用SVN上传和下载代码"><a href="#Maven工程下使用SVN上传和下载代码" class="headerlink" title="Maven工程下使用SVN上传和下载代码"></a>Maven工程下使用SVN上传和下载代码</h2><p><a href="https://blog.csdn.net/kerwinJu/article/details/65630079" target="_blank" rel="noopener">https://blog.csdn.net/kerwinJu/article/details/65630079</a></p><p>Trunk是主干，我们都在这里进行开发，这是发布版本，必须向前开发，大版本。如果版本里有bug，就在branches里进行小版本开发，最后再向主干里合并。复制trunk的url地址用于上传，它是https协议的。</p><p>https用的端口是433。</p><p>在eclipse的每个工程里Team-&gt;shareproject-&gt;SVN-&gt;trunk的url</p><p>点完成</p><p>点yes同步</p><p>Eclipse里会跳转到同步窗口，此时代码还在本地，文件带绿色加号的都是要上传的，旁边那排按钮有上传、下载、同步等功能。</p><p>向SVN提交代码</p><p>每个人的机器配置不一样，需要忽略.settings和.project上传，一定要忽略掉再提交！</p><p>回到svn服务器上刷新一下，就看到了提交的工程</p><p>再接着上传其他目录，maven工程会有冲突，就更新一下再提交就没错了</p><p>此时又要去忽略.settings和.project每次都要这样很麻烦，可以这样做：</p><p>在eclipse的首选项中team-&gt;git-&gt;Ignored Resources-&gt;Add Pattern</p><p>添加.settings .project 和.classpath</p><p>之后提交工程，提交完了点同步一下（第一个按钮）</p><p>在提交Maven聚合工程的时候，还需要忽略target，它就相当于java工程里的bin目录，</p><p>Bin目录是不需要上传到svn的。同样可以把target添加到ignored resources里。</p><p>提交、同步完工程后，聚合工程下的子工程就不需要提交了，但是子工程上没有小桶</p><p>标记，说明没有被svn管理，右键把它们删了，但千万别勾选删了硬盘上的。只是逻辑上的删除而已，相当于删除工程的引用而已，然后再把它们引进来。</p><p>右击聚合工程import-&gt;maven-&gt;existing maven projects，就可以导入子工程了，就都有小桶标记了。</p><p>从SVN下载代码</p><p>在eclipse里删掉所有刚提交的项目</p><p>安装VisualSvn服务端报错解决和安装SVN插件具体见我的CSDN</p><p>点击JavaEE图标旁边的小方框，弹出如下选择框，选择SVN资源库研究</p><p>此时展现出来的页面就是服务端的东西，不能乱删东西，在这边删了服务端就没了</p><p>回到JavaEE界面import-&gt;svn</p><p>需要注意的是，如果选择导入一个工程，下一步检出为选第二个</p><p>如果选择多个工程就直接下一步就行了。下载下来后是没有子工程的，需要手动导入子工程，点击聚合的工程导入就行了，方法上面已经介绍。</p><p>接下来会发现下载下来的工程不是一个maven工程的目录结构，需要转成Maven工程，转的过程中按照依赖关系转，否则会出错，先转parent(configure-&gt;convert to maven project)，然后再转其他子工程。</p><h2 id="eclipse-maven-插件的安装和配置"><a href="#eclipse-maven-插件的安装和配置" class="headerlink" title="eclipse maven 插件的安装和配置"></a>eclipse maven 插件的安装和配置</h2><p><a href="https://blog.csdn.net/kevin_spa/article/details/71214189" target="_blank" rel="noopener">https://blog.csdn.net/kevin_spa/article/details/71214189</a></p><h2 id="Eclipse的SVN插件与本地svn客户端关联详解"><a href="#Eclipse的SVN插件与本地svn客户端关联详解" class="headerlink" title="Eclipse的SVN插件与本地svn客户端关联详解"></a>Eclipse的SVN插件与本地svn客户端关联详解</h2><p><a href="https://blog.csdn.net/shenxiuwen1989/article/details/52162152" target="_blank" rel="noopener">https://blog.csdn.net/shenxiuwen1989/article/details/52162152</a></p><h2 id="Eclipse-安装-SVN-插件的两种方法"><a href="#Eclipse-安装-SVN-插件的两种方法" class="headerlink" title="Eclipse 安装 SVN 插件的两种方法"></a>Eclipse 安装 SVN 插件的两种方法</h2><p><a href="https://blog.csdn.net/jieshaowang1229/article/details/51594992" target="_blank" rel="noopener">https://blog.csdn.net/jieshaowang1229/article/details/51594992</a></p><h2 id="svn-下载列表"><a href="#svn-下载列表" class="headerlink" title="svn 下载列表"></a>svn 下载列表</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>struct第二天</title>
      <link href="/2015/04/09/struts%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2015/04/09/struts%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h3><p>1.Struts2获取ServletAPI<br>2.OGNL表达式(理解)<br>3.ValueStack值栈(熟练使用)<br>4.Struts2拦截器（Interceptor）<br><a id="more"></a><br><br><br><br><br><br><br><br><br><br><br><br></p><h3 id="01-Struts2中获取ServletAPI-两种方式"><a href="#01-Struts2中获取ServletAPI-两种方式" class="headerlink" title="01- Struts2中获取ServletAPI(两种方式)"></a>01- Struts2中获取ServletAPI(两种方式)</h3><p>a.通过ServletActionContext获取<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021320_873.png" alt=""></p><p>b.采用注入方式（Action实现指定接口）<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021328_246.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021329_36.png" alt=""></p><h3 id="02-OGNL表达式（理解即可）"><a href="#02-OGNL表达式（理解即可）" class="headerlink" title="02- OGNL表达式（理解即可）"></a>02- OGNL表达式（理解即可）</h3><p>基本概述<br>OGNL是Object-Graph Navigation Language(对象图导航语言)的缩写，它是一种功能强大的表达式语言，通过OGNL的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。</p><pre><code>注意：1.Struts2本身集成了OGNL2.OGNL本身也是一个项目，它是可以单独使用。3．OGNL使用的时候必须有三要素：  a）表达式      b）OgnlContext   OGNL上下文   c）Root </code></pre><p>OGNL的功能<br>1.支持对象操作<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021335_459.png" alt=""><br>2.支持静态成员访问<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021336_882.png" alt=""><br>3.访问OgnlContext上下文<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021337_698.png" alt=""><br>如果从根中获取数据，不需要添加#号<br>如果不是从根中获取，需要#<br>4.操作集合<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021338_826.png" alt=""></p><h4 id="Strtus2框架中如何使用ognl表达式"><a href="#Strtus2框架中如何使用ognl表达式" class="headerlink" title="Strtus2框架中如何使用ognl表达式"></a>Strtus2框架中如何使用ognl表达式</h4><p>在struts2框架中使用ognl表达式的作用是从valueStack中获取数据<br>结合struts2框架的标签&lt;s:property value=”表达式”&gt;来使用<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021339_580.png" alt=""></p><p>###03-  ValueStack值栈</p><h4 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1. 基本概述"></a>1. 基本概述</h4><p>valueStack它就是一个容器，使用valueStack的主要目的是为了将action中产生的数据携带到页面上，简单说就是在Action中通过ValueStack保存值，在jsp页面里面从ValueStack中获取值</p><p>必须理解的东西：<br>当客户端向我们发送一个请求（对应一个Request对象），服务器就会创始一个Action对象来处理请求（struts2中的action是多例的），所以它不存在线程安全问题（不同请求Action对象不同）。而每一个Action对象都会有一个自己的ValueStack. valueStack贯穿整个action的生命周期；<br>简单的说就是一个request对应一个Action,一个Action对应一个ValueStack</p><pre><code>request-------Action------ValueStack（一一对应）</code></pre><p>注意：Struts2框架会将Action对应的ValueStack保存在Request中<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021341_600.png" alt=""></p><h4 id="2-valueStack内部结构"><a href="#2-valueStack内部结构" class="headerlink" title="2. valueStack内部结构"></a>2. valueStack内部结构</h4><pre><code>1.Action如何获取ValueStack    2.如何向ValueStack中存储数据3.Jsp页面里面如何从ValueStack中取数据</code></pre><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021342_386.png" alt=""></p><h4 id="3-获取ValueStack"><a href="#3-获取ValueStack" class="headerlink" title="3. 获取ValueStack"></a>3. 获取ValueStack</h4><p>第一种方式:可以直接通过request对象来获取.<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021346_222.png" alt=""></p><p>第二种方式:使用ActionContext来获取<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021346_751.png" alt=""></p><h4 id="4-ActionContext简介"><a href="#4-ActionContext简介" class="headerlink" title="4. ActionContext简介"></a>4. ActionContext简介</h4><p>ActionContext它是action上下文，strtus2框架它使用actionContext来保存Action在执行过程中所需要的一些对象，例如 session, application…<br>Request—线程—ActionContext—-Action—–ValueStack它们都对应着一次请求(一个线程).</p><p>   ==简单的说就是用户每次请求服务器会创建一个线程去处理请求，每次请求会创建一个request,一个    request对应一个Action,一个Action对应一个ValueStack,而一个Action也对应者一个          ActionContext==</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021352_742.png" alt=""></p><h4 id="5-valueStack存储数据"><a href="#5-valueStack存储数据" class="headerlink" title="5. valueStack存储数据"></a>5. valueStack存储数据</h4><p>使用valueStack来存储数据时，主要是向root中存储。（一定要记住！！！！）<br><em>1.手动向valueStack存储数据<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021354_699.png" alt=""></em>2.Struts2框架自动向valueStack中存储数据<br>1.每次请求，访问action，这个对象会存储到valueStack中。<br>在DefaultActionInvocation的init方法内<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021355_242.png" alt=""></p><p>2.模型对象存储到valueStack中<br>在ModelDrivernInterceptor中<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021356_508.png" alt=""><br>以上代码会将模型对象存储到valueStack中。</p><p>==1.数据都是存储在valueStack的root区<br>2.Action中所有的成员变量都会在root区能够获得==</p><h4 id="6-ValueStack中数据的获取"><a href="#6-ValueStack中数据的获取" class="headerlink" title="6. ValueStack中数据的获取"></a>6. ValueStack中数据的获取</h4><p>1.如果是通过valueStack.push()设置的,值在jsp页面：直接操作栈的下标<br> [位置下标].top</p><p> <img src="http://p6hod2vhp.bkt.clouddn.com/201804021358_633.png" alt=""></p><p>2.Action中提供get方法的值     Jsp页面：&lt;s:property  value=”key” /&gt;<br> 3.valueStack.set(key,value)<br>     Jsp页面：<code>&lt;s:property  value=”key” /&gt;</code><br>4.采用ModelDriven的形式：<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021401_171.png" alt=""></p><h4 id="7-Struts2框架使用EL表达式获取数据"><a href="#7-Struts2框架使用EL表达式获取数据" class="headerlink" title="7. Struts2框架使用EL表达式获取数据"></a>7. Struts2框架使用EL表达式获取数据</h4><p>Struts2框架对request进行了增强，重写了getAttribute方法，如果在request域中查找不到数据，就会在valueStack中获取。</p><h4 id="8-Ognl表达式中特殊字符"><a href="#8-Ognl表达式中特殊字符" class="headerlink" title="8. Ognl表达式中特殊字符"></a>8. Ognl表达式中特殊字符</h4><ol><li><p>#号:它是从非root中获取数据<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021403_640.png" alt=""></p></li><li><p>%用于强制是否要解析ognl表达式<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021404_511.png" alt=""></p></li><li><p>$它主要是在配置文件中来获取valueStack中数据<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021404_605.png" alt=""></p></li></ol><h3 id="04-拦截器Interceptor"><a href="#04-拦截器Interceptor" class="headerlink" title="04- 拦截器Interceptor"></a>04- 拦截器Interceptor</h3><p>原理：Struts2中的interceptor它是基于aop思想，而aop思想它本质上是通过动态代理来实现<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021405_218.png" alt=""></p><h4 id="1-自定义Interceptor步骤"><a href="#1-自定义Interceptor步骤" class="headerlink" title="1.  自定义Interceptor步骤"></a>1.  自定义Interceptor步骤</h4><p>1.所有的Interceptor都要实现一个接口<br>com.opensymphony.xwork2.interceptor.Interceptor<br>2.在配置文件中声明Interceptor<br>3.在Action中应用Interceptor<br>注意:当我们显示的引入了一个自定义的Interceptor,那么默认的defaultStack就不会在导入，需要手动导入。</p><h4 id="2．Interceptor练习"><a href="#2．Interceptor练习" class="headerlink" title="2．Interceptor练习"></a>2．Interceptor练习</h4><p>1.创建一个Interceptor</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021408_215.png" alt=""></p><p>在struts.xml文件中声明，并在指定的action中引用<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021408_975.png" alt=""></p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021409_15.png" alt=""><br>完成功能<br>修改登录action中操作</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021410_684.png" alt=""></p><p>将用户存储到session中。<br>在interceptor中完成权限控制</p><p><img src="http://p6hod2vhp.bkt.clouddn.com/201804021410_3.png" alt=""><br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021410_957.png" alt=""></p><p>问题1:如何在login指定的视图页面上展示错误信息，例如权限不足。<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021411_584.png" alt=""></p><p>问题2:我们在struts.xml文件中配置action时，可以使用*通配置符，这时它可以处理多个方法，你指定的interceptor只想拦截某一个方法，怎样处理？<br>我们可以使用Interceptor接口的一个实现类来完成操作<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021411_923.png" alt=""><br>在配置时，就可以指定哪些方法拦截，哪些方法不拦截<br><img src="http://p6hod2vhp.bkt.clouddn.com/201804021412_744.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javaweb第十六天笔记</title>
      <link href="/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Javaweb第十六天笔记"><a href="#Javaweb第十六天笔记" class="headerlink" title="Javaweb第十六天笔记"></a>Javaweb第十六天笔记</h1><h2 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h2><h2 id="今日重点"><a href="#今日重点" class="headerlink" title="今日重点"></a>今日重点</h2><ol><li>EL表达式</li><li>JSTL标签库</li><li>MVC模式</li></ol><h3 id="01-案例一：将商品信息显示到页面：EL的概述及获取数据一"><a href="#01-案例一：将商品信息显示到页面：EL的概述及获取数据一" class="headerlink" title="01-案例一：将商品信息显示到页面：EL的概述及获取数据一"></a>01-案例一：将商品信息显示到页面：EL的概述及获取数据一</h3><p>EL的概述:Excepress Language,表达式语言<br>作用：以最简单的方式操作JSP<br>使用EL表达式语法:${ EL表达式 }<br>概括: EL 是从 JavaScript 脚本语言得到启发的一种表达式语言，它借鉴了 JavaScript 多类型转换无关性的特点。在使用 EL 从 scope 中得到参数时可以自动转换类型，因此对于类型的限制更加宽松。 Web 服务器对于 request 请求参数通常会以 String 类型来发送，在得到时使用的 Java 语言脚本就应该是<code>request.getParameter(“XXX”)</code> ，这样的话，对于实际应用还必须进行强制类型转换。而 EL 就将用户从这种类型转换的繁琐工作脱离出来，允许用户直接使用EL 表达式取得的值，而不用关心它是什么类型</p><h3 id="02-案例一：将商品信息显示到页面：EL获取数据二"><a href="#02-案例一：将商品信息显示到页面：EL获取数据二" class="headerlink" title="02-案例一：将商品信息显示到页面：EL获取数据二"></a>02-案例一：将商品信息显示到页面：EL获取数据二</h3><p>获取数据:(JSP的四个域)</p><p>获取域对象 <code>${ applicationScope.name }</code><br>访问数组元素 <code>${ arrs[下标] }</code><br>访问集合 <code>${ list[下标] }</code> <code>${ map.key的值 }</code><br>获取对象的属性 <code>${ user.id }</code><br>获取对象的集合的数据 <code>${ userList[0].id }</code><br>==<code>.</code>和<code>[]</code>的区别==<br><code>[]</code>用于有下标的数据(数组,list集合) <code>.</code>用于有属性的数据(map,对象)<br>如果属性名中包含有特殊的字符.必须使用<code>[]</code><br>如果EL表达式从四个域对象中没有取到值会返回<code>&quot;&quot;</code>, 而不是<code>null</code>, 但属性名写错会报错，如 <code>${user.naaa}</code><br>在书写表达式时，如果没有指定搜索范围，那么系统会依次调用<code>pageContext</code>、<code>request</code>、<code>session</code>、<code>application</code>的<code>getAttribute()</code>方法。这样不限定查找范围的代码不利于排错，所以这种取值的操作可以先定对象的查找范围。如：<code>${sessionScope.user.name}</code><br>一旦指定了对象所在的范围，那么只会在范围内查找绑定对象，不会在找不到的时候再去其他区域中查找了。</p><h3 id="03-案例一：将商品信息显示到页面：EL执行运算"><a href="#03-案例一：将商品信息显示到页面：EL执行运算" class="headerlink" title="03-案例一：将商品信息显示到页面：EL执行运算"></a>03-案例一：将商品信息显示到页面：EL执行运算</h3><p>执行运算:</p><ol><li>EL执行算数运算 <code>${ n1 + n2 }</code></li><li>EL执行比较运算 <code>${ n1 eq n2 }</code></li><li>EL执行关系运算 <code>and  or    not</code></li><li>EL执行三元运算 <code>${ n1 &lt; n2 ? &quot;正确&quot;:&quot;错误&quot; }</code></li><li>判断null <code>${ empty user }`</code>${ not empty user }`<br>空运算主要用于判断字符串，集合是否为空，是空或为null及找不到值时都会输出true</li></ol><h3 id="04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象"><a href="#04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象" class="headerlink" title="04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象"></a>04-案例一：将商品信息显示到页面：EL操作WEB开发的常用对象</h3><p>操作WEB开发的常用的对象:<br><code>pageScope,requestScope,sessionScope,applicationScope</code> - 获取JSP中域中的数据<br><code>param,paramValues</code> - 接收参数.<br><code>header,headerValues</code> - 获取请求头信息<br><code>initParam</code> - 获取全局初始化参数<br><code>cookie</code> - WEB开发中cookie<br><code>pageContext</code> - WEB开发中的pageContext.</p><ol><li><code>${ param.id }===request.getPamameter(“id&quot;)</code></li><li>获取Cookie中的值<code>${ cookie.history.value }</code></li><li>调用API：<code>${ pageContext.request.remoteAddr }</code> <code>${ pageContext.request.contextPath }</code></li></ol><h3 id="05-案例一：将商品信息显示到页面：JSTL的概述"><a href="#05-案例一：将商品信息显示到页面：JSTL的概述" class="headerlink" title="05-案例一：将商品信息显示到页面：JSTL的概述"></a>05-案例一：将商品信息显示到页面：JSTL的概述</h3><p>JSTL概述：Jsp  Standard  Tag  library,Sun 公司 Java 规范标准的 JSTL 由 apache组织负责维护。作为开源的标准技术，它一直在不断地完善。<br>JSTL 的发布包有两个版本： Standard-1.0 Taglib 、 Standard-1.1 Taglib ，它们在使用时是不同的。</p><p>==使用JSTL==</p><ol><li>引入JSTL的相关的jar包.</li><li>在页面中引入标签库.<code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</code></li></ol><h3 id="06-案例一：将商品信息显示到页面：JSTL的入门案例"><a href="#06-案例一：将商品信息显示到页面：JSTL的入门案例" class="headerlink" title="06-案例一：将商品信息显示到页面：JSTL的入门案例"></a>06-案例一：将商品信息显示到页面：JSTL的入门案例</h3><h3 id="07-案例一：将商品信息显示到页面：JSTL的out，set，if标签"><a href="#07-案例一：将商品信息显示到页面：JSTL的out，set，if标签" class="headerlink" title="07-案例一：将商品信息显示到页面：JSTL的out，set，if标签"></a>07-案例一：将商品信息显示到页面：JSTL的out，set，if标签</h3><p>基本语法<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span>  test=<span class="string">"$&#123;&#125;"</span>&gt;</span><br><span class="line">  ....</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure></p><p>==注意JSTL没有else==</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setName(<span class="string">"胡萝卜"</span>);</span><br><span class="line">  user.setGender(<span class="string">"f"</span>);</span><br><span class="line">  request.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">%&gt;</span><br><span class="line">姓名:$&#123;user.name&#125;&lt;br/&gt;</span><br><span class="line">性别:</span><br><span class="line">&lt;c:if test="$&#123;user.gender =='m'&#125;" var="rs" scope="request"&gt;男&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;!rs&#125;"&gt;女&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h3 id="08-案例一：将商品信息显示到页面：JSTL的forEach标签"><a href="#08-案例一：将商品信息显示到页面：JSTL的forEach标签" class="headerlink" title="08-案例一：将商品信息显示到页面：JSTL的forEach标签"></a>08-案例一：将商品信息显示到页面：JSTL的forEach标签</h3><p>forEach<br>加强<code>For: var=&quot;i&quot;   items = “{被遍历的对象}&quot;</code><br>普通<code>for: var =&quot;i&quot;  begin=&quot;开始数据&quot; end=&quot;结束数据&quot;  step=&quot;步数&quot; varstatus=&quot;&quot;</code> 统计循环的个数<br>举例:<br>其中items属性为要遍历的集合，var属性为每次取出来的一个对象，varStatus指定当前迭代的状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;序号&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;users&#125;"</span> <span class="keyword">var</span>=<span class="string">"u"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.age&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h3 id="09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库"><a href="#09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库" class="headerlink" title="09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库"></a>09-案例一：将商品信息显示到页面：JSTL提供的EL的函数库</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"i"</span> items=<span class="string">'$&#123; fn:split("a-b-c-d","-") &#125;'</span>&gt;</span><br><span class="line">  $&#123; i &#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h3 id="10-案例一：将商品信息显示到页面：代码实现的准备工作"><a href="#10-案例一：将商品信息显示到页面：代码实现的准备工作" class="headerlink" title="10-案例一：将商品信息显示到页面：代码实现的准备工作"></a>10-案例一：将商品信息显示到页面：代码实现的准备工作</h3><h3 id="11-案例一：将商品信息显示到页面：代码实现商品列表显示功能"><a href="#11-案例一：将商品信息显示到页面：代码实现商品列表显示功能" class="headerlink" title="11-案例一：将商品信息显示到页面：代码实现商品列表显示功能"></a>11-案例一：将商品信息显示到页面：代码实现商品列表显示功能</h3><p>JSTL&amp;EL页面代码可读性更好，信息显示简便</p><h3 id="01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式"><a href="#01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式" class="headerlink" title="01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式"></a>01-案例一：使用MVC设计模式完成转账的案例：需求和JSP的设计模式</h3><p>MVC：Model  模型层，View视图层,Controller 控制层<br>使用Jsp做显示<br>使用Servlet控制调度<br>a. 接收参数封装数据<br>b. 调用业务层逻辑，接收返回结果<br>c. 根据结果，实现页面的跳转<br>使用JavaBean做数据封装处理</p><h3 id="02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签"><a href="#02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签" class="headerlink" title="02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签"></a>02-案例一：使用MVC设计模式完成转账的案例：JSP的模式一及模式一中的标签</h3><h3 id="03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二"><a href="#03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二" class="headerlink" title="03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二"></a>03-案例一：使用MVC设计模式完成转账的案例：JSP的模式二</h3><p>MVC实现登录：<br>Servlet实现控制：接收参数封装数据<br><code>Map map = request.getParameterMap()</code><br><code>BeanUtils.populate(new User(),map);//实现数据的封装</code></p><h2 id="今日总结："><a href="#今日总结：" class="headerlink" title="今日总结："></a>今日总结：</h2><ol><li>==EL表达式==<br>概念：Exepression Language,表达式语言<br>功能3个：<ul><li>获取域中的数据 <code>${pageScope.xxxx}</code></li><li>做简单运算 <code>${1+1}</code></li><li>操作其他的web对象:<br>pageScope,requestScope,sessionScope,applicationScope //获取JSP中域中的数据<br>param,paramValues //接收参数.<br>header,headerValues  //获取请求头信息<br>initParam  //获取全局初始化参数<br>cookie  //WEB开发中cookie<br>pageContext //WEB开发中的pageContext.<br><code>${param.name}</code><br><code>${cookie.cookie名称.value}</code><br><code>${pageContext.API}</code></li></ul></li><li>JSTL<br>概念：JSP Standard Tag Library,Jsp标准标签库<br>使用: 导包 –&gt; 在JSP页面引入<code>&lt;%@   taglib uri=&quot;/jsp/jstl/core&quot;   prefix=&quot;c&quot; %&gt;</code></li><li><p>标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span>   test=<span class="string">"$&#123;&#125;"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:if&gt;  // 没有else</span><br><span class="line">&lt;c:forEach   <span class="keyword">var</span>=<span class="string">"i"</span>    items=<span class="string">"$&#123;域中的集合或者数组&#125;"</span>  &gt;</span><br><span class="line">    $&#123;i&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;c:forEach   <span class="keyword">var</span>=”i”   begin=”开始”  end=”结束”   step=”自增”   varstatus=”个数” &gt;</span><br><span class="line">    $&#123;i&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></li><li><p>MVC模式<br>什么是MVC(Model  模型层  JavaBean， View 视图层  Jsp, Controller 控制层 Servlet)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javaweb第十五天笔记</title>
      <link href="/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
      <url>/2015/04/05/Javaweb%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h4><ol><li>session对象</li><li>Jsp概述</li><li>Jsp三大指令</li><li>Jsp9个内置对象</li><li>Jsp六大动作<a id="more"></a><br><br><br><br><br><br><br><br><br><h3 id="01-案例三：简单的购物车的实现：需求和session的概述"><a href="#01-案例三：简单的购物车的实现：需求和session的概述" class="headerlink" title="01-案例三：简单的购物车的实现：需求和session的概述"></a>01-案例三：简单的购物车的实现：需求和session的概述</h3></li></ol><p>Cookie与Session的区别<br>Cookie本身是有大小和个数的限制.大小一般不超过4KB, 个数的不超过20个,Session没有限制.Cookie的数据保存在客户端,Session数据保存在服务器端.Cookie被禁止了，默认session也不能使用<br>Session的执行原理：基于Cookie的JSESSIONID<br>获得Session:<code>request.getSession();/request.getSession(boolean)</code></p><h3 id="02-案例三：简单的购物车的实现：分析及前期准备"><a href="#02-案例三：简单的购物车的实现：分析及前期准备" class="headerlink" title="02-案例三：简单的购物车的实现：分析及前期准备"></a>02-案例三：简单的购物车的实现：分析及前期准备</h3><p>考虑购物车很多商品对应数量  Map&lt;商品名称,数量&gt;<br>一个Map对象模拟购物车的实现</p><h3 id="03-案例三：简单的购物车的实现：代码实现"><a href="#03-案例三：简单的购物车的实现：代码实现" class="headerlink" title="03-案例三：简单的购物车的实现：代码实现"></a>03-案例三：简单的购物车的实现：代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试从session中获得购物车：null/获得操作过的购物车对象</span></span><br><span class="line">Map&lt;String,Integer&gt;map=(Map&lt;String,Integer&gt;)request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line">    <span class="keyword">if</span>(map == <span class="keyword">null</span>)&#123;</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;String,Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断购物车中是否已经买了该商品.</span></span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(name))&#123;</span><br><span class="line">    <span class="comment">// map中已经有该商品:</span></span><br><span class="line">    <span class="comment">// * 如果购物车中已经有该商品: 获得到Map中该商品的数量+1。 存回到Map集合中.</span></span><br><span class="line">        Integer count = map.get(name);</span><br><span class="line">        count++;</span><br><span class="line">        map.put(name, count);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// map中没有该商品.// * 如果购物车中没有改商品: 将商品添加到Map集合中 数量1.</span></span><br><span class="line">        map.put(name, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04-案例三：简单的购物车的实现：总结：session作为域对象存取数据"><a href="#04-案例三：简单的购物车的实现：总结：session作为域对象存取数据" class="headerlink" title="04-案例三：简单的购物车的实现：总结：session作为域对象存取数据"></a>04-案例三：简单的购物车的实现：总结：session作为域对象存取数据</h3><p>session的创建和销毁<br>创建:服务器端第一次调用getSession()创建session.，以后调用getSession获得同一个<br>销毁:三种情况销毁session:</p><ol><li>session过期. 默认过期时间为30分钟.<br> 在Tomcat设置：所有的项目的session<br> 在某个项目中的web.xml设置：当前工程的所有session<br> 给某个session对象设置：对应的session对象<br> <code>setMaxInactiveInterval(int interval)</code></li><li>非正常关闭服务器.如果正常关闭session序列化到硬盘.</li><li>手动调用session.invalidate();</li></ol><ul><li>作用范围:多次请求.(一次会话)</li></ul><p>==Servlet中的域对象：request,session,ServletContext==<br>request:范围一次请求，转发时能够共享数据,一个请求对应一个<br>session:一次会话（包含多次请求与响应），转发与重定向都能共享,一个用户对应一个<br>ServletContext:一个项目都有效，包含多个会话<br>共同的特点：存储数据<br><code>setAttribute()/getAttribute()/removeAttribute()</code><br><code>Cookie, new Cookie(String,String)</code><br><code>session,  setAttribute(String,Object)</code></p><h3 id="05-案例三：简单的购物车的实现：总结：session保存用户的信息"><a href="#05-案例三：简单的购物车的实现：总结：session保存用户的信息" class="headerlink" title="05-案例三：简单的购物车的实现：总结：session保存用户的信息"></a>05-案例三：简单的购物车的实现：总结：session保存用户的信息</h3><p>登录的拦截：登录成功，session设置标志位<br>直接访问商品信息页面，检查session中有没有标志位</p><h3 id="06-案例四：一次性验证码的校验：需求，分析及代码实现"><a href="#06-案例四：一次性验证码的校验：需求，分析及代码实现" class="headerlink" title="06-案例四：一次性验证码的校验：需求，分析及代码实现"></a>06-案例四：一次性验证码的校验：需求，分析及代码实现</h3><p>为什么要使用验证码？避免机器识别登录<br>服务器生成4位随机数，存在session<br>页面显示，输入随机数<br>校验登录Servlet获得随机数，与session中的随机数比对<br>避免浏览器缓存：如果路径一致，读取缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"img1"</span>).src=<span class="string">"/day11/CheckImgServlet?time="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="07-案例四：一次性验证码的校验：JS控制图片切换"><a href="#07-案例四：一次性验证码的校验：JS控制图片切换" class="headerlink" title="07-案例四：一次性验证码的校验：JS控制图片切换"></a>07-案例四：一次性验证码的校验：JS控制图片切换</h3><h3 id="01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本"><a href="#01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本" class="headerlink" title="01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本"></a>01-案例一：将商品信息显示到页面：需求和JSP的概述及JSP的脚本</h3><p>JSP：Java Server Pages（Java服务器端的页面）,被翻译成Servlet类来编译执行</p><h3 id="02-案例一：将商品信息显示到页面：JSP的注释"><a href="#02-案例一：将商品信息显示到页面：JSP的注释" class="headerlink" title="02-案例一：将商品信息显示到页面：JSP的注释"></a>02-案例一：将商品信息显示到页面：JSP的注释</h3><p>JSP的注释: <code>&lt;%-- JSP的注释 --%&gt;</code><br>HTML注释：只能注释HTML标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   </span></span><br><span class="line"><span class="comment">    &lt;c:for start=”1” end =”10”  &gt; </span></span><br><span class="line"><span class="comment">&lt;h1&gt;aaaaa&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">    &lt;/c:for&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="03-案例一：将商品信息显示到页面：JSP的page指令一"><a href="#03-案例一：将商品信息显示到页面：JSP的page指令一" class="headerlink" title="03-案例一：将商品信息显示到页面：JSP的page指令一"></a>03-案例一：将商品信息显示到页面：JSP的page指令一</h3><p>JSP中有三个指令:page指令, include指令, taglib指令.</p><h3 id="04-案例一：将商品信息显示到页面：JSP的page指令二"><a href="#04-案例一：将商品信息显示到页面：JSP的page指令二" class="headerlink" title="04-案例一：将商品信息显示到页面：JSP的page指令二"></a>04-案例一：将商品信息显示到页面：JSP的page指令二</h3><ul><li><code>contentType</code>: 设置浏览器打开这个JSP的时候采用的默认的字符集的编码. </li><li><code>pageEncoding</code>: 设置文件保存到本地硬盘,以及生成Servlet后,Servlet保存到硬盘上的编码.</li><li><code>import</code>: 在JSP中引入类对象.但是import可以出现多次.</li></ul><p>设置全局的错误友好页面：* 在web.xml中设置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="05-案例一：将商品信息显示到页面：JSP的include和taglib指令"><a href="#05-案例一：将商品信息显示到页面：JSP的include和taglib指令" class="headerlink" title="05-案例一：将商品信息显示到页面：JSP的include和taglib指令"></a>05-案例一：将商品信息显示到页面：JSP的include和taglib指令</h3><p>JSP中的include指令:指示JSP包含其他的页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"logo.jsp"</span> %&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"menu.jsp"</span> %&gt;</span><br><span class="line">&lt;h1&gt;BODY部分&lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"footer.jsp"</span> %&gt;</span><br></pre></td></tr></table></figure><p>JSP中的taglib指令:指示JSP引入标签库.<br><code>&lt;%@ taglib uri=&quot;标签的URI的路径&quot; prefix=&quot;标签的别名&quot; %&gt;</code></p><h3 id="06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象"><a href="#06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象" class="headerlink" title="06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象"></a>06-案例一：将商品信息显示到页面：JSP的内置对象及page和out对象</h3><p>==JSP的内置对象==<br>JSP的内置对象:在JSP中可以直接使用的对象.<br>JSP中有9大内置对象</p><ul><li>request</li><li>response</li><li>session</li><li>application   ServletContext</li><li>page  当前页面</li><li>pageContext</li><li>config</li><li>out    JspWriter</li><li>exception</li></ul><h3 id="07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围"><a href="#07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围" class="headerlink" title="07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围"></a>07-案例一：将商品信息显示到页面：pageContext对象及JSP的四个作用范围</h3><p>==向JSP的四个域中存取数据==<br>JSP的四个域范围:</p><ul><li>PageScope: 当前页面中有效.<br>  <code>pageContext PageContext</code></li><li>RequestScope: 一次请求范围.<br>  <code>request HttpServletRequest</code></li><li>SessionScope: 一次会话范围.<br>  <code>session HttpSession</code></li><li>ApplicationScope: 整个应用范围<br>  <code>application ServletContext</code></li></ul><p>作用：存储数据<br><code>pageContext</code>  获得其他8个对象</p><h3 id="08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据"><a href="#08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据" class="headerlink" title="08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据"></a>08-案例一：将商品信息显示到页面：pageContext对象向四个域中存取数据</h3><p><code>${ name}=======pageContext. findAttribute(“”)</code></p><h3 id="09-案例一：将商品信息显示到页面：JSP的动作标签"><a href="#09-案例一：将商品信息显示到页面：JSP的动作标签" class="headerlink" title="09-案例一：将商品信息显示到页面：JSP的动作标签"></a>09-案例一：将商品信息显示到页面：JSP的动作标签</h3><p><code>&lt;jsp:forward /&gt;</code>: 用于页面的转发,如<code>&lt;jsp:forward page=&quot;/demo1-jsp/demo3-object/demo3.jsp&quot;&gt;&lt;/jsp:forward&gt;</code><br><code>&lt;jsp:include  page=”” /&gt;</code>: 用于页面的包含(动态包含)<br>==静态包含和动态包含的区别<code>(&lt;%@ include  file=””%&gt;和&lt;jsp:include&gt;)</code>==<br>静态包含：直接将源代码拷贝到目标文件中，一起翻译成.java编译运行<br>动态包含：每个文件单独翻译成.java单独编译，将编译后运行的结果进行包含.调用一个方法将结果包含</p><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ol><li><p>Session<br> HttpSession:<br> 作用：域对象存储数据<br> <code>setAttribute()/getAttribute()</code><br> 创建：在第一次访问<code>(request.getSession())session</code><br> 销毁：默认ID存储在cookie当中，默认session随着浏览器关闭而销毁<br> 设置session生存时间，默认在tomcat中有配置  web.xml:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30min<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">配置当前工程web.xml：</span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 配置单个session：<code>setMaxInActiveInterval(s)</code><br> 范围：session：一次会话有效（多次请求响应）</p></li><li>JSP: Java服务器端页面<br> 注释：<code>&lt;%-- --%&gt;</code><br> 3个指令<code>(&lt;%@   page %&gt; &lt;%@   include %&gt; &lt;%@   taglib %&gt;)</code><br> 6个动作标签<code>&lt;jsp:forward&gt;/include/useBean/setProperty/getProperty/param</code><br> 9个内置对象<code>request/response/session/page/pageContext/application/out/config/exception</code><br> 4个作用域<br> <code>pageScope---------&gt;pageContext</code><br> <code>requestScope-----&gt;request</code><br> <code>sessionScope-----session</code><br> <code>applicationScope----&gt;application(ServletContext)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Orcal数据库第一天</title>
      <link href="/2015/04/02/Oracle%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2015/04/02/Oracle%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h4 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h4><ol><li>创建表空间</li><li>创建用户以及授权</li><li>DDL与DML操作</li><li>数据库导入导出<a id="more"></a></li></ol><h3 id="01-什么是ORACLE-avi"><a href="#01-什么是ORACLE-avi" class="headerlink" title="01.什么是ORACLE.avi"></a>01.什么是ORACLE.avi</h3><p>Oracle 数据库<br>ORACLE 数据库的特点</p><ol><li>支持多用户、大事务量的事务处理</li><li>数据安全性和完整性控制</li><li>支持分布式数据处理</li><li>可移植性</li></ol><h3 id="04-ORACLE安装及体系结构讲解-avi"><a href="#04-ORACLE安装及体系结构讲解-avi" class="headerlink" title="04.ORACLE安装及体系结构讲解.avi"></a>04.ORACLE安装及体系结构讲解.avi</h3><p>ORACLE 体系结构<br><img src="http://os4z8t7lb.bkt.clouddn.com/201802052351_41.png" alt="体系结构"><br><img src="http://os4z8t7lb.bkt.clouddn.com/201802052352_10.png" alt="体系结构"></p><p>几个概念</p><ol><li>数据库实例  orcl</li><li>表空间：管理dbf文件</li><li>用户</li><li>表</li></ol><p>几个关系<br>一个实例对应多个表空间<br>一个表空间对应多个用户<br>一个表空间对应多个数据文件(.dbf/.ora)<br>一个用户对应多个表<br>一个表中的数据存储在多个数据文件中<br><img src="http://os4z8t7lb.bkt.clouddn.com/201803250049_580.png" alt="逻辑结构"></p><h3 id="05-远程连接ORACLE-avi"><a href="#05-远程连接ORACLE-avi" class="headerlink" title="05.远程连接ORACLE.avi"></a>05.远程连接ORACLE.avi</h3><p><img src="http://os4z8t7lb.bkt.clouddn.com/201803250817_859.png" alt="数据库远程连接"></p><p>使用工具<code>instantclient_12_1</code></p><h3 id="06-可视化工具安装与配置-avi"><a href="#06-可视化工具安装与配置-avi" class="headerlink" title="06.可视化工具安装与配置.avi"></a>06.可视化工具安装与配置.avi</h3><ol><li>配置PL/SQL developer</li><li>拷贝tnsnames.ora  修改IP</li><li>配置环境变量（tnsnames.ora路径，中文配置）</li></ol><p>设置中文编码<br>查看服务器端编码 <code>select userenv(&#39;language&#39;) from dual</code><br>结果为:<code>AMERICAN_AMERICA.ZHS16GBK</code><br>计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建设置变量名:<code>NLS_LANG</code><br>变量值:查到的值<code>AMERICAN_AMERICA.ZHS16GBK</code></p><blockquote><p>注意事项：安装目录不能有中文和空格，否则连接不上</p></blockquote><h3 id="07-需求分析与表结构-avi"><a href="#07-需求分析与表结构-avi" class="headerlink" title="07.需求分析与表结构.avi"></a>07.需求分析与表结构.avi</h3><p><img src="http://os4z8t7lb.bkt.clouddn.com/201802052337_94.png" alt="表结构"></p><h3 id="08-创建表空间-avi"><a href="#08-创建表空间-avi" class="headerlink" title="08.创建表空间.avi"></a>08.创建表空间.avi</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> waterboss</span><br><span class="line"><span class="keyword">datafile</span> <span class="string">'c:\waterboss.dbf'</span></span><br><span class="line"><span class="keyword">size</span> <span class="number">100</span>m</span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">next</span> <span class="number">10</span>m</span><br></pre></td></tr></table></figure><h3 id="09-创建用户与用户赋权-avi"><a href="#09-创建用户与用户赋权-avi" class="headerlink" title="09.创建用户与用户赋权.avi"></a>09.创建用户与用户赋权.avi</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> wateruser</span><br><span class="line"><span class="keyword">identified</span> <span class="keyword">by</span> itcast</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">tablespace</span> waterboss</span><br></pre></td></tr></table></figure><p>给用户设置权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> wateruser</span><br></pre></td></tr></table></figure><h3 id="10-表的创建修改与删除-avi"><a href="#10-表的创建修改与删除-avi" class="headerlink" title="10.表的创建修改与删除.avi"></a>10.表的创建修改与删除.avi</h3><p>SQL可分为:</p><ol><li>数据定义语言（DDL） : Data Definition Language<br>用于建立、修改、删除数据库对象，包括创建语句(CREATE)、修改语句(ALTER)、删除语句(DROP)，比如使用CREATE TABLE创建表，使用ALTER TABLE修改表，使用DROPTABLE删除表等动作。==这类语言不需要事务的参与，自动提交。==</li><li>数据操纵语言（DML） : Data Manipulation Language<br>用于改变数据库数据，包括INSERT、UPDATE、DELETE三条语句。其中，INSERT语句用于将数据插入到数据库中，UPDATE语句用于更新数据库中已存在的数据，DELETE用于删除数据库中已存在的数据。==DML语言和事务是相关的，执行完DML操作后必须经过事务控制语句提交后才真正的将改变应用到数据库中。==</li><li>事务控制语言（TCL）：Transaction Control Language)<br>用来维护数据一致性的语句，包括提交(COMMIT)、回滚(ROLLBACK)、保存点(SAVEPOINT)三条语句，其中COMMIT用来确认已经进行的数据库改变， ROLLBACK语句用来取消已经进行的数据库改变，当执行DML操作后(也就是上面说的增加、修改、删除等动作)，可以使用COMMIT语句来确认这种改变，或者使用ROLLBACK取消这种改变。SAVEPOINT语句用来设置保存点，使当前的事务可以回退到指定的保存点，便于取消部分改变。</li><li>数据查询语言（DQL）：Data Query Language<br>用来查询所需要的数据。使用最广泛，语法灵活复杂。</li><li>数据控制语言（DCL） : Data Control Language<br>用于执行权限的授予和收回操作、创建用户等，包括授予(GRANT)语句，收回(REVOKE)语句，CREATE USER语句，其中GRANT用于给用户或角色授予权限， REVOKE用于收回用户或角色已有的权限。==DCL语句也不需要事务的参与，是自动提交的。==</li></ol><p>数据类型<br>NUMBER表示数字类型，经常被定义成NUMBER（7，2）形式，其中：<br>    P表示数字的总位数<br>    S表示小数点后面的位数<br>CHAR表示固定长度的字符类型，经常被定义成CHAR（5）形式, N表示占用的字节数，N的最大取值是2000<br>VARCHAR2表示变长的字符类型，定义格式是VARCHAR2（10）, N表示最多可占用的字节数，最大长度是4000字节</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--表的创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">    字段名 类型(长度) primary <span class="keyword">key</span>,</span><br><span class="line">    字段名 类型(长度),</span><br><span class="line">    .......</span><br><span class="line">);</span><br><span class="line"><span class="comment">--表的修改</span></span><br><span class="line"><span class="comment">--增加字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span>(列名 <span class="number">1</span> 类型 [<span class="keyword">DEFAULT</span> 默认值]，列名 <span class="number">1</span> 类型</span><br><span class="line">[<span class="keyword">DEFAULT</span> 默认值]...)</span><br><span class="line"><span class="comment">--修改字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">MODIFY</span>(列名 <span class="number">1</span> 类型 [<span class="keyword">DEFAULT</span> 默认值]，列名 <span class="number">1</span> 类型</span><br><span class="line">[<span class="keyword">DEFAULT</span> 默认值]...)</span><br><span class="line"><span class="comment">--修改字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">RENAME</span> <span class="keyword">COLUMN</span> 原列名 <span class="keyword">TO</span> 新列名</span><br><span class="line"><span class="comment">--删除一个字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名</span><br><span class="line"><span class="comment">--删除多个字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">DROP</span> (列名 <span class="number">1</span>,列名 <span class="number">2.</span>..)</span><br><span class="line"><span class="comment">--表的删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名称</span><br></pre></td></tr></table></figure><h3 id="11-数据增删改-avi"><a href="#11-数据增删改-avi" class="headerlink" title="11.数据增删改.avi"></a>11.数据增删改.avi</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span>   <span class="keyword">INTO</span> 表名[(列名 <span class="number">1</span>，列名 <span class="number">2</span>，...)]<span class="keyword">VALUES</span>(值 <span class="number">1</span>，值 <span class="number">2</span>，...)</span><br><span class="line"><span class="comment">--修改数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名 <span class="number">1</span>=值 <span class="number">1</span>，列名 <span class="number">2</span>=值 <span class="number">2</span>，....WHERE 修改条件</span><br><span class="line"><span class="comment">--删除数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 删除条件</span><br></pre></td></tr></table></figure><p>truncate 与delete区别</p><ol><li>delete 删除的数据可以 rollback</li><li>delete 删除可能产生碎片，并且不释放空间</li><li>truncate 是先摧毁表结构，再重构表结构</li></ol><p>DML（insert update,delete）需要提交事务(update/insert/delete)<br>DDL（create drop alter tuncate）不要提交事务（create/drop/alter/truncate）</p><h3 id="12-JDBC连接Oracle-搭建开发环境和编写工具类-avi"><a href="#12-JDBC连接Oracle-搭建开发环境和编写工具类-avi" class="headerlink" title="12.JDBC连接Oracle-搭建开发环境和编写工具类.avi"></a>12.JDBC连接Oracle-搭建开发环境和编写工具类.avi</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.waterboss.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基本数据访问类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取数据库连接</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.sql.<span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> java.sql.DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@192.168.80.10:1521:orcl"</span>,<span class="string">"wateruser"</span>, <span class="string">"itcast"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 关闭资源</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(java.sql.ResultSet rs, java.sql.Statement stmt,java.sql.Connection conn)</span></span>&#123;</span><br><span class="line">    <span class="comment">//关闭结果集</span></span><br><span class="line">    <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭执行对象</span></span><br><span class="line">    <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭执行对象</span></span><br><span class="line">    <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-JDBC连接Oracle-数据的增删改操作-avi"><a href="#13-JDBC连接Oracle-数据的增删改操作-avi" class="headerlink" title="13.JDBC连接Oracle-数据的增删改操作.avi"></a>13.JDBC连接Oracle-数据的增删改操作.avi</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.waterboss.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.waterboss.entity.Owners;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 业主数据访问类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OwnersDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增业主</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> owners</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Owners owners)</span></span>&#123;</span><br><span class="line">        java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        java.sql.PreparedStatement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=BaseDao.getConnection();</span><br><span class="line">            stmt=conn.prepareStatement(<span class="string">"insert into T_OWNERS</span></span><br><span class="line"><span class="string">            values(?,?,?,?,?,?,?)"</span>);</span><br><span class="line">            stmt.setLong(<span class="number">1</span>, owners.getId());</span><br><span class="line">            stmt.setString(<span class="number">2</span>, owners.getName());</span><br><span class="line">            stmt.setLong(<span class="number">3</span>, owners.getAddressid());</span><br><span class="line">            stmt.setString(<span class="number">4</span>, owners.getHousenumber());</span><br><span class="line">            stmt.setString(<span class="number">5</span>, owners.getWatermeter());</span><br><span class="line">            stmt.setDate(<span class="number">6</span>, <span class="keyword">new</span></span><br><span class="line">            java.sql.Date(owners.getAdddate().getTime()));</span><br><span class="line">            stmt.setLong(<span class="number">7</span>, owners.getOwnertypeid());</span><br><span class="line">            stmt.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeAll(<span class="keyword">null</span>, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改业主</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> owners</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Owners owners)</span></span>&#123;</span><br><span class="line">        java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        java.sql.PreparedStatement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=BaseDao.getConnection();</span><br><span class="line">            stmt=conn.prepareStatement(<span class="string">"update T_OWNERS set</span></span><br><span class="line"><span class="string">            name=?,addressid=?,housenumber=?,"</span></span><br><span class="line">            + <span class="string">"watermeter=?,adddate=?, ownertypeid=? where id=?"</span>);</span><br><span class="line">            stmt.setString(<span class="number">1</span>, owners.getName());</span><br><span class="line">            stmt.setLong(<span class="number">2</span>, owners.getAddressid());</span><br><span class="line">            stmt.setString(<span class="number">3</span>, owners.getHousenumber());</span><br><span class="line">            stmt.setString(<span class="number">4</span>, owners.getWatermeter());</span><br><span class="line">            stmt.setDate(<span class="number">5</span>, <span class="keyword">new</span></span><br><span class="line">            java.sql.Date(owners.getAdddate().getTime()));</span><br><span class="line">            stmt.setLong(<span class="number">6</span>, owners.getOwnertypeid());</span><br><span class="line">            stmt.setLong(<span class="number">7</span>, owners.getId());</span><br><span class="line">            stmt.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeAll(<span class="keyword">null</span>, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除业主</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> owners</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        java.sql.PreparedStatement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=BaseDao.getConnection();</span><br><span class="line">            stmt=conn.prepareStatement(<span class="string">"delete from T_OWNERS where id=?"</span>);</span><br><span class="line">            stmt.setLong(<span class="number">1</span>, id);</span><br><span class="line">            stmt.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeAll(<span class="keyword">null</span>, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-整库导出和导入-avi"><a href="#14-整库导出和导入-avi" class="headerlink" title="14.整库导出和导入.avi"></a>14.整库导出和导入.avi</h3><p>整库导出命令: <code>exp system/itcast full=y</code><br>指定备份文件的名称导出命令: <code>exp system/itcast file=文件名 full=y</code><br>整库导入命令: <code>imp system/itcast full=y</code><br>指定备份文件的名称导入命令: <code>imp system/itcast full=y file=water.dmp</code><br>如果不指定 <code>file</code> 参数，则默认用备份文件 <code>EXPDAT.DMP</code> 进行导入<br>如果指定 <code>file</code> 参数，则按照 <code>file</code> 指定的备份文件进行恢复</p><h3 id="15-按用户和表导入导出-avi"><a href="#15-按用户和表导入导出-avi" class="headerlink" title="15.按用户和表导入导出.avi"></a>15.按用户和表导入导出.avi</h3><p>按用户导出: <code>exp system/itcast owner=wateruser file=wateruser.dmp</code><br>按用户导入: <code>imp system/itcast   file=wateruser.dmp fromuser=wateruser</code></p><p>按表导出：<code>exp wateruser/itcast file=a.dmp tables=t_account,a_area</code><br>按表导入：<code>imp wateruser/itcast file=a.dmp tables=t_account,a_area</code></p><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ol><li>ORACLE特点及体系结构</li><li><p>创建表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> xxxx</span><br><span class="line"> <span class="keyword">datafile</span> ‘位置’</span><br><span class="line"> <span class="keyword">size</span>   <span class="number">100</span>m</span><br><span class="line"> <span class="keyword">autoextend</span>  <span class="keyword">on</span></span><br><span class="line"> <span class="keyword">next</span>   <span class="number">10</span>m</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span>  xxxxx</span><br><span class="line"> <span class="keyword">identified</span> <span class="keyword">by</span>  xxxxx</span><br><span class="line"> <span class="keyword">default</span>   <span class="keyword">tablespace</span> xxxx</span><br></pre></td></tr></table></figure></li><li><p>给用户授权<br><code>grant  dba  to xxxxx</code></p></li><li>表的创建修改删除</li><li>表数据的增删改查</li><li>JDBC操作ORACLE</li><li>数据导入导出<br><code>exp system/xxxxx   full=y  file=xxx.dmp   owner=hello tables=a,b,c</code><br><code>imp system/xxxx  full=y  file=xxx.dmp   fromuser=hello  tables=a,b,c….</code></li></ol><p>Enterprise Manager Database Control URL - (orcl) :<br><a href="http://itcast-0d2699cf.lan:1158/em" target="_blank" rel="noopener">http://itcast-0d2699cf.lan:1158/em</a></p><p>数据库配置文件已经安装到 C:\oracle\product\10.2.0,同时其他选定的安装组件也已经安装到 C:\oracle\product\10.2.0\db_1。<br>iSQL*Plus URL 为:<br><a href="http://itcast-0d2699cf.lan:5560/isqlplus" target="_blank" rel="noopener">http://itcast-0d2699cf.lan:5560/isqlplus</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> orcal </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
