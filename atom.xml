<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JAVA前沿</title>
  
  <subtitle>阙继芳的技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qjiamei.github.io/"/>
  <updated>2019-07-16T00:16:09.686Z</updated>
  <id>https://qjiamei.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELK搭建</title>
    <link href="https://qjiamei.github.io/2019/07/05/ELK%E6%90%AD%E5%BB%BA/"/>
    <id>https://qjiamei.github.io/2019/07/05/ELK搭建/</id>
    <published>2019-07-05T07:42:00.000Z</published>
    <updated>2019-07-16T00:16:09.686Z</updated>
    
    <content type="html"><![CDATA[<p>###一. 搭建的版本是</p><ol><li>下载网址:<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a></li><li>本次搭建 的是7.2.0, es logstash kibana三个软件的版本必须保持一致</li></ol><p>###二. 搭建ES<br>(1). 添加一个用户，无任何提示则表示成功添加。<br><code>[root@localhost soft]# adduser king</code></p><p>(2). 设置用户密码，需要输入两次。其中提示无效的密码可以不用管，是因为密码太简单，不符合安全要求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]# passwd king</span><br><span class="line">更改用户 king 的密码 。</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 过于简单化/系统化</span><br><span class="line">无效的密码： 过于简单</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd： 所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure></p><p>(3). 在根目录下创建一个文件夹soft，并将拥有者更改为king，使用<code>ls -al /soft</code>命令查看此时/soft文件夹的拥有者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# mkdir /soft</span><br><span class="line">[root@localhost /]# chown king /soft</span><br><span class="line">[root@localhost /]# ls -al /soft</span><br><span class="line">drwxr-xr-x.  2 king root 4096 9月   3 01:58 .</span><br><span class="line">dr-xr-xr-x. 26 root root 4096 9月   3 01:58 ..</span><br></pre></td></tr></table></figure></p><p>(4).使用yum安装openjdk1.8，使用yum search jdk1.8搜索安装包,安装好JDK</p><p><strong>(5).至此之前，我们都是使用root身份来操作的，下面使用如下命令切换到king用户。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# su king</span><br><span class="line">[king@localhost /]$ cd /soft</span><br><span class="line">[king@localhost soft]$</span><br></pre></td></tr></table></figure></p><p>(6).下载ElasticSearch并安装<br><code>tar -zxvf elasticsearch</code></p><p>(7). 进入bin目录并启动<br><code>./elasticsearch</code></p><p>(8). 新打开一个窗口,输入<code>curl localhost:9200</code>,如果有以下输出则说明启动成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[king@localhost ~]$ curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;ZGws7ZX&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;yeYDTLbNQ--rmDXMi2xO-g&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;5.5.2&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;b2f0c09&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-08-14T12:33:14.154Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(9). 配置外网启动,在config/elasticsearch.yml添加如下内容<br><code>network.host: 0.0.0.0</code></p><p>(10). 错误处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [3] bootstrap checks failed</span><br><span class="line">#文件句柄太少，至少要65536</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">#最大线程数太少，至少2048个(经典的2048游戏)</span><br><span class="line">[2]: max number of threads [1024] for user [king] is too low, increase to at least [2048]</span><br><span class="line">#虚拟内存太少，至少262144</span><br><span class="line">[3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure></p><p>(11). 切换为root用户,处理错误<br>(12). 更改文件句柄数<code>[root@localhost ~]# vi /etc/security/limits.conf</code><br>    加入如下信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure></p><p>(13). 增加线程数<br><code>[root@localhost ~]# vi /etc/security/limits.d/90-nproc.conf</code><br>将其中的<code>*          soft    nproc     1024</code>修改为<code>*          soft    nproc     2048</code></p><p>(14). 增加虚拟内存<br><code>[root@localhost ~]# vim /etc/sysctl.conf</code><br>在其中添加<code>vm.max_map_count=655360</code></p><p>(15). 这些修改完成后，并没有生效，需要使用以下命令使其生效。<br><code>sysctl -p</code></p><p>(16). 切换为king帐户, 重新启动<br>后台启动命令: <code>nohup ./bin/elasticsearch&amp;</code></p><p>(17). 在后台启动时可以使用<code>tail -fn 200 nohup.out</code>查看日志</p><p>(18).如果不想输出nohup.out文件怎么办呢？也很简单，将输出信息重定向就可以了<br><code>nohup bin/elasticsearch &gt;/dev/null 2&gt;&amp;1 &amp;</code><br>另外一种后台启动方式是<code>bin/elasticsearch -d</code></p><p>(19). 配置修改配置文件<br>必须修改项:<code>cluster.initial_master_nodes: [&quot;node-1&quot;]</code><br>其它<br>[root@elk-node1 ~]# mkdir -p /data/es-data<br>[root@elk-node1 ~]# vim /etc/elasticsearch/elasticsearch.yml                               【将里面内容情况，配置下面内容】<br>cluster.name: huanqiu                            # 组名（同一个组，组名必须一致）<br>node.name: elk-node1                            # 节点名称，建议和主机名一致<br>path.data: /data/es-data                         # 数据存放的路径<br>path.logs: /var/log/elasticsearch/             # 日志存放的路径<br>bootstrap.mlockall: true                         # 锁住内存，不被使用到交换分区去<br>network.host: 0.0.0.0                            # 网络设置<br>http.port: 9200                                    # 端口</p><h3 id="三-安装logstash"><a href="#三-安装logstash" class="headerlink" title="三.安装logstash"></a>三.安装logstash</h3><p>(1). 将下载好的logstash解压到系统对应目录<br><code>tar -zxf logstash-6.0.0.tar.gz</code></p><p>(2). 创建logstash.conf文件<br><code>vim logstash.conf</code>,监听logback日志发送的json信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        port =&gt; 20154</span><br><span class="line">        codec =&gt; &quot;json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">     elasticsearch &#123;</span><br><span class="line">        action =&gt; &quot;index&quot;</span><br><span class="line">        hosts =&gt; [&quot;172.31.224.141:9200&quot;]</span><br><span class="line">        index =&gt; &quot;%&#123;[appname]&#125;&quot;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面的配置文件是监听TCP信息的传入设置,配合logback的日志方式,需要增加四个jar包<br><code>logback-access-1.1.2.jar</code><br><code>logback-classic-1.1.2.jar</code><br><code>logback-core-1.1.2.jar</code><br><code>logstash-logback-encoder-4.11.jar</code></p><p>(3). log.xml的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:noNamespaceSchemaLocation=&quot;http://www.padual.com/java/logback.xsd&quot;</span><br><span class="line">        debug=&quot;false&quot; scan=&quot;true&quot; scanPeriod=&quot;30 second&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;PROJECT&quot; value=&quot;iorder&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;ROOT&quot; value=&quot;logs/$&#123;PROJECT&#125;/&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;FILESIZE&quot; value=&quot;300MB&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;MAXHISTORY&quot; value=&quot;30&quot; /&gt;</span><br><span class="line">    &lt;!-- 总日志大小限制 --&gt;</span><br><span class="line">    &lt;totalSizeCap&gt;20GB&lt;/totalSizeCap&gt;</span><br><span class="line">    &lt;timestamp key=&quot;DATETIME&quot; datePattern=&quot;yyyy-MM-dd HH:mm:ss&quot; /&gt;</span><br><span class="line">    &lt;!-- 控制台打印 --&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder charset=&quot;utf-8&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!-- ERROR 输入到文件，按日期和文件大小 --&gt;</span><br><span class="line">    &lt;appender name=&quot;ERROR&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder charset=&quot;utf-8&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;ERROR&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;ROOT&#125;%d/error.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;MAXHISTORY&#125;&lt;/maxHistory&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;$&#123;FILESIZE&#125;&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- WARN 输入到文件，按日期和文件大小 --&gt;</span><br><span class="line">    &lt;appender name=&quot;WARN&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder charset=&quot;utf-8&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;WARN&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;ROOT&#125;%d/warn.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;MAXHISTORY&#125;&lt;/maxHistory&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;$&#123;FILESIZE&#125;&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- INFO 输入到文件，按日期和文件大小 --&gt;</span><br><span class="line">    &lt;appender name=&quot;INFO&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder charset=&quot;utf-8&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;INFO&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;ROOT&#125;%d/info.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;MAXHISTORY&#125;&lt;/maxHistory&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;$&#123;FILESIZE&#125;&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!-- DEBUG 输入到文件，按日期和文件大小 --&gt;</span><br><span class="line">    &lt;appender name=&quot;DEBUG&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder charset=&quot;utf-8&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;DEBUG&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;ROOT&#125;%d/debug.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;MAXHISTORY&#125;&lt;/maxHistory&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;$&#123;FILESIZE&#125;&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!-- TRACE 输入到文件，按日期和文件大小 --&gt;</span><br><span class="line">    &lt;appender name=&quot;TRACE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder charset=&quot;utf-8&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;[%-5level] %d&#123;$&#123;DATETIME&#125;&#125; [%thread] %logger&#123;36&#125; - %m%n</span><br><span class="line">            &lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;TRACE&lt;/level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;rollingPolicy</span><br><span class="line">                class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;ROOT&#125;%d/trace.%i.log&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;MAXHISTORY&#125;&lt;/maxHistory&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;$&#123;FILESIZE&#125;&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;!--向logstash发送数据  线上服务的端口就是20514--&gt;</span><br><span class="line">    &lt;appender name=&quot;logstash&quot; class=&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt;</span><br><span class="line">        &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">        &lt;remoteHost&gt;192.168.1.100&lt;/remoteHost&gt;</span><br><span class="line">        &lt;port&gt;20514&lt;/port&gt;</span><br><span class="line">        &lt;!-- &lt;filter class=&quot;com.program.interceptor.ELKFilter&quot;/&gt;--&gt;//引入过滤类</span><br><span class="line">        &lt;!-- encoder is required --&gt;</span><br><span class="line">        &lt;encoder charset=&quot;UTF-8&quot; class=&quot;net.logstash.logback.encoder.LogstashEncoder&quot; &gt;</span><br><span class="line">            &lt;customFields&gt;&#123;&quot;appname&quot;:&quot;appname&quot;&#125;&lt;/customFields&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- SQL相关日志输出--&gt;</span><br><span class="line">    &lt;logger name=&quot;org.apache.ibatis&quot; level=&quot;INFO&quot; additivity=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;logger name=&quot;org.mybatis.spring&quot; level=&quot;INFO&quot; additivity=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;logger name=&quot;com.github.miemiedev.mybatis.paginator&quot; level=&quot;INFO&quot; additivity=&quot;false&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Logger 根目录 --&gt;</span><br><span class="line">    &lt;root level=&quot;DEBUG&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;DEBUG&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;ERROR&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;WARN&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;INFO&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;TRACE&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;logstash&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>(4). 配置说明logstash的配置氛围三大块(input,filter,output)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input</span><br><span class="line"></span><br><span class="line">定义输入流，我们这里使用beatfile进行输入，所以定义很简单。</span><br><span class="line"></span><br><span class="line">filter==&gt;grok</span><br><span class="line"></span><br><span class="line">对filebeat的输入信息进行处理，根据正则匹配日志中的每一行信息，将信息格式化成相应的字段，发送给ElasticSearch进行存储。(稍后进行详细说明)。</span><br><span class="line"></span><br><span class="line">output</span><br></pre></td></tr></table></figure></p><p>(5). 验证和启动,中间的那个路径是配置文件所在目录的上一层目录位置<br>前台启动验证:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前台启动:/usr/bin/logstash --path.settings /etc/logstash/ -f /etc/logstash/conf.d/logstash.conf  --config.test_and_exit</span><br><span class="line">后台启动:/home/elasticSearch/logstash-7.2.0/bin/logstash --path.settings /home/elasticSearch/logstashconfig/ -f /home/elasticSearch/logstashconfig/logstash.conf</span><br></pre></td></tr></table></figure></p><p>(6).其它操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">验证</span><br><span class="line">echo &quot;hello world&quot; &gt;/var/opt/log/a.log</span><br><span class="line">curl http://192.168.1.100:9200/_search?pretty 查看输出</span><br><span class="line"></span><br><span class="line">删除索引</span><br><span class="line"> </span><br><span class="line">curl -XDELETE http://192.168.1.100:9200/_all</span><br><span class="line"></span><br><span class="line">列出所有索引</span><br><span class="line">curl -u elastic:changeme &apos;http://192.168.1.100:9200/_cat/indices?v&apos;</span><br><span class="line"></span><br><span class="line">查看节点个数</span><br><span class="line">curl http://localhost:9200/_cluster/health?pretty</span><br></pre></td></tr></table></figure></p><h3 id="四-Kibana安装与配置"><a href="#四-Kibana安装与配置" class="headerlink" title="四.Kibana安装与配置"></a>四.Kibana安装与配置</h3><p>(1). kibana的启动在新版中也必须使用普通用户权限,所以请切换到king帐户来启动</p><p>(2). 将下载好的Kibana解压到对应的目录<br><code>tar -zxf kibana-6.0.0-linux-x86_64.tar.gz</code></p><p>(3).在配置文件中config/kibana.yml添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将本机的外网ip地址配置上，这样外网才能访问到（更换为你的ip地址））。</span><br><span class="line">server.host: &quot;172.16.160.176&quot;</span><br><span class="line">#配置Elastic的地址，同台机器使用localhost,不同机器使用ip(我是和ES安装一起的)</span><br><span class="line">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br></pre></td></tr></table></figure></p><p>(4). 进入到程序解压目录<br><code>bin/kibana</code><br>查看里程<code>netstat -tunlp|grep 5601</code></p><p>(5).外网访问<br><code>http://ip:5601</code></p><h3 id="五-使用rsyslog采集操作系统日志发送给logstash"><a href="#五-使用rsyslog采集操作系统日志发送给logstash" class="headerlink" title="五.使用rsyslog采集操作系统日志发送给logstash\"></a>五.使用rsyslog采集操作系统日志发送给logstash\</h3><p>(1). linux系统的日志路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/var/log/secure：系统安装日志，文本格式，应周期性分析</span><br><span class="line">/var/log/btmp：当前系统上，用户的失败尝试登录相关的日志信息，二进制格式，lastb命令进行查看</span><br><span class="line">/var/log/wtmp：当前系统上，用户正常登录系统的相关日志信息，二进制格式，last命令可以查看</span><br><span class="line">/var/log/lastlog:每一个用户最近一次的登录信息，二进制格式，lastlog命令可以查看</span><br><span class="line">/var/log/dmesg：系统引导过程中的日志信息，文本格式，专用命令dmesg查看</span><br><span class="line">/var/log/messages ：系统中大部分的信息</span><br><span class="line">/var/log/anaconda/* : anaconda的日志</span><br></pre></td></tr></table></figure></p><p>(2).收集用户的行为日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. vim /etc/bashrc</span><br><span class="line">增加配置: export PROMPT_COMMAND=&apos;&#123; msg=$(history 1 | &#123; read x y; echo $y; &#125;);logger &quot;[euid=$(whoami)]&quot;:$(who am i):[`pwd`]&quot;$msg&quot;; &#125;&apos;</span><br><span class="line">刷新配置: source /etc/bashrc</span><br><span class="line">2.查看日志汇总</span><br><span class="line">tail -f /var/log/messages</span><br></pre></td></tr></table></figure></p><p>(3).可选,使用如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;*.* @192.168.154.128&quot; &gt;&gt; /etc/syslog.conf</span><br><span class="line">service syslog restart</span><br></pre></td></tr></table></figure></p><p>(4).我的配置,第三步可省略,如下配置可监管<code>/var/log/message</code>下的记录<br>修改rsyslog的配置文件<br>[root@centos-yum ~]# vi /etc/rsyslog.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">*增加以下内容 </span><br><span class="line">template(name=&quot;json_lines&quot; type=&quot;list&quot; option.json=&quot;on&quot;) &#123;</span><br><span class="line">  constant(value=&quot;&#123;&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;timestamp\&quot;:\&quot;&quot;)</span><br><span class="line">  property(name=&quot;timereported&quot; dateFormat=&quot;rfc3339&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;,\&quot;message\&quot;:\&quot;&quot;)</span><br><span class="line">  property(name=&quot;msg&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;,\&quot;host\&quot;:\&quot;&quot;)</span><br><span class="line">  property(name=&quot;hostname&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;,\&quot;severity\&quot;:\&quot;&quot;)</span><br><span class="line">  property(name=&quot;syslogseverity-text&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;,\&quot;facility\&quot;:\&quot;&quot;)</span><br><span class="line">  property(name=&quot;syslogfacility-text&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;,\&quot;app-name\&quot;:\&quot;&quot;)</span><br><span class="line">  property(name=&quot;programname&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;,\&quot;procid\&quot;:\&quot;&quot;)</span><br><span class="line">  property(name=&quot;procid&quot;)</span><br><span class="line">  constant(value=&quot;\&quot;&#125;\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">action(</span><br><span class="line">    type=&quot;omfwd&quot;</span><br><span class="line">    Target=&quot;10.20.20.67&quot;</span><br><span class="line">    Port=&quot;8515&quot;</span><br><span class="line">    Protocol=&quot;tcp&quot;</span><br><span class="line">    template=&quot;json_lines&quot;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure></p><p>(5).对应的logstash配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input &#123;    </span><br><span class="line">    tcp &#123;        </span><br><span class="line">        port =&gt; &quot;8515&quot;        </span><br><span class="line">        codec =&gt; &quot;json&quot;        </span><br><span class="line">        type =&gt; &quot;syslog-json&quot;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(6).如果是多个配置文件,请直接放一个文件下,直接启动指定的路径即可<br><code>nohup ./logstash -f /home/elasticSearch/logstashconfig/ &gt;/dev/null &amp;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###一. 搭建的版本是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载网址:&lt;a href=&quot;https://www.elastic.co/cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/cn/&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="elk" scheme="https://qjiamei.github.io/categories/elk/"/>
    
    
      <category term="运维" scheme="https://qjiamei.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>mysql5.7-centos7的安装</title>
    <link href="https://qjiamei.github.io/2019/06/16/mysql5.7-centos7%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://qjiamei.github.io/2019/06/16/mysql5.7-centos7的安装/</id>
    <published>2019-06-16T07:42:00.000Z</published>
    <updated>2019-06-16T10:47:57.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-centos-7-安装mysql5-7"><a href="#一-centos-7-安装mysql5-7" class="headerlink" title="一.centos 7 安装mysql5.7"></a>一.centos 7 安装mysql5.7</h3><ol><li>安装MySQL官方的Yum Repository<br><code>wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</code></li><li>安装这个rmp包<br><code>yum -y install mysql57-community-release-el7-10.noarch.rpm</code></li><li>安装MYSQL服务<br><code>yum -y install mysql-community-server</code></li><li>启动mysql服务<br><code>systemctl start  mysqld.service</code></li><li>查看mysql状态<br><code>systemctl status mysqld.service</code></li><li><p>可以看到mysql服务的运行状态，出现下面的信息，其中Active后面代表状态启功服务后为active (running)，停止后为inactive (dead)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status mysqld.service</span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 三 2018-02-14 10:12:13 CST; 3min 31s ago</span><br><span class="line">     Docs: man:mysqld(8)</span><br><span class="line">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">  Process: 1424 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 935 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 1427 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─1427 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid...</span><br><span class="line"></span><br><span class="line">2月 14 10:11:53 localhost.localdomain systemd[1]: Starting MySQL Server...</span><br><span class="line">2月 14 10:12:13 localhost.localdomain systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure></li><li><p>安装完成后默认有一个root用户，初始密码已经设置好，我们需要获得这个初始密码登录后再对其进行修改</p><ul><li>为了加强安全性，MySQL5.7为root用户随机生成了一个密码，在error log中，关于error log的位置，如果安装的是RPM包，则默认是/var/log/mysqld.log。<br>只有启动过一次mysql才可以查看临时密码</li></ul></li></ol><ul><li>通过下面的命令查看初始密码，冒号后面的字符就是密码</li><li><code>grep &#39;temporary password&#39; /var/log/mysqld.log</code></li></ul><p>8 .登陆root用户<br><code>[root@localhost ~]# mysql -u root -p</code></p><ol start="9"><li><p>修改密码约束</p><ul><li>提示输入密码，输入初始密码，使用该密码之后需要设置自己的密码，但是mysql对密码有要求，我们想要设置简单的密码必须要修改约束，修改两个全局参数：</li><li>validate_password_policy代表密码策略，默认是1：符合长度，且必须含有数字，小写或大写字母，特殊字符。设置为0判断密码的标准就基于密码的长度了。一定要先修改两个参数再修改密码</li><li><code>mysql&gt; set global validate_password_policy=0;</code></li><li>validate_password_length代表密码长度，最小值为4</li><li><code>mysql&gt; set global validate_password_length=4;</code></li><li>修改密码为root，之后就可以使用该密码登录了</li><li><code>mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root&#39;;</code></li></ul></li><li><p>在CentOS中mysql的主要配置所在的目录：</p><ul><li>/etc/my.cnf    这是mysql的主配置文件</li><li>/var/lib/mysql mysql数据库的数据库文件存放位置</li><li>/var/log mysql数据库的日志输出存放位置</li></ul></li><li><p>配置远程登陆权限(帐号密码都是root)<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39;IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</code></p></li><li>刷新权限<br><code>flush privileges;</code></li><li>exit退出root帐号</li><li><p>配置默认编码为utf8</p><ul><li>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&apos;SET NAMES utf8&apos;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启一下mysql<br><code>systemctl restart  mysqld.service</code></p></li><li>外部可以连接了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-centos-7-安装mysql5-7&quot;&gt;&lt;a href=&quot;#一-centos-7-安装mysql5-7&quot; class=&quot;headerlink&quot; title=&quot;一.centos 7 安装mysql5.7&quot;&gt;&lt;/a&gt;一.centos 7 安装mysql5.7&lt;/
      
    
    </summary>
    
      <category term="mysql" scheme="https://qjiamei.github.io/categories/mysql/"/>
    
    
      <category term="数据库" scheme="https://qjiamei.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>redis5.0集群</title>
    <link href="https://qjiamei.github.io/2019/06/14/redis%205.X%E9%9B%86%E7%BE%A4/"/>
    <id>https://qjiamei.github.io/2019/06/14/redis 5.X集群/</id>
    <published>2019-06-14T07:42:00.000Z</published>
    <updated>2019-06-14T08:38:18.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-去官网先下载5-0tar-包"><a href="#一-去官网先下载5-0tar-包" class="headerlink" title="一.去官网先下载5.0tar 包"></a>一.去官网先下载5.0tar 包</h3><ol><li>增加帐号<br><code>useradd redisuser</code></li><li>设置密码<br><code>passwd 123456</code></li><li>解压安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf  redis-5.0.2.tar.gz</span><br><span class="line">cd redis-5.0.2</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ol><p>4.配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bind 192.168.127.130  //绑定服务器IP地址</span><br><span class="line">port 7000  //绑定端口号，必须修改，以此来区分Redis实例</span><br><span class="line">daemonize yes  //后台运行</span><br><span class="line">pidfile /var/run/redis-7000.pid  //修改pid进程文件名，以端口号命名</span><br><span class="line">logfile /root/application/program/redis-cluster/7000/redis.log  //修改日志文件名称，以端口号为目录来区分</span><br><span class="line">dir /root/application/program/redis-cluster/7000/  //修改数据文件存放地址，以端口号为目录名来区分</span><br><span class="line">cluster-enabled yes  //启用集群</span><br><span class="line">cluster-config-file nodes-7000.conf  //配置每个节点的配置文件，同样以端口号为名称</span><br><span class="line">cluster-node-timeout 15000  //配置集群节点的超时时间，可改可不改</span><br><span class="line">appendonly yes  //启动AOF增量持久化策略</span><br><span class="line">appendfsync always  //发生改变就记录日志</span><br><span class="line">masterauth 123456</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure></p><ol start="5"><li>在不同服务器上启动多个实例<br><code>redis-server redis-cluster/7000/redis.conf</code></li><li>5.0版的做集群可以不使用ruby,直接使用redis-cli<br><code>redis-cli --cluster create 172.16.7.240:7000 172.16.7.240:7001 172.16.7.240:7002 172.16.7.240:7003 172.16.7.240:7004 172.16.7.240:7005--cluster-replicas 1</code></li><li>这个小命令可以快速替换配置文件中的字符<br><code>%s/47.98.223.117/172.16.7.240/g</code></li><li>连接命令(端口和连接密码)<br><code>redis-cli -c -h 127.0.0.1 -p 7000 -a 123456</code></li><li>进入后使用命令查看节点信息<br><code>info replication</code></li><li>至些安装完成,可以进去后 <code>set name que</code> 然后去从节点看一下,是否同步过去了.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-去官网先下载5-0tar-包&quot;&gt;&lt;a href=&quot;#一-去官网先下载5-0tar-包&quot; class=&quot;headerlink&quot; title=&quot;一.去官网先下载5.0tar 包&quot;&gt;&lt;/a&gt;一.去官网先下载5.0tar 包&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;增加帐号&lt;br&gt;
      
    
    </summary>
    
      <category term="redis" scheme="https://qjiamei.github.io/categories/redis/"/>
    
    
      <category term="linux" scheme="https://qjiamei.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>安装MariaDB和配置远程连接</title>
    <link href="https://qjiamei.github.io/2019/05/17/%E5%AE%89%E8%A3%85MariaDB%E5%92%8C%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>https://qjiamei.github.io/2019/05/17/安装MariaDB和配置远程连接/</id>
    <published>2019-05-17T07:42:00.000Z</published>
    <updated>2019-05-17T08:31:29.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-安装MariaDB"><a href="#一-安装MariaDB" class="headerlink" title="一. 安装MariaDB"></a>一. 安装MariaDB</h3><ul><li>1.<code>yum -y install mariadb mariadb-server</code></li><li>2.<code>systemctl start mariadb</code>启动服务</li><li>3.<code>systemctl enable mariadb</code>开机自启</li><li><p>4.<code>mysql_secure_installation</code>初始化数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意：在上图中的Enter current passwdord for root处，我们直接敲回车键即可。因为centos7上mysql的默认root用户密码为空。</span><br><span class="line">上图中主要是为root用户配置密码，并刷新相关权限。（密码设为123456，只为实验用，生产环境自定义）</span><br><span class="line">Remove anonymous users? 删除匿名用户？</span><br><span class="line">Disallow root login remotely? 禁止root远程登陆</span><br><span class="line">Remove test database and access to it? 删除测试数据库并且和访问它</span><br><span class="line">Reload privilege tables now? 重新载入特权表</span><br><span class="line">上图中主要是配置匿名用户、test用户以及root用户远程连接等相关配置。</span><br></pre></td></tr></table></figure></li><li><p>5.mysql初始化完毕后，我们现在来创建zabbix数据库及其用户，使用如下命令：<br><code>mysql -uroot -proot -e &quot;create database zabbix default character set utf8 collate utf8_bin;&quot;</code><br><code>mysql -uroot -proot -e &quot;grant all privileges on zabbix.* to zabbix@localhost identified by &#39;zabbix&#39;&quot;</code></p></li><li>6.现在来测试刚刚创建的zabbix用户，是否可以连接mysql数据库，如下<br><code>mysql -uzabbix -pzabbix</code><br><code>show databases;</code><br><code>quit</code></li><li><strong>7.首先配置允许访问的用户，采用授权的方式给用户权限</strong><br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39;IDENTIFIED BY &#39;root&#39; WITH GRANT OPTION;</code><br>说明：root是登陆数据库的用户，123456是登陆数据库的密码，*就是意味着任何来源任何主机反正就是权限很大的样子。</li><li><strong>8.最后配置好权限之后不应该忘记刷新使之生效</strong><br><code>flush privileges;</code></li></ul><h3 id="二-配置字符集工作"><a href="#二-配置字符集工作" class="headerlink" title="二.配置字符集工作"></a>二.配置字符集工作</h3><ul><li><p>1.配置MariaDB的字符集</p></li><li><p>2.文件/etc/my.cnf<br>vi /etc/my.cnf<br>在[mysqld]标签下添加<br>init_connect=’SET collation_connection = utf8_unicode_ci’<br>init_connect=’SET NAMES utf8’<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>文件/etc/my.cnf.d/client.cnf</p></li><li><p>3.vi /etc/my.cnf.d/client.cnf<br>在[client]中添加<br>default-character-set=utf8</p></li><li><p>4.文件/etc/my.cnf.d/mysql-clients.cnf<br>vi /etc/my.cnf.d/mysql-clients.cnf</p></li><li><p>5.在[mysql]中添加<br>default-character-set=utf8</p></li><li>6.全部配置完成，重启mariadb<br><code>systemctl restart mariadb</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-安装MariaDB&quot;&gt;&lt;a href=&quot;#一-安装MariaDB&quot; class=&quot;headerlink&quot; title=&quot;一. 安装MariaDB&quot;&gt;&lt;/a&gt;一. 安装MariaDB&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.&lt;code&gt;yum -y install mar
      
    
    </summary>
    
      <category term="mariaDB" scheme="https://qjiamei.github.io/categories/mariaDB/"/>
    
    
      <category term="linux" scheme="https://qjiamei.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ngnix主备高可用搭建</title>
    <link href="https://qjiamei.github.io/2019/05/17/ngnix%E4%B8%BB%E5%A4%87%E9%AB%98%E5%8F%AF%E7%94%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://qjiamei.github.io/2019/05/17/ngnix主备高可用搭建/</id>
    <published>2019-05-17T03:42:00.000Z</published>
    <updated>2019-05-17T03:46:52.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-ngnix的搭建"><a href="#一-ngnix的搭建" class="headerlink" title="一.ngnix的搭建"></a>一.ngnix的搭建</h3><ul><li>(1). 安装依赖包<br><code>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></li><li><p>(2). 下载并解压安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建一个文件夹</span><br><span class="line">cd /usr/local</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx</span><br><span class="line">//下载tar包</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>(3). 安装nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//进入nginx目录</span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">//执行命令</span><br><span class="line">./configure</span><br><span class="line">//执行make命令</span><br><span class="line">make</span><br><span class="line">//执行make install命令</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>(4).配置nginx.conf<br><code>vi /usr/local/nginx/conf/nginx.conf</code><br>将端口号改成8089，因为可能apeache占用80端口，apeache端口尽量不要修改，我们选择修改nginx端口。</p></li><li><p>(5).启动nginx<br><code>/usr/local/nginx/sbin/nginx -s reload</code></p></li><li><p>(6). 常用命令</p></li></ul><ol><li>进入安装目录中，<br>命令： cd /usr/local/nginx/sbin</li><li>启动，关闭，重启，命令：<br>./nginx 启动<br>./nginx -s stop 关闭<br>./nginx -s reload 重启</li></ol><h3 id="二-安装keepalived"><a href="#二-安装keepalived" class="headerlink" title="二.安装keepalived"></a>二.安装keepalived</h3><ul><li><p>(1).注意:主nginx和备nginx都必须安装.<br>通过keepalived的虚拟ip来访问nginx上的ip地址,主挂了,会自动切换到备上来</p></li><li><p>(2).安装</p><ul><li>下载keepalived地址：<a href="http://www.keepalived.org/download.html" target="_blank" rel="noopener">http://www.keepalived.org/download.html</a><br>解压安装：</li><li><code>tar -zxvf keepalived-1.2.18.tar.gz -C /usr/local/</code></li><li><code>yum install -y openssl openssl-devel（需要安装一个软件包）</code></li><li><code>cd keepalived-1.2.18/ &amp;&amp; ./configure --prefix=/usr/local/keepalived</code></li><li><code>make &amp;&amp; make install</code></li></ul></li><li><p>(3).keepalived安装成Linux系统服务</p><ul><li>将keepalived安装成Linux系统服务，因为没有使用keepalived的默认安装路径（默认路径：/usr/local）,安装完成之后，需要做一些修改工作：</li><li>首先创建文件夹，将keepalived配置文件进行复制：<br> <code>mkdir /etc/keepalived</code></li><li>1.把keeplived.conf复制到系统的etc下<br><code>cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</code></li><li>2.然后复制keepalived脚本文件：(init.d下)<br><code>cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/</code></li><li>3.复制到(sysconfig/keepalived到etc/sysconfig下)<br><code>cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</code></li><li>4.建立软连接到usr/sbin/<br><code>ln -s /usr/local/sbin/keepalived /usr/sbin/</code></li><li>5.建立软连接/sbin/(这里会显示错误,请删除软链接再执行下面命令)<br> <code>ln -s /usr/local/keepalived/sbin/keepalived /sbin/</code></li><li>6.可以设置开机启动：<code>chkconfig keepalived on</code>，到此我们安装完毕!</li><li>7.keepalived 常用命令<br><code>service keepalived start</code><br><code>service keepalived stop</code></li></ul></li></ul><h3 id="三-配置nginx主备自动重启"><a href="#三-配置nginx主备自动重启" class="headerlink" title="三.配置nginx主备自动重启"></a>三.配置nginx主备自动重启</h3><ul><li><p>1.对配置文件进行修改：vim /etc/keepalived/keepalived.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id bhz005 ##标识节点的字符串，通常为hostname</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span># keepalived 会定时执行脚本并且对脚本的执行结果进行分析，动态调整vrrp_instance的优先级。这里的权重weight 是与下面的优先级priority有关，如果执行了一次检查脚本成功，则权重会-20，也就是由100 - 20 变成了80，Master 的优先级为80 就低于了Backup的优先级90，那么会进行自动的主备切换。</span><br><span class="line">如果脚本执行结果为0并且weight配置的值大于0，则优先级会相应增加。</span><br><span class="line">如果脚本执行结果不为0 并且weight配置的值小于0，则优先级会相应减少。</span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script "/etc/keepalived/nginx_check.sh" ##执行脚本位置</span><br><span class="line">    interval 2 ##检测时间间隔</span><br><span class="line">    weight -20 ## 如果条件成立则权重减20（-20）</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span># 定义虚拟路由 VI_1为自定义标识。</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">state MASTER   ## 主节点为MASTER，备份节点为BACKUP</span><br><span class="line">    ## 绑定虚拟IP的网络接口（网卡），与本机IP地址所在的网络接口相同（我这里是eth6）</span><br><span class="line">interface eth6  ##1.这里修改成自己网卡的</span><br><span class="line">virtual_router_id 172  ## 虚拟路由ID号</span><br><span class="line">    mcast_src_ip 192.168.1.172  ## 2.本机ip地址</span><br><span class="line">    priority 100  ##3.优先级配置（0-254的值）,备机就配成90</span><br><span class="line">    Nopreempt  ## </span><br><span class="line">    advert_int 1 ## 组播信息发送间隔，俩个节点必须配置一致，默认1s</span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass bhz ## 真实生产环境下对密码进行匹配</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.170 ## 4.虚拟ip(vip)，可以指定多个</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.跟上面conf文件放一起的sell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">A=`ps -C nginx –no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>3.至此实现了高可用</p><ul><li>访问由keepalived虚拟成的ip,当检测到主ngnix挂了,会立即重启nginx,但权重从100降到80</li><li>这样的话备机的权重就是90,就会切换到备机去了,主机的ngnix也是经过了重启的.<figure class="highlight plain"><figcaption><span>会定时执行脚本并且对脚本的执行结果进行分析，动态调整vrrp_instance的优先级。这里的权重weight 是与下面的优先级priority有关，如果执行了一次检查脚本成功，则权重会-20，也就是由100 - 20 变成了80，Master 的优先级为80 就低于了Backup的优先级90，那么会进行自动的主备切换。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果脚本执行结果为0并且weight配置的值大于0，则优先级会相应增加。</span><br><span class="line">如果脚本执行结果不为0 并且weight配置的值小于0，则优先级会相应减少。</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-ngnix的搭建&quot;&gt;&lt;a href=&quot;#一-ngnix的搭建&quot; class=&quot;headerlink&quot; title=&quot;一.ngnix的搭建&quot;&gt;&lt;/a&gt;一.ngnix的搭建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;(1). 安装依赖包&lt;br&gt;&lt;code&gt;yum -y insta
      
    
    </summary>
    
      <category term="ngnix" scheme="https://qjiamei.github.io/categories/ngnix/"/>
    
    
      <category term="linux" scheme="https://qjiamei.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>jQuery之二(操作)</title>
    <link href="https://qjiamei.github.io/2019/04/29/jQuery%E4%B9%8B%E4%BA%8C/"/>
    <id>https://qjiamei.github.io/2019/04/29/jQuery之二/</id>
    <published>2019-04-29T02:16:00.000Z</published>
    <updated>2019-04-29T01:06:22.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-jQuery操作样式-css"><a href="#一-jQuery操作样式-css" class="headerlink" title="一.jQuery操作样式(css)"></a>一.jQuery操作样式(css)</h3><p>1.设置单个样式<br><code>$(&quot;#one&quot;).css(&quot;background&quot;,&quot;gray&quot;);</code><br>2.设置多个样式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#one"</span>).css(&#123;</span><br><span class="line">    <span class="string">"background"</span>:<span class="string">"gray"</span>,</span><br><span class="line">    <span class="string">"width"</span>:<span class="string">"400px"</span>,</span><br><span class="line">    <span class="string">"height"</span>:<span class="string">"200px"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ol start="3"><li>获取样式<br><code>$(&quot;li&quot;).css(&quot;fontSize&quot;)</code></li><li>注意,jQuery在设置css样式的时候,它会隐匿迭代,比如设置字体大小为16,去使用css获取样式的时候,只会取第一个值,如图,只会返回20px的值</li><li><img src="http://video.quejifang.cn/201904232307_715.png" alt=""></li></ol><h3 id="二-jQuery操作样式-class"><a href="#二-jQuery操作样式-class" class="headerlink" title="二.jQuery操作样式(class)"></a>二.jQuery操作样式(class)</h3><p>适合给多个标签添加样式</p><ol><li>添加样式<code>addClass(name)</code><br><code>$(&quot;div&quot;).addClass(&quot;one&quot;)</code></li><li>移除样式<code>removeClass</code><br><code>$(&quot;div&quot;).removeClass(&quot;one&quot;)</code></li><li>判断是否有某个样式<code>hasClass(name)</code><br><code>$(&quot;div&quot;).hasClass(&quot;one&quot;)</code></li><li>切换样式类<br>toggleClass(name);<br><code>$(&quot;div&quot;).toggleClass(&quot;one&quot;);</code></li></ol><h3 id="三-jQuery操作属性"><a href="#三-jQuery操作属性" class="headerlink" title="三.jQuery操作属性"></a>三.jQuery操作属性</h3><p>注意: style <strong>里面的是样式,用CSS()方法操作,而标签属性里面的属性是用attr方法操作</strong></p><p>1.设置单个属性<br><code>$(&quot;img&quot;).attr(&quot;alt&quot;,&quot;图破了&quot;)</code><br>2.设置多个属性,对象形式<br><code>$(&quot;img&quot;).attr({alt:&quot;图破了&quot;,title:&quot;错错错&quot;})</code><br>3.获取属性<br><code>var a = $(&quot;img&quot;).attr(&quot;alt&quot;)</code></p><p>4.<strong>对于布尔类型的属性,不要用attr方法,应该使用prop方法</strong>比如checke,selected,desabled.使用prop方法属性没设置,就拿到false,设置了就拿到true;</p><p>5.移除属性  <code>removeAttr(name)</code><br>6.括号属性里不用加点</p><h3 id="三-jQuery操作动画"><a href="#三-jQuery操作动画" class="headerlink" title="三.jQuery操作动画"></a>三.jQuery操作动画</h3><ol><li><code>show() hide()</code>,里面可以传毫秒值,也可以传”fast”200ms,”normal”=400ms,”slow”=600ms</li><li>还可以写回调<br><code>$(&quot;div&quot;).show(1000,function(){console.log(&quot;动画执行完毕&quot;)})</code></li></ol><p>3.滑入<code>sildeup()</code>,滑出<code>sildedown()</code> 切换<code>$(&quot;div&quot;).slideToggle();</code></p><ul><li>不传参数,就是normal</li><li>也可以传回调,用show方法回调函数一样</li><li>slideToggle()逻辑是如果是滑入,就执行滑出.</li></ul><ol start="4"><li>淡入淡出(跟滑入滑出差不多)<ul><li>淡入:fadeIn()</li><li>淡出:fadeOut()</li><li>切换:<code>fadeToggle()</code></li></ul></li></ol><p>5.自定义动画<code>animate(对象,时间,动画效果,回调)</code><br><img src="http://video.quejifang.cn/201904250020_318.png" alt=""></p><p>6.stop的使用<br><img src="http://video.quejifang.cn/201904252254_479.png" alt=""></p><p>7.视频标签</p><ul><li>音频和视频,jQuery没有封闭,必须用js来操作</li><li>controls 进度条</li><li>autoplay 自动播放</li><li>loop 循环播放<br><img src="http://video.quejifang.cn/201904252325_711.png" alt=""></li></ul><h3 id="四-节点操作"><a href="#四-节点操作" class="headerlink" title="四. 节点操作"></a>四. 节点操作</h3><ul><li><code>$(&quot;div&quot;).append($(&quot;p&quot;));</code>添加到子元素后面</li><li><code>$(&quot;p&quot;).appendTo($(&quot;div&quot;))</code> 把p添加到div里,用得多的是这种</li><li><code>$(&quot;div&quot;).prepend($(&quot;p&quot;));</code>添加到子元素前面</li><li><code>$(&quot;p&quot;).prependTo($(&quot;div&quot;))</code></li><li><code>$(&quot;div&quot;).after($(&quot;p&quot;));</code>作为兄弟元素添加到后面</li><li><ul><li><code>$(&quot;div&quot;).before($(&quot;p&quot;));</code>作为兄弟元素添加到前面</li></ul></li></ul><ol><li>清空节点与删除节点</li><li>$(“div”).epmty()或者$(“div”).hmtl(“”);后面存在内存泄露</li><li>$(“div”).remove();</li></ol><h3 id="四-节点操作-克隆"><a href="#四-节点操作-克隆" class="headerlink" title="四. 节点操作(克隆)"></a>四. 节点操作(克隆)</h3><p>$(“.des”).clone(true).appendTo(“div”)<br>默认是false.默认深度复制,但是传true会复制事件.<br><img src="http://video.quejifang.cn/201904260021_928.png" alt=""></p><h3 id="五-特殊方法"><a href="#五-特殊方法" class="headerlink" title="五.特殊方法"></a>五.特殊方法</h3><h4 id="1-val方法"><a href="#1-val方法" class="headerlink" title="1. val方法"></a>1. val方法</h4><ul><li>val方法用于设置和获取表单元素的值，例如input、textarea的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">"#name"</span>).val(“张三”);</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">$(<span class="string">"#name"</span>).val();</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-html方法与text方法"><a href="#2-html方法与text方法" class="headerlink" title="2. html方法与text方法"></a>2. html方法与text方法<img src="http://video.quejifang.cn/201904262238_914.png" alt=""></h4><ul><li>html方法相当于innerHTML  text方法相当于innerText<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置内容</span></span><br><span class="line">$(“div”).html(“&lt;span&gt;这是一段内容&lt;<span class="regexp">/span&gt;”);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/获取内容</span></span><br><span class="line"><span class="regexp">$(“div”).html()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/设置内容</span></span><br><span class="line"><span class="regexp">$(“div”).text(“&lt;span&gt;这是一段内容&lt;/</span>span&gt;”);</span><br><span class="line"><span class="comment">//获取内容</span></span><br><span class="line">$(“div”).text()</span><br></pre></td></tr></table></figure></li></ul><p>区别：html方法会识别html标签，text方法会那内容直接当成字符串，并不会识别html标签。</p><h4 id="3-width方法与height方法"><a href="#3-width方法与height方法" class="headerlink" title="3. width方法与height方法"></a>3. width方法与height方法</h4><p><img src="http://video.quejifang.cn/201904262238_914.png" alt=""></p><h4 id="4-scrollTop与scrollLeft"><a href="#4-scrollTop与scrollLeft" class="headerlink" title="4. scrollTop与scrollLeft"></a>4. scrollTop与scrollLeft</h4><ul><li>设置或者获取垂直滚动条的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取页面被卷曲的高度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="comment">//获取页面被卷曲的宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft();</span><br></pre></td></tr></table></figure><p><img src="http://video.quejifang.cn/201904262241_713.png" alt=""></p><h4 id="5-offset方法与position方法"><a href="#5-offset方法与position方法" class="headerlink" title="5 offset方法与position方法"></a>5 offset方法与position方法</h4><ul><li>offset方法获取元素距离document的位置，position方法获取的是元素距离有定 位的父元素的位置。</li><li>position用得多一些</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).offset();</span><br><span class="line"><span class="comment">//获取相对于其最近的有定位的父元素的位置。</span></span><br><span class="line">$(selector).position();</span><br></pre></td></tr></table></figure><p>总结:position是只读属性,其它几个方法,给参数是设置值,不给就是获取值 </p><h3 id="六-事件注册"><a href="#六-事件注册" class="headerlink" title="六,事件注册"></a>六,事件注册</h3><ul><li><strong>简单事件注册</strong></li></ul><ol><li>click(handler)</li><li>mouseenter(handler)</li><li>mouseleave(handler)</li><li>缺点是不能同时注册多个事件</li></ol><ul><li><strong>bind方式注册</strong><br>1.第一个参数 ,事件类型<br>2.第二个参数,事件处理程序 <ol start="3"><li>缺点不支持动态事件绑定<br><code>$(&quot;p&quot;).bind(&quot;click mouseenter&quot;,function(){//事件响应方法})</code></li></ol></li><li><strong>delegate 注册委托事件</strong><br>1.第一参数,selector,要绑定事件的元素<br>2.第二个参数,事件类型<br>3.事件处理函数<br>4.缺点,只能注册委托事件.不能<img src="http://video.quejifang.cn/201904271137_83.png" alt="">注册自己的事件.<br>5.注册时,选择器是父元素,<strong>委托给父元</strong>素,下面的所有类型P元素就会多有事件了,<strong>最终还是子元素执行</strong>,其实是事件冒泡.<br><code>$(&quot;.parentBox&quot;).delegate(&quot;p&quot;,&quot;click&quot;,function(){.parentBox下面的p标签所有的绑定事件})</code><h3 id="七-事件注册-on事件-重点"><a href="#七-事件注册-on事件-重点" class="headerlink" title="七,事件注册(on事件,重点)"></a>七,事件注册(on事件,重点)</h3></li><li>on注册简单事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>on注册委托事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span></span><br><span class="line">$(selector).on( <span class="string">"click"</span>,“span”, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>on注册事件的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span></span><br><span class="line"><span class="comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span></span><br><span class="line"><span class="comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span></span><br><span class="line"><span class="comment">// 第四个参数：handler，事件处理函数</span></span><br><span class="line">$(selector).on(events[,selector][,data],handler);</span><br></pre></td></tr></table></figure></li><li><p>事件执行的顺序 先执行委托的,再执行自己的,下图呜呜最后面执行</p></li><li><p>给p简单注册–&gt;给div里的p委托注册事件–&gt;给div自己注册事件.顺序是这样的<br><img src="http://video.quejifang.cn/201904271137_83.png" alt=""></p></li><li><p>off方式（推荐）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑匹配元素的所有事件</span></span><br><span class="line">$(selector).off();</span><br><span class="line"><span class="comment">// 解绑匹配元素的所有click事件</span></span><br><span class="line">$(selector).off(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure></li><li><p>触发事件</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selector).click(); <span class="comment">//触发 click事件</span></span><br><span class="line">$(selector).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure><h3 id="七-jQuery事件对象"><a href="#七-jQuery事件对象" class="headerlink" title="七. jQuery事件对象"></a>七. jQuery事件对象</h3><p>如图,先给参数data传值,然后再function里写上e,就可以在下面得到e.data,也就是传的data的值.<br><img src="http://video.quejifang.cn/201904271459_491.png" alt=""></p><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//screenX和screenY对应屏幕最左上角的值</span></span><br><span class="line"><span class="comment">//clientX和clientY距离页面左上角的位置（忽视滚动条）</span></span><br><span class="line"><span class="comment">//pageX和pageY距离页面最顶部的左上角的位置（会计算滚动条的距离）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.keyCode按下的键盘代码</span></span><br><span class="line"><span class="comment">//event.data存储绑定事件时传递的附加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//event.stopPropagation()阻止事件冒泡行为</span></span><br><span class="line"><span class="comment">//event.preventDefault()阻止浏览器默认行为</span></span><br><span class="line"><span class="comment">//return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span></span><br></pre></td></tr></table></figure></p><h3 id="八-jQuery补充知识点"><a href="#八-jQuery补充知识点" class="headerlink" title="八. jQuery补充知识点"></a>八. jQuery补充知识点</h3><ul><li>链式编程</li><li>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end(); <span class="comment">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span></span><br></pre></td></tr></table></figure><p>【案例：五角星评分案例.html】</p><ul><li>each方法</li><li>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</li></ul><p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数一表示当前元素在所有匹配元素中的索引号</span></span><br><span class="line"><span class="comment">// 参数二表示当前元素（DOM对象）</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p><img src="http://video.quejifang.cn/201904271614_550.png" alt=""></p><h3 id="九-jQuery补充知识点多库共存"><a href="#九-jQuery补充知识点多库共存" class="headerlink" title="九. jQuery补充知识点多库共存"></a>九. jQuery补充知识点多库共存</h3><ul><li>jQuery使用$作为标示符，但是如果与其他框架中的$冲突时，jQuery可以释放$符的控制权.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = $.noConflict();<span class="comment">//释放$的控制权,并且把$的能力给了c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-jQuery操作样式-css&quot;&gt;&lt;a href=&quot;#一-jQuery操作样式-css&quot; class=&quot;headerlink&quot; title=&quot;一.jQuery操作样式(css)&quot;&gt;&lt;/a&gt;一.jQuery操作样式(css)&lt;/h3&gt;&lt;p&gt;1.设置单个样式&lt;br&gt;
      
    
    </summary>
    
      <category term="jQuery" scheme="https://qjiamei.github.io/categories/jQuery/"/>
    
    
      <category term="前端" scheme="https://qjiamei.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>jQuery之一(选择器)</title>
    <link href="https://qjiamei.github.io/2019/04/23/jQurey%E4%B9%8B%E4%B8%80(%E9%80%89%E6%8B%A9%E5%99%A8)/"/>
    <id>https://qjiamei.github.io/2019/04/23/jQurey之一(选择器)/</id>
    <published>2019-04-22T23:16:00.000Z</published>
    <updated>2019-04-23T14:52:30.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-jQuery的入口函数"><a href="#一-jQuery的入口函数" class="headerlink" title="一.jQuery的入口函数"></a>一.jQuery的入口函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="二-jQuery入口函数与js入口函数的对比"><a href="#二-jQuery入口函数与js入口函数的对比" class="headerlink" title="二.jQuery入口函数与js入口函数的对比"></a>二.jQuery入口函数与js入口函数的对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</span><br><span class="line"><span class="number">2.</span>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</span><br></pre></td></tr></table></figure><h3 id="三-jQuery对象与DOM对象的区别（重点）"><a href="#三-jQuery对象与DOM对象的区别（重点）" class="headerlink" title="三.jQuery对象与DOM对象的区别（重点）"></a>三.jQuery对象与DOM对象的区别（重点）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</span><br><span class="line"><span class="number">2.</span> jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</span><br><span class="line"><span class="number">3.</span> jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合（伪数组））</span><br><span class="line"><span class="number">4.</span> DOM对象与jQuery对象的方法不能混用。</span><br></pre></td></tr></table></figure><p>DOM对象转换成jQuery对象：【联想记忆】<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $obj = $(domObj);</span><br><span class="line"><span class="comment">// $(document).ready(function()&#123;&#125;);就是典型的DOM对象转jQuery对象</span></span><br></pre></td></tr></table></figure></p><p>jQuery对象转换成DOM对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(“li”);</span><br><span class="line"><span class="comment">//第一种方法（推荐使用）</span></span><br><span class="line">$li[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">$li.get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="四-选择器"><a href="#四-选择器" class="headerlink" title="四.选择器"></a>四.选择器</h3><ul><li><strong>基本选择器</strong><br><img src="http://video.quejifang.cn/201904222144_98.png" alt=""></li><li><strong>层级选择器</strong><br><img src="http://video.quejifang.cn/201904222145_872.png" alt=""></li><li><strong>过滤选择器</strong></li><li><code>:first :last :gt :lt</code><br><img src="http://video.quejifang.cn/201904222146_709.png" alt=""></li><li><strong>筛选选择器</strong></li></ul><p><img src="http://video.quejifang.cn/201904222149_142.png" alt=""></p><h3 id="五-案例"><a href="#五-案例" class="headerlink" title="五.案例"></a>五.案例</h3><ul><li><p>mouseenter 事件(菜单弹出)(注意children()方法使用)<br><img src="http://video.quejifang.cn/201904222224_2.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $li = $(<span class="string">".wrap&gt;ul&gt;li"</span>);</span><br><span class="line">     $li.mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).show();</span><br><span class="line">     &#125;)</span><br><span class="line">     </span><br><span class="line">     $li.mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).hide();</span><br><span class="line">     &#125;)</span><br><span class="line">      </span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=<span class="string">"javascript:void(0);"</span>&gt;一级菜单<span class="number">1</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul class="ul"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="javascript:void(0);"&gt;二级菜单11&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单12<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单13<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=<span class="string">"javascript:void(0);"</span>&gt;一级菜单<span class="number">2</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="javascript:void(0);"&gt;二级菜单21&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单22<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单23<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href=<span class="string">"javascript:void(0);"</span>&gt;一级菜单<span class="number">3</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="javascript:void(0);"&gt;二级菜单31&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单32<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>二级菜单33<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></li><li><p>突出亮光显示(注意mouseenter 和mouseleave 两个事件搭配使用)<br><img src="http://video.quejifang.cn/201904222226_600.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">".wrap&gt;ul&gt;li"</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"opacity"</span>, <span class="string">"1"</span>).siblings().css(<span class="string">"opacity"</span>, <span class="string">"0.4"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">".wrap"</span>).mouseleave(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).find(<span class="string">"li"</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrap"</span>&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/01.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/03.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/04.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/05.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"imgs/06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></li><li><p>手风琴案例(注意siblings()的位置)<br><img src="http://video.quejifang.cn/201904222245_304.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">      $(function () &#123;</span><br><span class="line">          //思路分析：</span><br><span class="line">          //1. 给所有的span注册点击事件，让当前span的兄弟div显示出来</span><br><span class="line">          $(&quot;.groupTitle&quot;).click(function () &#123;</span><br><span class="line">            //下一个兄弟：nextElementSibling</span><br><span class="line">            </span><br><span class="line">            //链式编程：在jQuery里面，方法可以一直调用下去。</span><br><span class="line">           $(this).next().slideDown(200).parent().siblings().children(&quot;div&quot;).slideUp(200);</span><br><span class="line">      &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul class=&quot;parentWrap&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题1&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div1&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题2&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div2&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题3&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div3&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;menuGroup&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;groupTitle&quot;&gt;标题4&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;我是弹出来的div4&lt;/div&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>淘宝精品案例(注意:eq 和.eq()的区别)<br><img src="http://video.quejifang.cn/201904222318_439.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">     </span><br><span class="line">     $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="string">"#left&gt;li"</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $index = $(<span class="keyword">this</span>).index();</span><br><span class="line">     $(<span class="string">"#center&gt;li"</span>).eq($index).show().siblings().hide();</span><br><span class="line">     &#125;)</span><br><span class="line">     </span><br><span class="line">     $(<span class="string">"#right&gt;li"</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> $index = $(<span class="keyword">this</span>).index()+<span class="number">9</span>;</span><br><span class="line">     $(<span class="string">"#center&gt;li:eq("</span>+$index+<span class="string">")"</span>).show().siblings().hide();</span><br><span class="line">     &#125;)    </span><br><span class="line">     &#125;)       </span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;ul id=<span class="string">"left"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>雪地靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>冬裙<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>呢大衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>毛衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>棉服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女裤<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>羽绒服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>牛仔裤<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul id="center"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&lt;a href="#"&gt;&lt;img src="./im</span>ages/女靴.jpg<span class="string">" width="</span><span class="number">200</span><span class="string">" height="</span><span class="number">250</span><span class="string">"/&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;&lt;img src="./images/雪地靴.jpg" width="200" height="250"/&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/冬裙.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/呢大衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/毛衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/棉服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/女裤.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/羽绒服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/牛仔裤.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/女包.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男靴.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/登山鞋.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/皮带.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/围巾.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/皮衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男毛衣.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男棉服.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/男包.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"250"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;ul id="right"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&lt;a href="#"&gt;女包&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男靴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登山鞋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>皮带<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>围巾<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>皮衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男毛衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男棉服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>男包<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-jQuery的入口函数&quot;&gt;&lt;a href=&quot;#一-jQuery的入口函数&quot; class=&quot;headerlink&quot; title=&quot;一.jQuery的入口函数&quot;&gt;&lt;/a&gt;一.jQuery的入口函数&lt;/h3&gt;&lt;figure class=&quot;highlight java
      
    
    </summary>
    
      <category term="jQuery" scheme="https://qjiamei.github.io/categories/jQuery/"/>
    
    
      <category term="前端" scheme="https://qjiamei.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://qjiamei.github.io/2019/04/23/HTML/"/>
    <id>https://qjiamei.github.io/2019/04/23/HTML/</id>
    <published>2019-04-22T22:16:00.000Z</published>
    <updated>2019-04-23T14:53:43.893Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="一-HTML属性"><a href="#一-HTML属性" class="headerlink" title="一.HTML属性"></a>一.HTML属性</h4><p>1.<code>&lt;h1 align=&quot;center&quot;&gt;</code></p><ol start="2"><li><code>&lt;body bgcolor=&quot;yellow&quot;&gt;</code></li><li><code>&lt;table border=&quot;1&quot;&gt;</code></li></ol><h4 id="二-HTML链接"><a href="#二-HTML链接" class="headerlink" title="二.HTML链接"></a>二.HTML链接</h4><p>1.创建锚的语法：<code>&lt;a href=&quot;url&quot;&gt;Text to be displayed&lt;/a&gt;</code></p><ol start="2"><li>使用 Target 属性，你可以定义被链接的文档在何处显示。下面的这行会在新窗口打开文档：<ul><li><code>&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot;&gt;Visit W3School!&lt;/a&gt;</code></li></ul><ol start="3"><li>锚标签和 Name 属性<br>Name 属性用于创建被命名的锚（named anchors）。当使用命名锚（named anchors）时，我们可以创建直接跳至页面中某个节的链接，这样使用者就无需不停的滚动页面来寻找他们需要的信息。<br><code>&lt;a name=&quot;tips&quot;&gt;Useful Tips Section&lt;/a&gt;</code><br>将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个节，就像这样<br><code>&lt;a href=&quot;http://www.w3school.com.cn/html_links.asp#tips&quot;&gt;Jump to the Useful Tips Section&lt;/a&gt;</code></li></ol></li></ol><h4 id="三-HTML框架"><a href="#三-HTML框架" class="headerlink" title="三.HTML框架"></a>三.HTML框架</h4><ol><li><strong>框架结构标签（<frameset></frameset></strong>）<br>框架结构标签（<frameset>）定义如何将窗口分割为框架 每个 frameset 定义了一系列行或列 rows/columns 的值规定了每行或每列占据屏幕的面积 </frameset></li><li>框架标签（Frame）<br>Frame 标签定义了放置在每个框架中的 HTML 文档。</li></ol><ul><li><p>在下面的这个例子中，我们设置了一个两列的框架集。第一列被设置为占据浏览器窗口的25%。第二列被设置为占据浏览器窗口的 75%。HTML 文档 “frame_a.htm” 被置于第一个列中，而 HTML 文档 “frame_b.htm” 被置于第二个列中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"25%,75%"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_a.htm"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame_b.htm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基本的注意事项 - 有用的提示：<br>假如一个框架有可见边框，用户可以拖动边框来改变它的大小。为了避免这种情况发生，可以在 <code>&lt;frame&gt;</code> 标签中加入：<code>noresize=&quot;noresize&quot;</code>。</p></li><li>为不支持框架的浏览器添加 <noframes> 标签。</noframes></li><li>重要提示：不能将 <code>&lt;body&gt;&lt;/body&gt;</code> 标签与 <code>&lt;frameset&gt;&lt;/frameset&gt;</code> 标签同时使用！不过，假如你添加包含一段文本的 <code>&lt;noframes&gt;</code>标签，就必须将这段文字嵌套于 <code>&lt;body&gt;&lt;/body&gt;</code> 标签内。</li></ul><h4 id="四-Jquery事件绑定"><a href="#四-Jquery事件绑定" class="headerlink" title="四.Jquery事件绑定"></a>四.Jquery事件绑定</h4><p>Jquery中绑定事件有三种方法：以click事件为例</p><p>  （1）target.click(function(){});</p><p>  （2）target.bind(“click”,function(){});</p><p>  （3）target.live(“click”,function(){});</p><p>第一种方法很好理解，其实就和普通JS的用法差不多，只是少了一个on而已</p><p>第二、三种方法都是绑定事件，但是二者又有很大的不同，下面着重讲解一下，因为这个如果用到Jquery的框架的话是用的挺多的，尤其要注意二者的区别。</p><p>【bind和live的区别】</p><pre><code>live方法其实是bind方法的变种，其基本功能就同bind方法的功能是一样的，都是为一个元素绑定某个事件，但是bind方法只能给当前存在的元素绑定事件，对于事后采用JS等方式新生成的元素无效，而live方法则正好弥补了bind方法的这个缺陷，它可以对后生成的元素也可以绑定相应的事件。</code></pre><h4 id="四-Js弹框事件"><a href="#四-Js弹框事件" class="headerlink" title="四.Js弹框事件"></a>四.Js弹框事件</h4><ol><li>第一种alert()</li><li>第二种：confirm()方法</li></ol><ul><li>confirm()方法与alert()方法的使用十分类似，不同点是在该种对话框上除了包含一个“确认”按钮外，还有一个“取消”按钮，这种对话框称为确认对话框，在调用window对象的confirm()方法以及后面介绍的prompt()方法时也可以不写window。下面来看一个关于confirm()的小例子,代码如下所示：</li><li><code>confirm()</code>返回布尔值</li><li><code>&lt;script language=&quot;javascript&quot;&gt; //js脚本标注var con;con=confirm(&quot;你喜欢玫瑰花么?&quot;); //在页面上弹出对话框if(con==true)alert(&quot;非常喜欢!&quot;);else alert(&quot;不喜欢!&quot;);&lt;/script&gt;</code></li></ul><ol start="3"><li>prompt()方法, 提示框,<ul><li>与confirm()类似</li><li>不同的是能让用户使用键盘输入自己的信息,同时还包含确认和取消两个按钮,点确认返回用户在文本框中输入的内容, 单周取消则返回null<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"> //js脚本标注</span></span><br><span class="line"><span class="undefined">var name,age;</span></span><br><span class="line"><span class="undefined">name=prompt("请问你叫什么名字?"); /*在页面上弹出提示对话框，</span></span><br><span class="line"><span class="undefined">将用户输入的结果赋给变量name*/</span></span><br><span class="line"><span class="undefined">alert(name); //输出用户输入的信息</span></span><br><span class="line"><span class="undefined">age=prompt("你今年多大了?","请在这里输入年龄"); /*在页面上再一次弹出提示对话框，</span></span><br><span class="line"><span class="undefined">讲用户输入的信息赋给变量age*/</span></span><br><span class="line"><span class="undefined">alert(age)//输出用户输入的信息</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="五-选择器-css"><a href="#五-选择器-css" class="headerlink" title="五.选择器(css)"></a>五.选择器(css)</h4><ol><li>后代选择器 <code>ul li</code></li><li>子代选择器,可以缩小范围  h1 &gt; strong {color:red;}</li></ol><h4 id="六-伪类"><a href="#六-伪类" class="headerlink" title="六.伪类"></a>六.伪类</h4><p>伪类<br>W3C：”W3C” 列指示出该属性在哪个 CSS 版本中定义（CSS1 还是 CSS2）。</p><p>属性    描述    CSS<br>:active    向被激活的元素添加样式。    1<br>:focus    向拥有键盘输入焦点的元素添加样式。    2<br>:hover    当鼠标悬浮在元素上方时，向元素添加样式。    1<br>:link    向未被访问的链接添加样式。    1<br>:visited    向已被访问的链接添加样式。    1<br>:first-child    向元素的第一个子元素添加样式。    2<br>:lang    向带有指定 lang 属性的元素添加样式。    2</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;一-HTML属性&quot;&gt;&lt;a href=&quot;#一-HTML属性&quot; class=&quot;headerlink&quot; title=&quot;一.HTML属性&quot;&gt;&lt;/a&gt;一.HTML属性&lt;/h4&gt;&lt;p&gt;1.&lt;code&gt;&amp;lt;h1 align=&amp;quot;center&amp;quot;&amp;g
      
    
    </summary>
    
      <category term="HTML" scheme="https://qjiamei.github.io/categories/HTML/"/>
    
    
      <category term="前端" scheme="https://qjiamei.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>struts总结</title>
    <link href="https://qjiamei.github.io/2019/04/23/struts/"/>
    <id>https://qjiamei.github.io/2019/04/23/struts/</id>
    <published>2019-04-22T21:16:00.000Z</published>
    <updated>2019-04-23T14:54:50.784Z</updated>
    
    <content type="html"><![CDATA[<ol><li>核心点:<ul><li>拦截器 interceptor</li><li>Action</li><li>ognl与valueStack</li></ul></li></ol><ol start="2"><li><p>package配置</p><ul><li>name:作用:定义一个包的名称，它必须唯一。</li><li>namespace:主要是与action标签的name属性联合使用来确定一个action 的访问路径</li><li>extends属性 作用:指定继承自哪个包。一般值是strtus-default,strtus-default包是在strtus-default.xml文件中声明的。</li><li>4.abstruct属性 它代表当前包是一个抽象的，主要是用于被继承 </li></ul></li><li><p>action配置</p><ul><li>name属性 作用:主要是与package的namespace联合使用来确定一个action的访问路径</li><li>2.class属性  作用:用于指示当前的action类</li><li>3.method属性  作用:用于指示当前的action类中的哪个方法执行</li></ul></li><li><p>result配置  </p><ul><li>它主要是用于指示结果视图</li><li>name属性 作用是与action类的method方法的返回值进行匹配，来确定跳转路径</li><li>type属性 作用是用于指定跳转方式</li></ul></li><li><p>扩展</p><ul><li>关于action配置中的class与method的默认值以及result中的name与type 默认值问题</li><li>不写result,method, result的name属性默认值是success,默认的跳转方式是请求转发 dispatcher,方法是 execute.<br><img src="http://video.quejifang.cn/201904202223_907.png" alt=""></li></ul></li></ol><h3 id="二-常量配置"><a href="#二-常量配置" class="headerlink" title="二.常量配置"></a>二.常量配置</h3><ul><li>default.properties文件中定义了struts2框架常用常量 .<br>问题:我们怎样可以定义常量<br>1.可以在src下创建一个strtus.properties配置文件<br>2.可以在web.xml文件中配置<br>3.可以直接在strtus.xml文件中定义常量 (推荐)<br><img src="http://video.quejifang.cn/201904202234_159.png" alt=""></li></ul><h3 id="三-struts2的action详解"><a href="#三-struts2的action详解" class="headerlink" title="三.struts2的action详解"></a>三.struts2的action详解</h3><ol><li><p>action类创建的三种方式</p><ul><li><p><strong>创建一个pojo类</strong><br>优点:无耦合<br>缺点:所有的功能都要自己完成</p></li><li><p><strong>实现action接口com.opensymphony.xwork2.Action</strong><br>在Action接口中定义了五个常量，一个execute方法<br>五个常量:它们是默认的五个结果视图<result name="””">:<br>ERROR : 错误视图<br>INPUT: 它是struts2框架中interceptor中发现问题后会访问的一个视图<br>LOGIN:它是一个登录视图，可以在权限操作中使用<br>NONE:它代表的是null,什么都不做（也不会做跳转操作）<br>SUCCESS:这是一个成功视图<br>优点：耦合度低<br>缺点:还是需要自己来完成功能</result></p></li><li><p><strong>继承actionSupport</strong><br>com.opensymphony.xwork2.ActionSupport<br>ActionSupport类也实现了Action接口。<br>我们在开发中一般会使用这种方案:<br>优点:具有丰富的功能，例如  表单校验 错误信息设置  国际化<br>缺点:耦合度高</p></li></ul></li></ol><h3 id="四-action访问方式"><a href="#四-action访问方式" class="headerlink" title="四.action访问方式"></a>四.action访问方式</h3><ul><li>1.直接通过<action>标签来配置，通过method来指定访问的方法，如果method没有，默认访问的是execute方法。<br><img src="http://video.quejifang.cn/201904210947_621.png" alt=""></action></li><li>2.简化的action访问方式，可以使用<em>通配符来访问。<br>这种方式的缺点:不建议使用过多的</em>号，它带来程序阅读障碍，不便于理解<br>使用*来简化操作方案，它对名称规范必须进行一个统一。<br><img src="http://video.quejifang.cn/201904210948_252.png" alt=""></li></ul><h3 id="五-Struts2框架封装数据"><a href="#五-Struts2框架封装数据" class="headerlink" title="五.Struts2框架封装数据"></a>五.Struts2框架封装数据</h3><p>主要有两种方式:<br><strong>1.属性驱动</strong></p><ul><li>a.直接在action类中提供与请求参数匹配属性，提供get/set方法</li><li>b.在action类中创始一个javaBean,对其提供get/set ，在请求时页面上要进行修改，      例如 user.username  user.password ,要使用ognl表达式<br>以上两种方式的优缺点:</li><li>第一种比较简单，在实际操作我们需要将action的属性在赋值给模型(javaBean)    去操作</li><li>第二种:不需要在直接将值给javaBean过程，因为直接将数据封装到了javaBean    中。它要求在页面上必须使用ognl表达式，就存在页面不通用问题。</li></ul><p><strong>2.模型驱动</strong><br>步骤:</p><ul><li>1.让Action类要实现一个指定接口ModelDriven</li><li>2.实例化模型对象(就是要new出来javaBean)</li><li>3.重写getModel方法将实例化的模型返回。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;核心点:&lt;ul&gt;
&lt;li&gt;拦截器 interceptor&lt;/li&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;ognl与valueStack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;package配置&lt;/p&gt;
&lt;u
      
    
    </summary>
    
      <category term="struts" scheme="https://qjiamei.github.io/categories/struts/"/>
    
    
      <category term="框架" scheme="https://qjiamei.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>复盘定时入库项目</title>
    <link href="https://qjiamei.github.io/2019/04/11/%E5%AE%9A%E6%97%B6%E5%85%A5%E5%BA%93/"/>
    <id>https://qjiamei.github.io/2019/04/11/定时入库/</id>
    <published>2019-04-10T23:16:00.000Z</published>
    <updated>2019-04-11T03:31:30.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-定义定时类QuartzMain"><a href="#一-定义定时类QuartzMain" class="headerlink" title="一. 定义定时类QuartzMain"></a>一. 定义定时类QuartzMain</h3><ol><li>定义定时器对象</li><li>定义工作对象</li><li>定义触发器</li><li>开启定时任务</li></ol><h3 id="二-编写job"><a href="#二-编写job" class="headerlink" title="二. 编写job"></a>二. 编写job</h3><ol><li>发送请求前,组装参数, 其中的beginTime需从数据库中获取.</li><li>发送post请求,获取json数据</li><li>fastjson工具接收, 并转换成实体类</li><li>得到响应回数据中的两个重要参数,订单号 和 是否有下一页<ul><li>得到订单号需要去数据库查询是否存在相同订单号</li><li>是,需要删除原来的主表记录,详细表记录</li><li>然后再插入新的记录,写三张表,主表,详细表,返现表</li><li>返现表的策略,是不删除,但会判断无重复记录,再进行添加 </li><li>否,直接进行插入操作</li></ul></li><li>第一次请求全在一个<code>do{}</code>里面</li><li>while里面是一个flag,值是has_next是否有下一下增值,当has_next为值的时候,pageNumber马上加1</li></ol><h3 id="注意的问题一"><a href="#注意的问题一" class="headerlink" title="注意的问题一"></a>注意的问题一</h3><ul><li><strong>fastjson解析</strong></li><li>格式为<br><img src="http://video.quejifang.cn/201904101705_923.png" alt=""></li><li>(orderdomain)定义实体类从最里面,list变量名一定要对应json里的数组变量名.<br><code>private List&lt;OrderitemsDomain&gt; orderitems;</code></li><li>(Alldomain)外面包装的实体类<br><code>private List&lt;OrderDomain&gt; datas;</code></li><li>整个结构是<code>Alldomain-&gt;orderdomain-&gt;orderitemsdomain</code></li><li><strong>解析代码</strong></li></ul><ol><li>最外面是{},所以先解析成jsonObject<br><code>JSONObject jsonObject = JSON.parseObject(result);</code></li><li>取list为datas里的数据,转成JSONArray<br><code>JSONArray datasArray = jsonObject.getJSONArray(&quot;datas&quot;);</code></li><li>再转成实体类的list,数据就已经转到实体类里面去了<br><code>List&lt;OrderDomain&gt; resultList = JSONObject.parseArray(datasArray.toJSONString(), OrderDomain.class);</code><br>4.如果再第一步之后,需要取一个字符串值,方法是<br><code>String has_next = jsonObject.getString(&quot;has_next&quot;);</code></li></ol><ul><li><strong>组装json注意</strong></li><li>嵌套的方式组装数据</li><li>先new map,放里面的键值</li><li>再new <code>ArrayList&lt;Map&lt;String,Object&gt;&gt;()</code></li><li>再使用list,add进map就可以了.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       JSONObject jsobj1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">       jsobj1.put(<span class="string">"timestamp"</span>, nowTime());</span><br><span class="line">       jsobj1.put(<span class="string">"sign"</span>, getSign());</span><br><span class="line">       jsobj1.put(<span class="string">"company_code"</span>, COMPANY_CODE);</span><br><span class="line">       Map&lt;String,Object&gt; orderSnMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">       orderSnMap.put(<span class="string">"order_sn"</span>,<span class="string">"20190407155156"</span>);</span><br><span class="line">       List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">       list.add(orderSnMap);</span><br><span class="line">       jsobj1.put(<span class="string">"datas"</span>, list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       String postResponse = PostService.post(jsobj1, <span class="string">"http://melcintf.5mall.com/intf/v1/order/queryOrderStatus.jhtml"</span>);</span><br><span class="line">       <span class="comment">//解析成json对象</span></span><br><span class="line">       JSONObject jsonObject = JSON.parseObject(postResponse);</span><br></pre></td></tr></table></figure></li></ul><h3 id="三-关于json转换"><a href="#三-关于json转换" class="headerlink" title="三.关于json转换"></a>三.关于json转换</h3><p>(1).创建JsonObject第一种方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"UserName"</span>, <span class="string">"kobi"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"age"</span>, <span class="string">"34"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"workIn"</span>, <span class="string">"ALI"</span>);</span><br><span class="line">        System.out.println(<span class="string">"jsonObject1："</span> + jsonObject);</span><br></pre></td></tr></table></figure></p><p>(2). 创建JsonObject第二种方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">       hashMap.put(<span class="string">"UserName"</span>, <span class="string">"ZHULI"</span>);</span><br><span class="line">       hashMap.put(<span class="string">"age"</span>, <span class="string">"30"</span>);</span><br><span class="line">       hashMap.put(<span class="string">"workIn"</span>, <span class="string">"ALI"</span>);</span><br><span class="line">       System.out.println(<span class="string">"jsonObject2："</span> + JSONObject.fromObject(hashMap));</span><br></pre></td></tr></table></figure></p><p>(3).JSONArray创建的方法,第一种<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">       jsonArray.add(<span class="number">0</span>, <span class="string">"kobi"</span>);</span><br><span class="line">       jsonArray.add(<span class="number">1</span>, <span class="string">"34"</span>);</span><br><span class="line">       jsonArray.add(<span class="number">2</span>, <span class="string">"ALI"</span>);</span><br><span class="line">       System.out.println(<span class="string">"jsonArray1："</span> + jsonArray);</span><br></pre></td></tr></table></figure></p><p>(4).创建JsonArray方法2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();</span><br><span class="line">       arrayList.add(&quot;kobi&quot;);</span><br><span class="line">       arrayList.add(&quot;34&quot;);</span><br><span class="line">       arrayList.add(&quot;ALI&quot;);</span><br><span class="line">       System.out.println(&quot;jsonArray2：&quot; + JSONArray.fromObject(arrayList))</span><br></pre></td></tr></table></figure></p><h3 id="四-fastjson-的具体使用"><a href="#四-fastjson-的具体使用" class="headerlink" title="四.fastjson 的具体使用"></a>四.fastjson 的具体使用</h3><p>(1).List 转 JSONArray<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过JSONPath获取其中数据，也可以说自己生成的List</span></span><br><span class="line">List&lt;JSONObject&gt; caseList =  JsonPath.read(resStr, <span class="string">"$.result.case"</span>);</span><br><span class="line"><span class="comment">// 转换为JSONArray</span></span><br><span class="line">JSONArray cases = JSONArray.parseArray(JSON.toJSONString(caseList));</span><br></pre></td></tr></table></figure></p><p>(2).  JSONArray 转 List<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSONArray array = <span class="keyword">new</span> JSONArray();</span><br><span class="line">List&lt;T&gt; list = JSONObject.parseArray(array.toJSONString(), T.class);</span><br></pre></td></tr></table></figure></p><p>(3). String 转 List<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">""</span>;</span><br><span class="line">List&lt;T&gt; list = JSONObject.parseArray(str, T.class);</span><br></pre></td></tr></table></figure></p><p>参考:[fastjson转换参考][1]</p><p>  1，对于JSON对象与JSON格式字符串的转换可以直接用 toJSONString()这个方法。</p><p>2，javaBean与JSON格式字符串之间的转换要用到：JSON.toJSONString(obj);</p><p>3，javaBean与json对象间的转换使用：JSON.toJSON(obj)，然后使用强制类型转换，JSONObject或者JSONArray。<br>[1]: <a href="https://www.cnblogs.com/cdf-opensource-007/p/7106018.html" target="_blank" rel="noopener">https://www.cnblogs.com/cdf-opensource-007/p/7106018.html</a></p><h3 id="五-注意的其它问题"><a href="#五-注意的其它问题" class="headerlink" title="五.注意的其它问题"></a>五.注意的其它问题</h3><p>1.jdbc访问数据库的问题</p><ul><li>在表中查询最后一条记录的sql语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> &lt;<span class="keyword">table</span>&gt; <span class="keyword">order</span> <span class="keyword">by</span> &lt;<span class="keyword">key</span>&gt;) <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> &lt;<span class="keyword">table</span>&gt; <span class="keyword">order</span> <span class="keyword">by</span> &lt;<span class="keyword">key</span>&gt; <span class="keyword">desc</span>) <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p>2.日期转换问题</p><ul><li><p>oracle 表中是日期类开的话<br><code>stmt.setTimestamp(24, getDate(orderDomain.getCreate_date()));</code></p></li><li><p>java代码转成日期类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Timestamp <span class="title">getDate</span><span class="params">(String create_date)</span> </span>&#123;</span><br><span class="line">    java.util.Date creatDate = <span class="keyword">null</span>;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        creatDate = sdf.parse(create_date);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Timestamp ts = <span class="keyword">new</span> Timestamp(creatDate.getTime());</span><br><span class="line">    <span class="keyword">return</span> ts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定时任务的job加上注解<code>@DisallowConcurrentExecution</code>,可以起到第一次任务执行完毕后,第二次定时任务再接着执行.(因为有时会是两次的定时任务启动时长小于,一次任务执行完毕的时长. )</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-定义定时类QuartzMain&quot;&gt;&lt;a href=&quot;#一-定义定时类QuartzMain&quot; class=&quot;headerlink&quot; title=&quot;一. 定义定时类QuartzMain&quot;&gt;&lt;/a&gt;一. 定义定时类QuartzMain&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义
      
    
    </summary>
    
      <category term="定时入库" scheme="https://qjiamei.github.io/categories/%E5%AE%9A%E6%97%B6%E5%85%A5%E5%BA%93/"/>
    
    
      <category term="复盘" scheme="https://qjiamei.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>Docker使用</title>
    <link href="https://qjiamei.github.io/2019/03/24/Docker/"/>
    <id>https://qjiamei.github.io/2019/03/24/Docker/</id>
    <published>2019-03-23T23:16:00.000Z</published>
    <updated>2019-04-11T03:23:42.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Docker安装"><a href="#一-Docker安装" class="headerlink" title="一.Docker安装"></a>一.Docker安装</h3><ol><li>查看centos版本,内核版本要高于3.10<code>uname -r</code></li><li>升级软件包和内核<code>yum update</code></li><li>安装docker<code>yum install docker</code></li><li>启动docker<code>systemctl start docker</code></li><li>将docker服务设为开机启动<code>systemctl enable docker</code></li><li>停止docker<code>systemctl sotp docker</code> </li></ol><h3 id="三-出现错误解决"><a href="#三-出现错误解决" class="headerlink" title="三.出现错误解决"></a>三.出现错误解决</h3><ul><li><code>Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.</code><br>1). yum remove docker<br>2). yum remove docker-selinux<br>3). vi  /etc/yum.repos.d/docker.repo<br>4). 添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure></li></ul><p>5). yum install docker-engine<br>6). service docker start<br>7). docker images<br>8). docker version</p><h3 id="四-操作命令"><a href="#四-操作命令" class="headerlink" title="四.操作命令"></a>四.操作命令</h3><ul><li>镜像操作</li><li>`<img src="http://video.quejifang.cn/201903241344_229.png" alt=""></li><li>容器操作</li><li><img src="http://video.quejifang.cn/201903241345_245.png" alt=""></li></ul><p>1、搜索镜像<br>[root@localhost ~]# docker search tomcat<br>2、拉取镜像<br>[root@localhost ~]# docker pull tomcat<br>3、根据镜像启动容器<br>docker run –name mytomcat -d tomcat:latest<br>4、docker ps<br>查看运行中的容器<br>5、 停止运行中的容器<br>docker stop  容器的id<br>6、查看所有的容器<br>docker ps -a<br>7、启动容器<br>docker start 容器id<br>8、删除一个容器<br> docker rm 容器id<br>9、启动一个做了端口映射的tomcat<br>[root@localhost ~]# docker run –name mytomcat -d -p 8888:8080 tomcat<br>-d：后台运行<br>-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</p><p>10、为了演示简单关闭了linux的防火墙<br>service firewalld status ；查看防火墙状态<br>service firewalld stop：关闭防火墙<br>11、查看容器的日志<br>docker logs container-name/container-id</p><p>更多命令参看<br><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a><br>可以参考每一个镜像的文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3）、安装MySQL示例</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>错误的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure><p>正确的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure><p>几个其他的高级操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line">把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-Docker安装&quot;&gt;&lt;a href=&quot;#一-Docker安装&quot; class=&quot;headerlink&quot; title=&quot;一.Docker安装&quot;&gt;&lt;/a&gt;一.Docker安装&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;查看centos版本,内核版本要高于3.10&lt;code&gt;unam
      
    
    </summary>
    
      <category term="linux" scheme="https://qjiamei.github.io/categories/linux/"/>
    
    
      <category term="docker" scheme="https://qjiamei.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>WebService</title>
    <link href="https://qjiamei.github.io/2019/03/23/Webservice/"/>
    <id>https://qjiamei.github.io/2019/03/23/Webservice/</id>
    <published>2019-03-22T23:16:00.000Z</published>
    <updated>2019-03-23T12:27:33.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h3><p>CXF WebService 开发，主要分为两种服务提供方式 WS 、RS<br><img src="http://video.quejifang.cn/201903231723_435.png" alt=""></p><ul><li>JAX-WS 传输数据，就是 XML 格式，基于 SOAP 协议</li><li>JAX-RS 传输数据，传输 XML 格式或者 JSON 格式，基于 HTTP 协议</li></ul><h3 id="二-JAX-RS-独立服务使用"><a href="#二-JAX-RS-独立服务使用" class="headerlink" title="二. JAX-RS 独立服务使用"></a>二. JAX-RS 独立服务使用</h3><ol><li>RestFul风格介绍<br><img src="http://video.quejifang.cn/201903231725_329.png" alt=""></li><li>Restful 风格好处 ？</li></ol><ul><li><p>基于这种风格架构，软件编写可以更简洁<br>-基于 HTTP 协议， 支持多种消息格式，比如 XML 、JSON<br>更易于实现缓存机制（第一次访问资源 缓存，第二次访问资源，返回 304 客户端调用本地）</p><p>  POST 请求方式访问 增加操作<br>  PUT 请求方式访问 修改操作<br>  GET 请求方式访问 查询操作<br>  DELETE 请求方式访问 删除操作</p></li></ul><h3 id="三-案例项目搭建"><a href="#三-案例项目搭建" class="headerlink" title="三.案例项目搭建"></a>三.案例项目搭建</h3><ul><li><p>webxml</p><ul><li>注意CXFService下的url路径,访问路径的顺序是webxml–&gt;applicationContext–&gt;类上路的路径–&gt;方法上的路径</li><li>下面xml的路径是/services/<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring配置文件位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring核心监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/services/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>ApplicationContext</p><ul><li>在这个配置里面就发布了服务</li><li>service id 是接口名</li><li>address 是访问后要加上去的地址</li><li>jaxrs:serviceBeans是实现类的全路径</li><li>下面两个是输入输出的日志信息<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:jaxrs</span>=<span class="string">"http://cxf.apache.org/jaxrs"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">address 发布服务地址 </span></span><br><span class="line"><span class="comment">servicesBeans 服务实现类 </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:server</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">address</span>=<span class="string">"/userService"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:serviceBeans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.que.service.UserServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:serviceBeans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:inInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.cxf.interceptor.LoggingInInterceptor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:inInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxrs:outInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.cxf.interceptor.LoggingOutInterceptor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:outInterceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxrs:server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写实体类</p><ul><li>注意注解<code>@XmlRootElement(name=类名)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写服务接口类,要注意注解,接口的实现类不要写注解</p><ul><li>@Produces 生成（方法返回值） @Consumes 消费 （方法参数）</li><li>@Consumes 指定能够处理客户端传递过来数据格式</li><li>@Produces 指定能否生成哪种格式数据返回给客户端</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Produces</span>(<span class="string">"*/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PUT</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Produces</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(<span class="string">"application/xml"</span>)</span><br><span class="line"><span class="meta">@Produces</span>(&#123; <span class="string">"application/xml"</span>, <span class="string">"application/json"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">finUserById</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DELETE</span></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Consumes</span>(<span class="string">"application/xml"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-总结注解"><a href="#四-总结注解" class="headerlink" title="四. 总结注解"></a>四. 总结注解</h3><p><img src="http://video.quejifang.cn/201903231755_991.png" alt=""></p><ul><li>@Path注解上传的ID可以使用<code>@PathParam(&quot;id&quot;)</code>来直接接收</li><li>@QueryParam(“id”)也可以接收参数(它就是HTTP的请求参数,可以通过此注解获取)</li></ul><h3 id="五-JUNIT测试的注解"><a href="#五-JUNIT测试的注解" class="headerlink" title="五. JUNIT测试的注解"></a>五. JUNIT测试的注解</h3><ul><li><code>@RunWith(springJUnit4ClassRunner.class)</code></li><li><code>@ContextConfiguration(locations=&quot;classspath:applicationContext.xml&quot;)</code></li><li>测试方法上写<code>@Test</code>注解<br><img src="http://video.quejifang.cn/201903231809_183.png" alt=""></li></ul><h3 id="六-ajax请求"><a href="#六-ajax请求" class="headerlink" title="六. ajax请求"></a>六. ajax请求</h3><p><img src="http://video.quejifang.cn/201903231931_90.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">"/abc"</span>,&#123;<span class="string">"id"</span>:id&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="七-使用webClient调用服务"><a href="#七-使用webClient调用服务" class="headerlink" title="七. 使用webClient调用服务"></a>七. 使用webClient调用服务</h3><p><img src="http://video.quejifang.cn/201903231939_318.png" alt=""></p><ul><li>WebClient.creat(路径).accept(MediaType.APPLICATION_JSON).getCollection(Customer.class)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一.简介&quot;&gt;&lt;/a&gt;一.简介&lt;/h3&gt;&lt;p&gt;CXF WebService 开发，主要分为两种服务提供方式 WS 、RS&lt;br&gt;&lt;img src=&quot;http://vide
      
    
    </summary>
    
      <category term="WebService" scheme="https://qjiamei.github.io/categories/WebService/"/>
    
    
      <category term="基础" scheme="https://qjiamei.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL语句练习</title>
    <link href="https://qjiamei.github.io/2019/03/14/SQL%E8%AF%AD%E5%8F%A5%E7%BB%83%E4%B9%A0/"/>
    <id>https://qjiamei.github.io/2019/03/14/SQL语句练习/</id>
    <published>2019-03-13T23:16:00.000Z</published>
    <updated>2019-03-24T12:53:33.901Z</updated>
    
    <content type="html"><![CDATA[<p>按照所列表格字段和SQL查询结果，写出SQL语句<br><img src="http://video.quejifang.cn/201903242049_827.png" alt=""><br>查询结果<br><img src="http://video.quejifang.cn/201903242049_867.png" alt=""><br>根据以上查询结果，两种写法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TF.flats_num <span class="keyword">AS</span> <span class="string">"公寓编号"</span>,</span><br><span class="line"><span class="keyword">COUNT</span>(CASEWHEN TR.<span class="string">`status`</span> = <span class="number">0</span> THENTR.idEND) <span class="keyword">AS</span> <span class="string">"未出租数量"</span>,</span><br><span class="line"><span class="keyword">COUNT</span>(TR.id) <span class="keyword">AS</span> <span class="string">"该公寓所有房间数量"</span>,</span><br><span class="line">(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> TF.is_private = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'是'</span> <span class="keyword">ELSE</span> <span class="string">'否'</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">"公寓是否是自营"</span>,</span><br><span class="line"><span class="keyword">CONCAT</span>(TC.<span class="string">`name`</span>, <span class="string">'-'</span>, TC.street) <span class="keyword">AS</span> <span class="string">"小区地址"</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">t_flats TF</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_community TC <span class="keyword">ON</span> (TF.community_id = TC.id)</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_room TR <span class="keyword">ON</span> (TR.flats_id = TF.id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">TF.flats_num;</span><br></pre></td></tr></table></figure></p><p>第二种<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">TF.flats_num <span class="keyword">AS</span> <span class="string">"公寓编号"</span>,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(TRM.id) <span class="keyword">FROM</span> t_room TRM <span class="keyword">WHERE</span> TRM.flats_id = TF.id <span class="keyword">AND</span> TRM.<span class="string">`status`</span> = <span class="number">0</span>) <span class="keyword">AS</span> <span class="string">"未出租数量"</span>,</span><br><span class="line"><span class="keyword">COUNT</span>(TR.id) <span class="keyword">AS</span> <span class="string">"该公寓所有房间数量"</span>,</span><br><span class="line">(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> TF.is_private = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'是'</span> <span class="keyword">ELSE</span> <span class="string">'否'</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">"公寓是否是自营"</span>,</span><br><span class="line"><span class="keyword">CONCAT</span>(TC.<span class="string">`name`</span>, <span class="string">'-'</span>, TC.street) <span class="keyword">AS</span> <span class="string">"小区地址"</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">t_flats TF</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_community TC <span class="keyword">ON</span> (TF.community_id = TC.id)</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_room TR <span class="keyword">ON</span> (TR.flats_id = TF.id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">TF.flats_num;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按照所列表格字段和SQL查询结果，写出SQL语句&lt;br&gt;&lt;img src=&quot;http://video.quejifang.cn/201903242049_827.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;查询结果&lt;br&gt;&lt;img src=&quot;http://video.quejifang
      
    
    </summary>
    
      <category term="数据库" scheme="https://qjiamei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="sql" scheme="https://qjiamei.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>多线程总结</title>
    <link href="https://qjiamei.github.io/2019/03/14/%E4%B8%80.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://qjiamei.github.io/2019/03/14/一.线程安全解决办法/</id>
    <published>2019-03-13T23:16:00.000Z</published>
    <updated>2019-03-13T12:53:50.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-线程安全解决办法"><a href="#一-线程安全解决办法" class="headerlink" title="一.线程安全解决办法"></a>一.线程安全解决办法</h3><ol><li>同步代码块,一般使用Object锁<code>synchronized (Object)</code>或者this锁,就是当前对象</li><li>同步方法使用this锁<code>public synchronized void sale() {</code></li><li>同步静态方法,使用锁是当前类的字节码文件<code>synchronized (ThreadTrain.class)</code></li><li>同步代码块是只能有一个线程进入该代码块，但是会有多个线程进入该方法，如果想要同一时刻只有一个线程进入方法，需要用同步方法。</li><li>一般静态变量或者静态方法,都是使用类.class作为锁. </li><li>Java中的对象锁和类锁：java的对象锁和类锁在锁的概念上基本上和内置锁是一致的，但是，两个锁实际是有很大的区别的，对象锁是用于对象实例方法，或者一个对象实例上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的对象实例可以有很多个，但是每个类只有一个class对象，所以不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁。但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。</li><li>锁是和对象相关联的，每个对象有一把锁，为了执行synchronized语句，线程必须能够获得synchronized语句中表达式指定的对象的锁，一个对象只有一把锁，被一个线程获得之后它就不再拥有这把锁，线程在执行完synchronized语句后，将获得锁交还给对象。</li><li>在方法前面加上synchronized修饰符即可以将一个方法声明为同步化方法。同步化方法在执行之前获得一个锁。如果这是一个类方法(就是静态方法)，那么获得的锁是和声明方法的类相关的Class类对象的锁。如果这是一个实例方法，那么此锁是this对象的锁。</li></ol><ul><li><p><strong>同步代码块</strong></p><ul><li>同步代码块指同一时刻只有一个线程进入同步代码块，但是多个线程可以进入方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////同步代码块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MythreadB</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tickets=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">////同步代码块，一次只允许一个线程进入该代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)</span><br><span class="line">            <span class="comment">//锁住的是当前MythreadB对象，而只有一个MythreadB对象，3个线程是通过MythreadB转换为Thread创建出来的，</span></span><br><span class="line">            <span class="comment">// 所以实现了同步，一次只能有线程卖票，一个线程卖完一张票后，隐式解锁，其他线程可以卖票</span></span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"还剩"</span> + tickets + <span class="string">"张票"</span>);</span><br><span class="line">                        tickets--;</span><br><span class="line">                        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synch</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MythreadB thread=<span class="keyword">new</span> MythreadB();</span><br><span class="line">        <span class="keyword">new</span> Thread(thread,<span class="string">"黄牛1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(thread,<span class="string">"黄牛2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(thread,<span class="string">"黄牛3"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>同步方法</strong></p><ul><li>同步方法是当方法声明上加synchronized，表示此时只有一个线程进入同步方法。锁住的该类实例化的对象。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MythreadB</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tickets=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sale();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span>  <span class="comment">//同步方法，表示同一时刻只能有一个线程进入该方法，锁住的是MythraedB对象</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"还剩"</span> + tickets + <span class="string">"张票"</span>);</span><br><span class="line">                tickets--;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="二-多线程的三大特性"><a href="#二-多线程的三大特性" class="headerlink" title="二.多线程的三大特性"></a>二.多线程的三大特性</h3><ol><li>原子性、可见性、有序性</li><li><strong>原子性</strong><ul><li>即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li><li>我们操作数据也是如此，比如i = i+1；其中就包括，读取i的值，计算i，写入i。这行代码在Java中是不具备原子性的，则多线程运行肯定会出问题，所以也需要我们使用同步和lock这些东西来确保这个特性了。<br>原子性其实就是保证数据一致、线程安全一部分，</li></ul></li><li><strong>可见性</strong><br>当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。<br>若两个线程在不同的cpu，那么线程1改变了i的值还没刷新到主存，线程2又使用了i，那么这个i值肯定还是之前的，线程1对变量的修改线程没看到这就是可见性问题。 </li><li><strong>有序性</strong><br>程序执行的顺序按照代码的先后顺序执行。<br>一般来说处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。如下：<br>int a = 10;    //语句1<br>int r = 2;    //语句2<br>a = a + 3;    //语句3<br>r = a*a;     //语句4<br>则因为重排序，他还可能执行顺序为 2-1-3-4，1-3-2-4<br>但绝不可能 2-1-4-3，因为这打破了依赖关系。<br>显然重排序对单线程运行是不会有任何问题，而多线程就不一定了，所以我们在多线程编程时就得考虑这个问题了。</li></ol><h3 id="三。Java内存模型"><a href="#三。Java内存模型" class="headerlink" title="三。Java内存模型"></a>三。Java内存模型</h3><p>共享内存模型指的就是Java内存模型(简称JMM)，JMM决定一个线程对共享变量的写入时,能对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。<br><img src="http://video.quejifang.cn/201903071958_705.png" alt=""></p><ul><li>总结：什么是Java内存模型：java内存模型简称jmm，定义了一个线程对另一个线程可见。共享变量存放在主内存中，每个线程都有自己的本地内存，当多个线程同时访问一个数据的时候，可能本地内存没有及时刷新到主内存，所以就会发生线程安全问题。</li></ul><h3 id="四。什么是Volatile"><a href="#四。什么是Volatile" class="headerlink" title="四。什么是Volatile"></a>四。什么是Volatile</h3><ul><li>Volatile 关键字的作用是变量在多个线程之间可见。</li><li>线程之间是不可见的，读取的是副本，没有及时读取到主内存结果。<br>解决办法使用Volatile关键字将解决线程之间可见性, 强制线程每次读取该值的时候都去“主内存”中取值</li><li>Volatile非原子性</li></ul><h3 id="五。AtomicInteger原子类"><a href="#五。AtomicInteger原子类" class="headerlink" title="五。AtomicInteger原子类"></a>五。AtomicInteger原子类</h3><ul><li>AtomicInteger是一个提供原子操作的Integer类，通过线程安全的方式操作加减。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileNoAtomic</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="comment">//等同于i++</span></span><br><span class="line">atomicInteger.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化10个线程</span></span><br><span class="line">VolatileNoAtomic[] volatileNoAtomic = <span class="keyword">new</span> VolatileNoAtomic[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 创建</span></span><br><span class="line">volatileNoAtomic[i] = <span class="keyword">new</span> VolatileNoAtomic();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; volatileNoAtomic.length; i++) &#123;</span><br><span class="line">volatileNoAtomic[i].start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="六-volatile与synchronized区别"><a href="#六-volatile与synchronized区别" class="headerlink" title="六. volatile与synchronized区别"></a>六. volatile与synchronized区别</h3><ol><li>仅靠volatile不能保证线程的安全性。（原子性）</li><li>volatile轻量级，只能修饰变量。synchronized重量级，还可修饰方法</li><li>volatile只能保证数据的可见性，不能用来同步，因为多个线程并发访问volatile修饰的变量不会阻塞。</li><li>synchronized不仅保证可见性，而且还保证原子性，因为，只有获得了锁的线程才能进入临界区，从而保证1. 临界区中的所有语句都全部执行。多个线程争抢synchronized锁对象时，会出现阻塞。<br><strong>线程安全性</strong></li><li>线程安全性包括两个方面，①可见性。②原子性。</li><li>从上面自增的例子中可以看出：仅仅使用volatile并不能保证线程安全性。而synchronized则可实现线程的安全性。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-线程安全解决办法&quot;&gt;&lt;a href=&quot;#一-线程安全解决办法&quot; class=&quot;headerlink&quot; title=&quot;一.线程安全解决办法&quot;&gt;&lt;/a&gt;一.线程安全解决办法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;同步代码块,一般使用Object锁&lt;code&gt;synchroni
      
    
    </summary>
    
      <category term="多线程" scheme="https://qjiamei.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="基础" scheme="https://qjiamei.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>springMVC注解等总结</title>
    <link href="https://qjiamei.github.io/2019/03/13/spring%20mvc%E6%B3%A8%E8%A7%A3/"/>
    <id>https://qjiamei.github.io/2019/03/13/spring mvc注解/</id>
    <published>2019-03-12T23:16:00.000Z</published>
    <updated>2019-03-13T13:01:39.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mvc接收参数"><a href="#mvc接收参数" class="headerlink" title="mvc接收参数"></a>mvc接收参数</h3><ol><li><p>从请求的URL中取参数出来,可以加(HttpServletRest request),就从request中取,<code>String id = request.getParmeter(&quot;id&quot;)</code></p></li><li><p>绑定简单类型,直接使用(String id),支持的简单数据类型有</p><ul><li>字符串：String</li><li>单精度：Float、float</li><li>双精度：Double、double()</li><li>布尔型：Boolean、boolean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 处理器方法：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editItem</span><span class="params">(Model model,Integer id,Boolean status)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">请求url：</span></span><br><span class="line"><span class="function">http:<span class="comment">//localhost:8080/xxx.action?id=2&amp;status=false</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li>使用注解 <code>@RequestParam</code>常用于处理简单类型的绑定<br><code>public String editItem(@RequestParam(value=&quot;item_id&quot;,required=true) String id) {}</code></li></ol><ul><li>形参名称为id，但是这里使用value=” item_id”限定请求的参数名为item_id，所以页面传递参数的名必须为item_id。<br>注意：如果请求参数中没有item_id将抛出异常：<br>HTTP Status 500 - Required Integer parameter ‘item_id’ is not present</li><li>这里通过required=true限定item_id参数为必需传递，如果不传递则报400错误，可以使用<code>defaultvalue</code>设置默认值，即使required=true也可以不传item_id参数值</li></ul><ol start="4"><li><p>使用pojo接收表单数据</p><ul><li>如果提交的参数很多，或者提交的表单中的内容很多的时候可以使用pojo接收数据。要求pojo对象中的属性名和表单中input的name属性一致。</li><li><code>&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;</code><br><code>&lt;input type=&quot;text&quot; name=&quot;price&quot;/&gt;</code><br><img src="http://video.quejifang.cn/201903131959_17.png" alt=""></li></ul></li><li><p>包装pojo同样的道理,要有对应的实体类</p></li><li><p>自定义参数绑定</p></li></ol><ul><li>由于日期数据有很多种格式，所以springmvc没办法把字符串转换成日期类型。所以需要自定义参数绑定。前端控制器接收到请求后，找到注解形式的处理器适配器，对RequestMapping标记的方法进行适配，并对方法中的形参进行参数绑定。在springmvc这可以在处理器适配器上自定义Converter进行参数绑定。</li><li><p>自定义converter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.parse(source);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Converter</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 加载注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service=<span class="string">"conversionService"</span>/&gt;</span><br><span class="line">&lt;!-- 转换器配置 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"conversionService"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.springmvc.convert.DateConverter"</span>/&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><p>7.springmvc默认提供yyyy/MM/dd HH:mm:ss这样的格式转换</p><ol start="8"><li>直接在实体类的时间属性上指定时间的格式(此种方式比较灵活)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createtime;</span><br></pre></td></tr></table></figure></li></ol><p>9.默认支持哪些类型：<br>HttpServletRequest、response、session、Model(用于将数据填充到request域)</p><h3 id="二-高级参数绑定"><a href="#二-高级参数绑定" class="headerlink" title="二.高级参数绑定"></a>二.高级参数绑定</h3><ol><li>绑定数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(QueryVo queryVo, String[] ids)</span> </span>&#123;</span><br><span class="line">System.out.println(queryVo.getItems().getName());</span><br><span class="line">System.out.println(queryVo.getItems().getPrice());</span><br><span class="line">System.out.println(ids.toString());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>或者：<br><img src="http://video.quejifang.cn/201903132022_396.png" alt=""></p><ol start="2"><li>将表单的数据绑定到List</li></ol><ul><li>List中存放对象，并将定义的List放在包装类中，使用包装pojo对象接收。<br><img src="http://video.quejifang.cn/201903132025_503.png" alt=""><br>itemsList[0]或itemsList[1]。。，[]中是序号，从0开始。<br>itemsList[].name：name就是controller方法形参包装类型中list中pojo的属性名<br><img src="http://video.quejifang.cn/201903132027_199.png" alt=""></li></ul><ol start="3"><li><code>@RequestMapping</code></li></ol><ul><li>限定GET方法<br><code>@RequestMapping(method = RequestMethod.GET)</code></li><li>限定POST方法<br><code>@RequestMapping(method = RequestMethod.POST)</code></li><li>GET和POST都可以<br><code>@RequestMapping(method={RequestMethod.GET,RequestMethod.POST})</code></li></ul><h3 id="三-Json数据交互"><a href="#三-Json数据交互" class="headerlink" title="三.Json数据交互"></a>三.Json数据交互</h3><ol><li><code>@RequestBody</code></li></ol><ul><li>@RequestBody注解用于读取http请求的内容(字符串)，通过springmvc提供的HttpMessageConverter接口将读到的内容转换为json、xml等格式的数据并绑定到controller方法的参数上。<br>List.action?id=1&amp;name=zhangsan&amp;age=12</li></ul><ol start="2"><li><code>@ResponseBody</code></li></ol><ul><li>该注解用于将Controller的方法返回的对象，通过HttpMessageConverter接口转换为指定格式的数据如：json,xml等，通过Response响应给客户端<br>本例子应用：<br>@ResponseBody注解实现将controller方法返回对象转换为json响应给客户端</li></ul><ol start="3"><li>还要配置一个json转换器以及添加jar包<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注解适配器 --&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"messageConverters"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>//json数据交互<br>    //@RequestBody:接收json数据并转换成pojo对象<br>    //@ResponseBody:响应json数据，把java对象转换成json并响应<br>    @RequestMapping(“/jsontest”)<br>    @ResponseBody<br>    public Items jsonTest(@RequestBody Items items) {<br>        return items;<br>    }</p></blockquote><p>页面js 方法编写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">引入 js：</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> </span><br><span class="line">src=<span class="string">"$&#123;pageContext.request.contextPath &#125;/js/jquery-1.4.4.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求json响应json</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendJson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">url:<span class="string">"$&#123;pageContext.request.contextPath &#125;/item/jsontest.action"</span>,</span><br><span class="line">data:<span class="string">'&#123;"id":1,"name":"电冰箱","price":1999.0&#125;'</span>,</span><br><span class="line">contentType:<span class="string">"application/json;charset=utf-8"</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(data.id +<span class="string">":"</span> +data.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">注意json数据的格式:data:'&#123;"id":1,"name":"电冰箱","price":1999.0&#125;',</span></span><br></pre></td></tr></table></figure></p><h3 id="四-URL模板模式映射"><a href="#四-URL模板模式映射" class="headerlink" title="四. URL模板模式映射"></a>四. URL模板模式映射</h3><p>@RequestMapping(value=”/ viewItems/{id}”)：{×××}占位符，请求的URL可以是“/viewItems/1”或“/viewItems/2”，通过在方法中使用@PathVariable获取{×××}中的×××变量。<br>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上。<br>@PathVariable 映射 URL 绑定的占位符<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/viewItems/&#123;id&#125;/&#123;name&#125;"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> viewItems(<span class="meta">@PathVariable</span>(<span class="string">"id"</span>) String id,Model model) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//方法中使用@PathVariable获取useried的值，使用model传回页面</span></span><br><span class="line"><span class="comment">//调用 service查询商品信息</span></span><br><span class="line">ItemsCustom itemsCustom = itemsService.findItemsById(id);</span><br><span class="line"><span class="keyword">return</span> itemsCustom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、GET[select]  请求会向数据库发索取数据的请求，从而来获取信息,其只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容。无论进行多少次操作，结果都是一样的。<br>2、PUT[update]  请求是向服务器端发送数据的，从而改变信息，其用来修改数据的内容，但是不会增加数据的种类等，无论进行多少次PUT操作，其结果并没有不同。<br>3、POST[insert]请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源.几乎目前所有的提交操作都是用POST请求的。<br>4、DELETE[delete]请求是用来删除某一个资源的。</p><p>如果RequestMapping中表示为”/viewItems/{id}”，id和形参名称一致，@PathVariable不用指定名称。</p><h3 id="拦截器定义"><a href="#拦截器定义" class="headerlink" title="拦截器定义"></a>拦截器定义</h3><p>实现HandlerInterceptor接口，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行前调用此方法</span></span><br><span class="line"><span class="comment"> * 返回true表示继续执行，返回false中止执行</span></span><br><span class="line"><span class="comment"> * 这里可以加入登录校验、权限拦截等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Return <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后但未返回视图前调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可在返回用户前对模型数据进行加工处理，比如这里加入公用信息以便页面显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后且视图返回后调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可得到执行controller时的异常信息</span></span><br><span class="line"><span class="comment"> * 这里可记录操作日志，资源清理等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>针对某种mapping配置拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean</span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"interceptors"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;ref bean=<span class="string">"handlerInterceptor2"</span>/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor1"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"handlerInterceptor2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"springmvc.intercapter.HandlerInterceptor2"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>针对所有mapping配置全局拦截器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--拦截器 --&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;!--多个拦截器,顺序执行 --&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="cn.itcast.springmvc.filter.HandlerInterceptor1"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping path=<span class="string">"/**"</span>/&gt;</span><br><span class="line">&lt;bean class="cn.itcast.springmvc.filter.HandlerInterceptor2"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mvc接收参数&quot;&gt;&lt;a href=&quot;#mvc接收参数&quot; class=&quot;headerlink&quot; title=&quot;mvc接收参数&quot;&gt;&lt;/a&gt;mvc接收参数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从请求的URL中取参数出来,可以加(HttpServletRest request
      
    
    </summary>
    
      <category term="SpringMVC" scheme="https://qjiamei.github.io/categories/SpringMVC/"/>
    
    
      <category term="框架" scheme="https://qjiamei.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>springBoot 基础总结</title>
    <link href="https://qjiamei.github.io/2019/03/13/springBoot%E6%A1%86%E6%9E%B6/"/>
    <id>https://qjiamei.github.io/2019/03/13/springBoot框架/</id>
    <published>2019-03-12T23:16:00.000Z</published>
    <updated>2019-03-23T12:26:28.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-简单工程搭建步骤"><a href="#一-简单工程搭建步骤" class="headerlink" title="一. 简单工程搭建步骤"></a>一. 简单工程搭建步骤</h3><h4 id="1-pom文件"><a href="#1-pom文件" class="headerlink" title="1. pom文件"></a>1. pom文件</h4><ul><li><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>他的父项目是下面这个,他来真正管理Spring Boot应用里面的所有依赖版本,没有在dependencies里的就要声明版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-启动器"><a href="#2-启动器" class="headerlink" title="2. 启动器"></a>2. 启动器</h4><ul><li>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-主程序类，主入口类"><a href="#3-主程序类，主入口类" class="headerlink" title="3. 主程序类，主入口类"></a>3. 主程序类，主入口类</h4><ul><li>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器</p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="images/搜狗截图20180129224104.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p><code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</code></p><p>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；以前我们需要自己配置的东西，自动配置类都帮我们；</p><h4 id="4-mave里需加入配置文件"><a href="#4-mave里需加入配置文件" class="headerlink" title="4. mave里需加入配置文件"></a>4. mave里需加入配置文件</h4><p>给maven 的settings.xml配置文件的profiles标签添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-maven-报红问题"><a href="#5-maven-报红问题" class="headerlink" title="5. maven 报红问题"></a>5. maven 报红问题</h4><ol><li><p><code>&lt;project</code>报红</p><ul><li>找到对应的maven的jar包删除</li><li>并且再更新一下<code>Reimport All maven Project</code>就可以了</li></ul></li><li><p>dependencies下面的包报红色波浪线的问题</p><ul><li>解决办法是,把对应的pom文件座标删除</li><li>在右边的lifecycle,clean一下</li><li>OK了</li></ul></li></ol><h3 id="二-yml语法"><a href="#二-yml语法" class="headerlink" title="二. yml语法"></a>二. yml语法</h3><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h4 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h4><ol><li>这个prefix里的也是小写<br><code>@Component</code><br><code>@ConfigurationProperties(prefix = &quot;person&quot;)</code></li><li>yml文件里请填写类型名字,也就是小写开头的.<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">   name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">   age:</span> <span class="number">19</span></span><br><span class="line"><span class="attr">   birth:</span> <span class="number">2019</span><span class="string">/5/3</span></span><br><span class="line"><span class="attr">   dog:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">ahuang</span></span><br><span class="line"><span class="attr">     age:</span>  <span class="number">2</span></span><br><span class="line"><span class="attr">   maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1</span> <span class="string">,</span> <span class="attr">k2:</span> <span class="string">v2&#125;</span></span><br><span class="line"><span class="attr">   lists:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">wangwu</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="三-properties配置要注意编码问题"><a href="#三-properties配置要注意编码问题" class="headerlink" title="三.properties配置要注意编码问题"></a>三.properties配置要注意编码问题</h3><p>在这里设置一下<br><img src="http://video.quejifang.cn/201903191126_857.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person.name=张三</span><br><span class="line">person.age=18</span><br><span class="line">person.birth=2018/3/3</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=v2</span><br><span class="line">person.lists=a,b,ch</span><br><span class="line">person.dog.name=阿黄</span><br><span class="line">person.dog.age=2</span><br></pre></td></tr></table></figure><h3 id="四-获取值的另一种方式"><a href="#四-获取值的另一种方式" class="headerlink" title="四.获取值的另一种方式"></a>四.获取值的另一种方式</h3><ul><li><code>@ConfigurationProperties</code>和<code>@Value</code><br><img src="http://video.quejifang.cn/201903191138_851.png" alt=""></li><li></li><li><p>@Value获取值和@ConfigurationProperties获取值比较</p></li></ul><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>总结:</strong></p><ul><li><p>配置文件yml还是properties他们都能获取到值；</p></li><li><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p></li><li><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p></li></ul><h3 id="五-三个注解学习"><a href="#五-三个注解学习" class="headerlink" title="五.三个注解学习"></a>五.三个注解学习</h3><ol><li>@PropertySource</li></ol><ul><li>@PropertySource读取外部指定的properties文件<code>@PropertySource(value={&quot;classpath:person.properties&quot;})</code></li><li>放到需要放入值的实体类上面</li></ul><ol start="2"><li>@ImportResource</li></ol><ul><li><code>@ImportResource</code>导入Spring的配置文件,让配置文件里面的内容生效</li><li>比如有一个beans.xml需成spring的组件!<br><img src="http://video.quejifang.cn/201903191210_530.png" alt=""></li><li>在主配置类上加上注解即可生效<br><img src="http://video.quejifang.cn/201903191215_579.png" alt=""><ul><li>测试方法<br><img src="http://video.quejifang.cn/201903191211_918.png" alt=""></li></ul></li></ul><ol start="3"><li>spring推荐的方式,不来编写配置文件,要给容器加组件,就用注解,写一个配置类</li></ol><ul><li>加注解<code>@Configuration</code></li><li>以前用<code>&lt;bean&gt;</code>来添加组件</li><li>现在使用注解<code>@Bean</code>来添加,容器中默认的id就是方法名</li><li><img src="http://video.quejifang.cn/201903191219_148.png" alt=""></li></ul><h3 id="六-的使用"><a href="#六-的使用" class="headerlink" title="六.${}的使用"></a>六.<code>${}</code>的使用</h3><ol><li>可以使用随机数</li><li>可以使用<code>:默认值</code> 来指定默认值<br><img src="http://video.quejifang.cn/201903191225_384.png" alt=""></li></ol><h3 id="七-Profile配置文件"><a href="#七-Profile配置文件" class="headerlink" title="七.Profile配置文件"></a>七.Profile配置文件</h3><p>1.yml支持多文档块方式,指定激活哪个文档块起作用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><p>2.Properties指定激活哪个文件<br><img src="http://video.quejifang.cn/201903191334_933.png" alt=""></p><ul><li>激活指定profile</li></ul><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev<br><img src="http://video.quejifang.cn/201903191326_994.png" alt=""></p><h3 id="八-配置文件加载位置"><a href="#八-配置文件加载位置" class="headerlink" title="八. 配置文件加载位置"></a>八. 配置文件加载位置</h3><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><ul><li><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p></li><li><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p></li></ul><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong><br>运维可以通过打包好后文件加命令参数指定配置文件生效<br><strong>spring.config.location来改变默认的配置文件位置</strong></p><p><code>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties</code></p><h3 id="九-外部配置加载顺序"><a href="#九-外部配置加载顺序" class="headerlink" title="九. 外部配置加载顺序"></a>九. 外部配置加载顺序</h3><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><ol start="12"><li>命令行加载外部的示例图片说明,文件中是一个jar包和一个properties<br><img src="http://video.quejifang.cn/201903191355_558.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-简单工程搭建步骤&quot;&gt;&lt;a href=&quot;#一-简单工程搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;一. 简单工程搭建步骤&quot;&gt;&lt;/a&gt;一. 简单工程搭建步骤&lt;/h3&gt;&lt;h4 id=&quot;1-pom文件&quot;&gt;&lt;a href=&quot;#1-pom文件&quot; cla
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://qjiamei.github.io/categories/SpringBoot/"/>
    
    
      <category term="框架" scheme="https://qjiamei.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>HTTP详解</title>
    <link href="https://qjiamei.github.io/2019/03/13/http%E8%AF%A6%E8%A7%A3/"/>
    <id>https://qjiamei.github.io/2019/03/13/http详解/</id>
    <published>2019-03-12T23:16:00.000Z</published>
    <updated>2019-04-11T03:28:14.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-HTTP协议详解"><a href="#一-HTTP协议详解" class="headerlink" title="一.HTTP协议详解"></a>一.HTTP协议详解</h3><ol><li>1.HTTP协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</li><li>HTTP协议作为TCP/IP模型中应用层的协议也不例外。HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS</li><li>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。</li><li>HTTP默认的端口号为80，HTTPS的端口号为443。</li><li>HTTP是一种协议，只要通信的双方都遵守这个协议，HTTP就能能信,比如浏览网页等<br><img src="http://video.quejifang.cn/201903131650_33.png" alt=""></li></ol><h3 id="二-HTTP特点"><a href="#二-HTTP特点" class="headerlink" title="二. HTTP特点"></a>二. HTTP特点</h3><ol><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li></ol><ol start="2"><li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p></li><li><p>HTTP 1.0默认是短连接,  1.1默认是长链接</p></li><li><strong>无状态：HTTP协议是无状态协议</strong>。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li><li>支持B/S及C/S模式。</li></ol><h3 id="三-HTTP之请求消息Request"><a href="#三-HTTP之请求消息Request" class="headerlink" title="三.HTTP之请求消息Request"></a>三.HTTP之请求消息Request</h3><ol><li><p>请求行、请求头、请求体三个部分组成。<br><img src="http://video.quejifang.cn/201903131700_263.png" alt=""></p></li><li><p>响应<br><img src="http://video.quejifang.cn/201903131713_464.png" alt=""></p></li><li>get,post区别<ul><li>地址栏（URI）会跟上参数数据。以？开头，多个参数之间以&amp;分割。</li><li>GET提交参数数据有限制，不超过1KB。</li><li>GET方式不适合提交敏感密码。</li><li>浏览器直接访问的请求，默认提交方式是GET方式</li></ul></li><li><p>post方式</p><ul><li>参数不会跟着URI后面。参数而是跟在请求的实体内容中。没有？开头，多个参数之间以&amp;分割。</li><li>POST提交的参数数据没有限制。</li><li>POST方式提交敏感数据。<br><img src="http://video.quejifang.cn/201903131705_28.png" alt=""></li></ul></li><li><p>常见的状态：<br>200 ：  表示请求处理完成并完美返回<br>302：   表示请求需要进一步细化。<br>304：   读取本地缓存<br>404：   表示客户访问的资源找不到。<br>500：   表示服务器的资源发送错误。（服务器内部错误）</p></li><li><p>HttpServletResponse对象</p><pre><code>HttpServletResponse对象修改响应信息：        响应行：                 response.setStatus()  设置状态码        响应头：                 response.setHeader(&quot;name&quot;,&quot;value&quot;)  设置响应头        实体内容：                response.getWriter().writer();   发送字符实体内容                response.getOutputStream().writer()  发送字节实体内容 </code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-HTTP协议详解&quot;&gt;&lt;a href=&quot;#一-HTTP协议详解&quot; class=&quot;headerlink&quot; title=&quot;一.HTTP协议详解&quot;&gt;&lt;/a&gt;一.HTTP协议详解&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;1.HTTP协议，即超文本传输协议(Hypertext tran
      
    
    </summary>
    
      <category term="http" scheme="https://qjiamei.github.io/categories/http/"/>
    
    
      <category term="基础" scheme="https://qjiamei.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库优化专题之二sql语句优化</title>
    <link href="https://qjiamei.github.io/2019/03/02/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BA%8Csql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/"/>
    <id>https://qjiamei.github.io/2019/03/02/MySQL数据库优化专题之二sql语句优化/</id>
    <published>2019-03-02T14:43:00.000Z</published>
    <updated>2019-03-07T10:49:36.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-联合索引"><a href="#一-联合索引" class="headerlink" title="一.联合索引"></a>一.联合索引</h3><p>alter table 表名 add primary key (列名);<br>创建一个联合索引<br>alter table dept add index my_ind (dname,loc); //  dname 左边的列,loc就是右边的列<br>注意:</p><ol><li>对于创建的多列索引，如果不是使用第一部分，则不会创建索引。<br>explain select * from dept where loc=’aaa’\G<br>就不会使用到索引</li><li>模糊查询在like前面有百分号开头会失效。</li><li>如果条件中有or，即使其中有条件带索引也不会使用。换言之，就是要求使用的所有字段，都必须建立索引, 我们建议大家尽量避免使用or 关键字</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来。否则不使用索引。(添加时,字符串必须’’), 也就是，如果列是字符串类型，就一定要用 ‘’ 把他包括起来.</li><li>如果mysql估计使用全表扫描要比使用索引快，则不使用索引。</li></ol><h3 id="二-查询所用使用率"><a href="#二-查询所用使用率" class="headerlink" title="二.查询所用使用率"></a>二.查询所用使用率</h3><p>show status like ‘handler_read%’;<br>大家可以注意：<br>handler_read_key:这个值越高越好，越高表示使用索引查询到的次数。<br>handler_read_rnd_next:这个值越高，说明查询低效。</p><h3 id="三-SQL优化技巧"><a href="#三-SQL优化技巧" class="headerlink" title="三.SQL优化技巧"></a>三.SQL优化技巧</h3><ol><li>使用group by 分组查询是，默认分组后，还会排序，可能会降低速度，</li><li>在group by 后面增加 order by null 就可以防止排序.explain select * from emp  group by deptno order by null;</li><li>有些情况下，可以使用连接来替代子查询。因为使用join，MySQL不需要在内存中创建临时表。<br>select <em> from dept, emp where dept.deptno=emp.deptno; [简单处理方式]<br>select </em> from dept left join emp on dept.deptno=emp.deptno;  [左外连接，更ok!]</li></ol><ol start="4"><li>对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引</li><li>应尽量避免在 where 子句中对字段进行 null值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num is null</li><li>最好不要给数据库留 NULL，尽可能的使用 NOT NULL 填充数据库.</li><li>备注、描述、评论之类的可以设置为 NULL，其他的，最好不要使用 NULL。</li><li>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL 也包含在内），都是占用 100 个字符的空间的，如果是 varchar 这样的变长字段， null 不占用空间。</li><li>可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询：<br>select id from t where num = 0</li></ol><p>30种调优技巧</p><ol><li><p>’对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p></li><li><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p></li><li><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p></li></ol><p>select id from t where num is null</p><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><p>select id from t where num=0</p><ol start="4"><li>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</li></ol><p>select id from t where num=10 or num=20</p><p>可以这样查询：</p><p>select id from t where num=10</p><p>union all</p><p>select id from t where num=20</p><ol start="5"><li>下面的查询也将导致全表扫描：</li></ol><p>select id from t where name like ‘%abc%’</p><p>若要提高效率，可以考虑全文检索。</p><ol start="6"><li>in 和 not in 也要慎用，否则会导致全表扫描，如：</li></ol><p>select id from t where num in(1,2,3)</p><p>对于连续的数值，能用 between 就不要用 in 了：</p><p>select id from t where num between 1 and 3</p><ol start="7"><li>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</li></ol><p>select id from t where num=@num</p><p>可以改为强制查询使用索引：</p><p>select id from t with(index(索引名)) where num=@num</p><ol start="8"><li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li></ol><p>select id from t where num/2=100</p><p>应改为:</p><p>select id from t where num=100*2</p><ol start="9"><li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</li></ol><p>select id from t where substring(name,1,3)=’abc’–name以abc开头的id</p><p>select id from t where datediff(day,createdate,’2005-11-30’)=0–’2005-11-30’生成的id</p><p>应改为:</p><p>select id from t where name like ‘abc%’</p><p>select id from t where createdate&gt;=’2005-11-30’ and createdate&lt;’2005-12-1’</p><ol start="10"><li><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p></li><li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p></li><li><p>不要写一些没有意义的查询，如需要生成一个空表结构：</p></li></ol><p>select col1,col2 into #t from t where 1=0</p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p><p>create table #t(…)</p><ol start="13"><li>很多时候用 exists 代替 in 是一个好的选择：</li></ol><p>select num from a where num in(select num from b)</p><p>用下面的语句替换：</p><p>select num from a where exists(select 1 from b where num=a.num)</p><ol start="14"><li><p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p></li><li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p></li><li><p>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p></li><li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p></li><li><p>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p></li><li><p>任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p></li><li><p>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p></li><li><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p></li><li><p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p></li><li><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p></li><li><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p></li><li><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p></li><li><p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p></li><li><p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p></li><li><p>在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p></li><li><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p></li><li><p>尽量避免大事务操作，提高系统并发能力。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-联合索引&quot;&gt;&lt;a href=&quot;#一-联合索引&quot; class=&quot;headerlink&quot; title=&quot;一.联合索引&quot;&gt;&lt;/a&gt;一.联合索引&lt;/h3&gt;&lt;p&gt;alter table 表名 add primary key (列名);&lt;br&gt;创建一个联合索引&lt;br&gt;al
      
    
    </summary>
    
      <category term="数据库" scheme="https://qjiamei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="https://qjiamei.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库优化专题之一</title>
    <link href="https://qjiamei.github.io/2019/03/02/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E4%B8%93%E9%A2%98%E4%B9%8B%E4%BA%8C%E4%B8%80/"/>
    <id>https://qjiamei.github.io/2019/03/02/MySQL数据库优化专题之二一/</id>
    <published>2019-03-02T10:43:00.000Z</published>
    <updated>2019-03-07T10:49:50.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-MySQL如何优化"><a href="#一-MySQL如何优化" class="headerlink" title="一.MySQL如何优化"></a>一.MySQL如何优化</h3><ol><li><p>表的设计合理化(符合3NF)</p></li><li><p>添加适当索引(index) [四种: 普通索引、主键索引、唯一索引unique、全文索引]</p></li><li><p><strong>SQL语句优化</strong></p></li><li><p>分表技术(水平分割、垂直分割)</p></li><li><p>读写分离</p></li><li><p>存储过程 [模块化编程，可以提高速度]</p></li><li><p>配置优化 [配置最大并发数my.ini, 调整缓存大小 ]</p></li><li><p>服务器硬件升级</p></li><li><p>清除不需要的数据,碎片整理(MyISAM)</p></li></ol><h3 id="二-数据库三大范式"><a href="#二-数据库三大范式" class="headerlink" title="二.数据库三大范式"></a>二.数据库三大范式</h3><ul><li>第一范式：1NF是对属性的<strong>原子性约束</strong>，要求属性<strong>(列)具有原子性</strong>，不可再分解；(只要是关系型数据库都满足1NF)</li><li>第二范式：2NF是对<strong>记录的惟一性约束</strong>，表中的记录是唯一的, 就满足2NF,通常我们<strong>设计一个主键来实现，主键不能包含业务逻辑</strong>。</li><li>第三范式：<strong>3NF是对字段冗余性的约束</strong>，它要求字段没有冗余。 没有冗余的数据库设计可以做到。<br>但是，没有冗余的数据库未必是最好的数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是： 在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。</li></ul><h3 id="三-垂直拆分"><a href="#三-垂直拆分" class="headerlink" title="三.垂直拆分"></a>三.垂直拆分</h3><ul><li>垂直分割指的是：表的记录并不多，但是字段却很长，表占用空间很大，检索表的时候需要执行大量的IO，严重降低了性能。这时需要把大的字段拆分到另一个表，并且该表与原表是一对一的关系。</li></ul><h3 id="四-水平拆分"><a href="#四-水平拆分" class="headerlink" title="四.水平拆分"></a>四.水平拆分</h3><ul><li>而水平切分就是要把一个表按照某种规则把数据划分到不同表或数据库里。<br><strong>总结</strong></li></ul><p><strong>垂直拆分：</strong><br>解决问题：</p><ol><li>表与表之间的io竞争</li><li>不解决问题：</li><li>单表中数据量增长出现的压力</li></ol><p>方案：</p><ul><li>把产品表和用户表放到一个server上</li><li>订单表单独放到一个server上</li></ul><p><strong>水平拆分：</strong><br>解决问题：</p><ol><li>单表中数据量增长出现的压力<br>不解决问题：</li><li>表与表之间的io争夺</li></ol><h3 id="五-取模方式分表"><a href="#五-取模方式分表" class="headerlink" title="五.取模方式分表"></a>五.取模方式分表</h3><ol><li>比如如何把6个数据均匀分配到3个表当中</li><li>可以拿ID为1%3=1,就分配到表1当,2%3=2,分配到表2中.3%3=0,分配到表0当中</li><li>比如在分布式当中如何确保ID唯一,可以先生成ID放在REDIS当中,再从REDIS中取ID.</li></ol><h3 id="六-SQL语句优化"><a href="#六-SQL语句优化" class="headerlink" title="六.SQL语句优化"></a>六.SQL语句优化</h3><p><strong>先要定位慢查询</strong></p><ol><li>什么是慢查询?</li></ol><ul><li>MySQL默认10秒内没有响应SQL结果,则为慢查询</li><li>可以去修改MySQL慢查询默认时间</li></ul><ol start="2"><li>如何修改慢查询<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--查询慢查询时间</span><br><span class="line">show variables like <span class="string">'long_query_time'</span>;</span><br><span class="line">--修改慢查询时间</span><br><span class="line">set long_query_time=<span class="number">1</span>; ---但是重启mysql之后，long_query_time依然是my.ini中的值</span><br></pre></td></tr></table></figure></li></ol><p>*3. 如何将慢查询定位到日志中<br>在默认情况下，我们的mysql不会记录慢查询，需要在启动mysql时候，指定记录慢查询才可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin\mysqld.exe --safe-mode  --slow-query-log [mysql5.5 可以在my.ini指定]（安全模式启动，数据库将操作写入日志，以备恢复）</span><br><span class="line">bin\mysqld.exe –log-slow-queries=d:/abc.log [低版本mysql5.0可以在my.ini指定]</span><br><span class="line">先关闭mysql,再启动, 如果启用了慢查询日志，默认把这个文件放在</span><br><span class="line">my.ini 文件中记录的位置</span><br><span class="line">#Path to the database root</span><br><span class="line">datadir=<span class="string">" C:/ProgramData/MySQL/MySQL Server 5.5/Data/"</span></span><br></pre></td></tr></table></figure></p><ol><li>MySQL explain执行计划解读</li></ol><ol><li>什么是索引</li></ol><ul><li>索引用来快速地寻找那些具有特定值的记录，所有MySQL索引都以B-树的形式保存。</li></ul><ol start="2"><li>主键索引</li></ol><ul><li>主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”</li><li>增加主键索引 alter table 表名 add primary key (列名);</li><li>删除主键索引 alter table articles drop primary key;</li></ul><ol start="3"><li>查询索引</li></ol><ul><li>desc  表名;   不能显示索引名称</li><li>show index from 表名</li><li>show keys from 表名</li></ul><ol start="4"><li>全文索引</li></ol><ul><li>在mysql中fulltext 索引只针对 myisam生效 </li><li>错误用法:<br>select <em> from articles where body like ‘%mysql%’; 错误用法 索引不会生效<br>正确用法:<br>select </em> from articles where body like ‘mysql%’; 错误用法 索引不会生效 </li></ul><ol start="5"><li>唯一索引</li></ol><ul><li>这种索引和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一。唯一性索引可以用以下几种方式创建： </li><li>创建索引，例如CREATE UNIQUE INDEX &lt;索引的名字&gt; ON tablename (列的列表)；<br>修改表，例如ALTER TABLE tablename ADD UNIQUE [索引的名字] (列的列表)；<br>创建表的时候指定索引，例如CREATE TABLE tablename ( […], UNIQUE [索引的名字] (列的列表) )；</li><li>unique字段可以为NULL,并可以有多NULL, 但是如果是具体内容，则不能重复，<br>但是不能存有重复的空字符串’’</li></ul><ol start="6"><li>数据库索引</li></ol><ul><li>是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 B 树及其变种 B+ 树。</li><li>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</li><li>为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。</li><li>B-TREE存储结构<br><img src="http://video.quejifang.cn/201903022235_514.png" alt=""></li></ul><h3 id="七-索引"><a href="#七-索引" class="headerlink" title="七.索引"></a>七.索引</h3><p>创建索引可以大大提高系统的性能。</p><ol><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li><li>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ol><p>也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？因为，增加索引也有许多不利的方面。</p><ol><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li></ol><p>索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。</p><ol><li>一般来说，应该在这些列上创建索引：在经常需要搜索的列上，可以加快搜索的速度；</li><li>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；</li><li>在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；</li><li>在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；</li><li>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；在经常使用在 WHERE 子句中的列上面创建索引，加快条件的判断速度。</li></ol><p>同样，对于有些列不应该创建索引。一般来说，不应该创建索引的的这些列具有下列特点：</p><ol><li>对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</li><li>对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</li><li>对于那些定义为 text, image 和 bit 数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</li><li>当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</li></ol><p>根据数据库的功能，可以在数据库设计器中创建三种索引：唯一索引、主键索引和聚集索引。<br>唯一索引</p><ol><li>唯一索引是不允许其中任何两行具有相同索引值的索引。<br>当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在 employee </li><li>表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。主键索引数据库表经常有一列或列组合，其值唯一标识表中的每一行。该列称为表的主键。在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。聚集索引在聚集索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。<br>如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快的数据访问速度。</li></ol><p>局部性原理与磁盘预读<br>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分分之一，因此为了提高效率，要尽量减少磁盘 I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。程序运行期间所需要的数据通常比较集中。<br>由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高 I/O 效率。<br>预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为 4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。<br>B-/+Tree 索引的性能分析<br>到这里终于可以分析 B-/+Tree 索引的性能了。<br>上文说过一般使用磁盘 I/O 次数评价索引结构的优劣。先从 B-Tree 分析，根据 B-Tree 的定义，可知检索一次最多需要访问 h 个节点。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次 I/O 就可以完全载入。为了达到这个目的，在实际实现 B-Tree 还需要使用如下技巧：<br>每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个 node 只需一次 I/O。<br>B-Tree 中一次检索最多需要 h-1 次 I/O（根节点常驻内存），渐进复杂度为 O(h)=O(logdN)。一般实际应用中，出度 d 是非常大的数字，通常超过 100，因此 h 非常小（通常不超过 3）。<br>而红黑树这种结构，h 明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的 I/O 渐进复杂度也为 O(h)，效率明显比 B-Tree 差很多。<br>综上所述，用 B-Tree 作为索引结构效率是非常高的。<br>应该花时间学习 B-树和 B+ 树数据结构</p><p>1）B 树<br>B 树中每个节点包含了键值和键值对于的数据对象存放地址指针，所以成功搜索一个对象可以不用到达树的叶节点。<br>成功搜索包括节点内搜索和沿某一路径的搜索，成功搜索时间取决于关键码所在的层次以及节点内关键码的数量。<br>在 B 树中查找给定关键字的方法是：首先把根结点取来，在根结点所包含的关键字 K1,…,kj 查找给定的关键字（可用顺序查找或二分查找法），若找到等于给定值的关键字，则查找成功；否则，一定可以确定要查的关键字在某个 Ki 或 Ki+1 之间，于是取 Pi 所指的下一层索引节点块继续查找，直到找到，或指针 Pi 为空时查找失败。<br>2）B+ 树<br>B+ 树非叶节点中存放的关键码并不指示数据对象的地址指针，非也节点只是索引部分。所有的叶节点在同一层上，包含了全部关键码和相应数据对象的存放地址指针，且叶节点按关键码从小到大顺序链接。如果实际数据对象按加入的顺序存储而不是按关键码次数存储的话，叶节点的索引必须是稠密索引，若实际数据存储按关键码次序存放的话，叶节点索引时稀疏索引。<br>B+ 树有 2 个头指针，一个是树的根节点，一个是最小关键码的叶节点。<br>所以 B+ 树有两种搜索方法：<br>一种是按叶节点自己拉起的链表顺序搜索。<br>一种是从根节点开始搜索，和 B 树类似，不过如果非叶节点的关键码等于给定值，搜索并不停止，而是继续沿右指针，一直查到叶节点上的关键码。所以无论搜索是否成功，都将走完树的所有层。<br>B+ 树中，数据对象的插入和删除仅在叶节点上进行。<br>这两种处理索引的数据结构的不同之处：<br>a，B 树中同一键值不会出现多次，并且它有可能出现在叶结点，也有可能出现在非叶结点中。而 B+ 树的键一定会出现在叶结点中，并且有可能在非叶结点中也有可能重复出现，以维持 B+ 树的平衡。<br>b，因为 B 树键位置不定，且在整个树结构中只出现一次，虽然可以节省存储空间，但使得在插入、删除操作复杂度明显增加。B+ 树相比来说是一种较好的折中。<br>c，B 树的查询效率与键在树中的位置有关，最大时间复杂度与 B+ 树相同(在叶结点的时候)，最小时间复杂度为 1(在根结点的时候)。而 B+ 树的时候复杂度对某建成的树是固定的。可以扫描2的次方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-MySQL如何优化&quot;&gt;&lt;a href=&quot;#一-MySQL如何优化&quot; class=&quot;headerlink&quot; title=&quot;一.MySQL如何优化&quot;&gt;&lt;/a&gt;一.MySQL如何优化&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;表的设计合理化(符合3NF)&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
      <category term="数据库" scheme="https://qjiamei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="https://qjiamei.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>JVM总结</title>
    <link href="https://qjiamei.github.io/2019/02/24/JVM%E6%80%BB%E7%BB%93/"/>
    <id>https://qjiamei.github.io/2019/02/24/JVM总结/</id>
    <published>2019-02-23T16:22:00.000Z</published>
    <updated>2019-02-16T02:21:42.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-JVM运行时数据区"><a href="#一-JVM运行时数据区" class="headerlink" title="一.JVM运行时数据区"></a>一.JVM运行时数据区</h3><p><img src="http://video.quejifang.cn/201902140038_502.png" alt=""></p><hr><p><strong>虚拟机栈</strong></p><ul><li>作用</li></ul><ol><li>描述Java方法执行的内存模型。每个方法在执行的同时都会开辟一段内存区域用于存放方法运行时所需的数据，成为栈帧</li><li>一个栈帧包含如：<strong>局部变量表、操作栈、动态链接、方法出口</strong>等信息。</li></ol><ul><li>意义<br>JVM是基于栈的，所以每个方法从调用到执行结束，就对应着一个栈帧在虚拟机栈中入栈和出栈的整个过程。<br>存储内容 </li><li>局部变量表（编译期可知的各种基本数据类型、引用类型和指向一条字节码指令的returnAddress类型）、操作数栈、动态链接、方法出口等信息。</li><li><strong>局部变量表(八大基本数据类型,对象引用,returnAddress</strong>)<br>值得注意的是：局部变量表所需的内存空间在编译期间完成分配。在方法运行的阶段是不会改变局部变量表的大小的。</li><li>可能出现的异常<br>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。<br>如果在动态扩展内存的时候无法申请到足够的内存，就会抛出OutOfMemoryError异常。</li></ul><p><strong>本地方法栈</strong></p><ul><li>作用<br>为JVM所调用到的Nativa即本地方法服务。</li><li>可能出现的异常<br>和虚拟机栈出现的异常很相像。</li></ul><p><strong>方法区</strong></p><ul><li>作用<br>方法区是各个线程共享的内存区域, 用于存储<strong>运行时常量池、已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。</li><li>意义<br>对运行时常量池、常量、静态变量等数据做出了规定。</li><li>存储内容<br>运行时常量池（具有动态性）、已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据(JIT编译的代码)。</li><li>可能出现的异常<br>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</li></ul><hr><h3 id="二-JVM内存模型"><a href="#二-JVM内存模型" class="headerlink" title="二.JVM内存模型"></a>二.JVM内存模型</h3><p><img src="http://video.quejifang.cn/201902140100_16.png" alt=""></p><ul><li>堆是JVM内存占用最大，管理最复杂的一个区域。其唯一的用途就是存放对象实例：所有的对象实例及数组都在对上进行分配</li><li>老年代 ： 三分之二的堆空间<br>年轻代 ： 三分之一的堆空间<br>eden区： 8/10 的年轻代空间<br>survivor0 : 1/10 的年轻代空间<br>survivor1 : 1/10 的年轻代空间</li></ul><ol><li>堆分成两大块,新生代和老年代,对象产生之初在新生代,步入暮年时进入老年代,但是老年代也接纳在新生代无法容纳的超大对象</li><li>新生代 = 1个Eden区 + 2个Survivor区</li><li>大部份对象在Eden区生成,当Eden区装满的时候, 会触发YGC(Yong Garbage Collection 垃圾回收),触发后Eden区实现清除策略,没有被引用的对象则直接回收,存活的对象会被送到Survivor</li><li>Survivor有两个,会被送到哪一个呢?<ul><li>它的策略是:每次YGC的时候,它将存活的对象复制到未使用的那块空间,然后将当前使用的空间清除,交换两块空间的使用状态.</li><li>当要移送的对象大于S区容量的上限,则直接交给老年代.</li><li>假如一些没有进取心的的对象在S1和S2换来换去用什么策略防止呢?每个对象都有一个计数器,每次YGC都会加1,-XX:Max TenuringThreshold参数能配置计数器达到某个阈值的时候,对象直接从新生代晋升到老年代,默认值是15,可以在S区交换14次之的之后晋升到老年代</li></ul><ol start="5"><li>如果S区无法放下,或者超大对象的阈值超过上限,则尝试在第年代中进行分配,如果老年代也无法放下,则会触发FGC(Full Garbage Collection),还是放不下的话,则会抛出OOM(Out of Memory)</li></ol></li></ol><h3 id="三-JVM内存模型—持久代"><a href="#三-JVM内存模型—持久代" class="headerlink" title="三.JVM内存模型—持久代"></a>三.JVM内存模型—持久代</h3><p>持久代中包含了虚拟机中所有可通过<strong>反射获取到的数据，比如Class和Method对象</strong>。不同的Java虚拟机之间可能会进行类共享，因此持久代又分为只读区和读写区。</p><p>JVM用于描述应用程序中用到的类和方法的元数据也存储在持久代中。JVM运行时会用到多少持久代的空间取决于应用程序用到了多少类。除此之外，Java SE库中的类和方法也都存储在这里。</p><p>如果JVM发现有的类已经不再需要了，它会去回收（卸载）这些类，将它们的空间释放出来给其它类使用。Full GC会进行持久代的回收。</p><ul><li>JVM中类的<strong>元数据</strong>在Java堆中的存储区域。</li><li>Java类对应的HotSpot虚拟机中的<strong>内部表示</strong>也存储在这里。</li><li>类的<strong>层级信息，字段，名字</strong>。</li><li>方法的<strong>编译信息及字节码</strong>。</li><li><strong>变量</strong></li><li><strong>常量池和符号解析</strong></li><li>(所谓的元数据是指用来描述数据的数据，更通俗一点就是描述代码间关系，或者代码与其它资源（例如数据库表）之间内在联系得数据，对Struts来说就是struts-config.xml,对ejb来说就是ejb-jar.xml和厂商自定义的xml文件，对hibernate来说就是hbm文件。)</li></ul><p><strong>持久代的大小</strong></p><ul><li>它的上限是MaxPermSize，默认是64M</li><li>Java堆中的连续区域 : 如果存储在非连续的堆空间中的话，要定位出持久代到新对象的引用非常复杂并且耗时。卡表（card table），是一种记忆集（Remembered Set），它用来记录某个内存代中普通对象指针（oops）的修改。</li><li>持久代用完后，会抛出OutOfMemoryError “PermGen space”异常。解决方案：应用程序清理引用来触发类卸载；增加MaxPermSize的大小。</li><li>需要多大的持久代空间取决于类的数量，方法的大小，以及常量池的大小。</li></ul><p><strong>为什么移除持久代</strong></p><ul><li>它的大小是在启动时固定好的——很难进行调优。-XX:MaxPermSize，设置成多少好呢？</li><li>HotSpot的内部类型也是Java对象：它可能会在Full GC中被移动，同时它对应用不透明，且是非强类型的，难以跟踪调试，还需要存储元数据的元数据信息（meta-metadata）。</li><li>简化Full GC：每一个回收器有专门的元数据迭代器。</li><li>可以在GC不进行暂停的情况下并发地释放类数据。</li><li>使得原来受限于持久代的一些改进未来有可能实现</li></ul><h3 id="JVM内存模型–元空间-metaspace"><a href="#JVM内存模型–元空间-metaspace" class="headerlink" title="JVM内存模型–元空间(metaspace"></a>JVM内存模型–元空间(metaspace</h3><ul><li>持久代的空间被彻底地删除了，它被一个叫<strong>元空间</strong>的区域所替代了。持久代删除了之后，很明显，JVM会忽略PermSize和MaxPermSize这两个参数，还有就是你再也看不到java.lang.OutOfMemoryError: PermGen error的异常了。原来类的<strong>静态变量和Interned Strings</strong> 都被转移到了java堆区，<strong>只有class元数据才在元空间。JDK 8的HotSpot JVM现在使用的是本地内存来表示类的元数据，这个区域就叫做元空间</strong></li><li>持久代区别于元空间,元空间在本地内存中分配,在JDK8里,Perm区中的所有内容中字符串常量移至堆内存,其它内容(包括类远元信息,字段,静态属性,方法,常量等移至元空间内,)</li></ul><p><strong>元空间的特点：</strong></p><ul><li>充分利用了Java语言规范中的好处：<strong>类及相关的元数据的生命周期与类加载器的一致</strong>。</li><li>每个加载器有专门的存储空间</li><li>只进行线性分配</li><li>不会单独回收某个类</li><li>省掉了GC扫描及压缩的时间</li><li>元空间里的对象的位置是固定的</li><li>如果GC发现某个类加载器不再存活了，会把相关的空间整个回收掉</li></ul><p><strong>元空间的内存分配模型</strong></p><ul><li>绝大多数的类元数据的空间都从本地内存中分配</li><li>用来描述类元数据的类也被删除了</li><li>为元数据分配了多个虚拟内存空间</li><li>给每个类加载器分配一个内存块的列表。块的大小取决于类加载器的类型;</li><li><code>sun</code>/反射/代理对应的类加载器的块会小一些</li><li>归还内存块，释放内存块列表</li><li>一旦元空间的数据被清空了，虚拟内存的空间会被回收掉</li><li>减少碎片的策略</li></ul><p><strong>元空间的调优</strong></p><ul><li>使用-XX:MaxMetaspaceSize参数可以设置元空间的最大值，默认是没有上限的，也就是说你的系统内存上限是多少它就是多少。</li><li><code>-XX:MetaspaceSize</code>选项指定的是元空间的初始大小，如果没有指定的话，元空间会根据应用程序运行时的需要动态地调整大小。</li></ul><p><a href="https://blog.csdn.net/u011464536/article/details/78235438" target="_blank" rel="noopener">参考网站 </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-JVM运行时数据区&quot;&gt;&lt;a href=&quot;#一-JVM运行时数据区&quot; class=&quot;headerlink&quot; title=&quot;一.JVM运行时数据区&quot;&gt;&lt;/a&gt;一.JVM运行时数据区&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://video.quejifang.c
      
    
    </summary>
    
      <category term="基础" scheme="https://qjiamei.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JVM" scheme="https://qjiamei.github.io/tags/JVM/"/>
    
  </entry>
  
</feed>
